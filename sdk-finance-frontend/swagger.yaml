openapi: 3.0.3
info:
  title: Merchant Bank API
  description: API of Merchant Bank application
  contact:
    name: API of Merchant Bank application
    url: http://127.0.0.1/
    email: cryptoc1980@gmail.com
  license:
    name: Merchant Bank
    url: https://127.0.0.1/
  version: v2.0.11
servers:
- url: "https://{host}:{port}/{basePath}"
  description: Generated API server
  variables:
    port:
      description: Server port
      default: "443"
    host:
      description: Server host
      default: https://127.0.0.1
    basePath:
      description: Base path
      default: api/v1
security:
- BearerAuth: []
tags:
- name: System health check
  description: Check if server is up and running
- name: Authorization
  description: "The SDK.finance APIs use a Bearer access token to authenticate requests.\
    \ <h3>Generate access token</h3> To get access token use `/authorization` API.\
    \ Sample credentials are provided in the API description. <h3>Refresh access token</h3>\
    \ In order to refresh an access token just simply request a new access token by\
    \ calling `/authorization` API. <h3>Using access token</h3> Once you obtain the\
    \ access token it can be used to access other SDK.finance APIs. <br>Token should\
    \ be provided in the `Authorisation` header: `Authorization: Bearer {{token}}`\
    \ or `-H 'Authorization: Bearer {{token}}'`  for `curl` <br>If you use swagger,\
    \ provide the received token in the `BearerAuth` value."
- name: Available IP
  description: Allowed IP Controller
- name: Bank catalog management
  description: "To be able to create a bank account and link it to the system account\
    \ bank should be added to the system, first. <br>It is possible to create banks\
    \ one by one or to upload a list of banks in the defined format."
- name: Bank accounts management by business roles
  description: "User with role **Individual** or **Merchant** is able to view and\
    \ manage their bank accounts. Bank account should be created to perform the following\
    \ operations with in-system accounts: <li>Top-up in-system account from bank account\
    \ <li>Transfer from in-system account to bank account If bank account is created\
    \ by business user it should be approved by compliance so that it can be used."
- name: Bank accounts management by service roles
  description: User with service role is able to manage bank accounts on behalf of
    business users if it is required. <br>Compliance should approve bank account created
    by business user so that it can be used.
- name: Business processes management
  description: Business Process Management Controller
- name: Callback settings for non-merchant operations
  description: Callback Settings Controller
- name: Card controller
  description: Card Controller
- name: Cash desk - working day management
  description: "For working with cash desk it is required to manage working days:\
    \ view current day status, open or close working day. <br>Cash Desk working day\
    \ is the day during which cash operations are possible. If the working day is\
    \ closed operations with cash desk are not allowed. <br>User with the appropriate\
    \ permissions is able to open working day and initiate closing of working day.\
    \ <br>Closing of the working day should be confirmed by another user with the\
    \ appropriate permissions."
- name: Cash desk - cash management
  description: "Cash management for cash desks includes the following use cases: <li>**Put\
    \ cash in cash desk** - operation Cash desk investment <li>**Move cash between\
    \ cash desks** - operations Cash desk collect and Cash desk input. <br><br>**Cash\
    \ desk investment** operation performs top-up of cash desk account. <br>**Cash\
    \ desk collect** operation performs transfer from cash desk account to the special\
    \ reserve account which shows amount if cash which is transferring. <br>**Cask\
    \ desk input** operation performs transfer from reserve account to cash desk account."
- name: Cash desk operations
  description: Cash Desk Management Controller
- name: Coin credit limit management
  description: Coin Credit Limit Management Controller
- name: Coin info
  description: Coin Info Controller
- name: Coin management
  description: Coin Controller
- name: Coin management as supervisor
  description: Coin Management Controller
- name: Contact book
  description: Contact Book Controller
- name: Contract management
  description: Contract Management Controller
- name: Country information
  description: Country Controller
- name: Currency management
  description: "The Merchant Bank platform supports multicurrency. You can create\
    \ as many currencies as you need and it can be either real currency or any entity\
    \ you are going to account in the platform, like points, bonuses etc. <br>To be\
    \ able to use created currency Issuer for this currency should be created. Look\
    \ at the **Issuers management** for the details."
- name: Environment variable tech management. For developers only
  description: Environment Variables Controller
- name: Exchange
  description: Exchange Controller
- name: Export transactions
  description: Export Transactions Controller
- name: Filter templates management provider
  description: Filter Template Management Controller
- name: Gate - interaction with external payment systems
  description: Gate Controller
- name: Gate commission product rule management
  description: Gate Commission Product Rule Controller
- name: Gate commission provider rule management
  description: Gate Commission Provider Rule Controller
- name: Gate contract management
  description: Gate Profile Management Controller
- name: Gate investment operations
  description: Gate Investment Controller
- name: Gate provider management
  description: Gate Provider Controller
- name: Gate purchases - pay for external services with your wallet
  description: Gate Purchase Controller
- name: I18n - management
  description: I 18n Management Controller
- name: In-system communication
  description: Conversation Controller
- name: Internal commission rule management
  description: Internal Commission Rule Controller
- name: Invoice
  description: Invoice Controller
- name: Invoice Template
  description: Invoice Template Controller
- name: Issuers management
  description: Issuer entity in the SDK.finance platform is connected with Currency.
    <br>One currency can be linked to the several Issuers which provides more flexibility
    for the accounting. <br>Accounting of transactions within different Issuers is
    performed independently for each Issuer.
- name: Media files management
  description: Media File Controller
- name: Merchant Payment
  description: Merchant Payment Controller
- name: Merchant product
  description: Merchant Product Controller
- name: Merchant product categories
  description: Merchant Product Category Controller
- name: Merchant product measure units
  description: Measure Unit Controller
- name: Merchant product price
  description: Merchant Product Price Controller
- name: Notification message keys
  description: Notification Message Key Provider
- name: Operator profile management
  description: Profile Management Controller
- name: Organization management
  description: Organization Controller
- name: Organization membership management
  description: Member Management Controller
- name: Organization settings management
  description: Organization Settings Controller
- name: Owner profile management
  description: Profile Controller
- name: Password recovery
  description: Password Recovery Controller
- name: Point of sale
  description: Point Of Sale Controller
- name: Prepaid
  description: Prepaid Controller
- name: Profile - documents approving
  description: Profile Documents Approving Controller
- name: Profile - documents uploading
  description: Profile Document Submitting Controller
- name: Profile - identification
  description: Profile Identification Controller
- name: Profile - Master PIN
  description: Master Pin Controller
- name: Profile - transactions confirmation
  description: Process Confirmation Settings Controller
- name: Provider coin management
  description: Provider Coin Management Controller
- name: Reporting
  description: Endpoints for fetch statistics
- name: Smart cards management - as client
  description: Smart Cards Controller
- name: Smart cards management - as supervisor
  description: Smart Cards Management Controller
- name: Subscriptions
  description: Subscriptions Controller
- name: Support
  description: Ticket Controller
- name: System roles management
  description: Role Group Controller
- name: Templates
  description: Cart Template Controller
- name: Top up via bank
  description: Bank Top Up Controller
- name: Top up via cash desk
  description: Cash Desk Top Up Controller
- name: Transaction Categories
  description: Transaction Categories Controller
- name: Transactions
  description: Transaction Controller
- name: Transfer
  description: Transfer Controller
- name: Transfer Template
  description: Transfer Template Controller
- name: User management by service roles
  description: "User with service role is able to manage users in the system. Default\
    \ users with the following roles are created: <br><br>**Service roles** <li>Administrator\
    \ <li>Accountant <li>Compliance manager <li>Cashier <br><br>**Business roles**\
    \ <li>Individual <li>Merchant <br>You can use these users to play with our sandbox\
    \ using sample credentials which you can find in the description of the API `/authorization`"
- name: User notifications
  description: "To send notification to user by provided `userId`. <br>Notification\
    \ will be sent to the verified user contact, email and/or phone."
- name: User actions monitoring
  description: All actions performed in the system are store in the database and can
    be viewed using APIs
- name: User message API provider
  description: User Message Controller
- name: User note API provider
  description: User Note Controller
- name: User self-registration
  description: Registration Controller
- name: Validation for coin
  description: Validate Coin Controller
- name: Validation for smart card
  description: Smart Card Validate Controller
- name: Validation for user contact
  description: Validate Contact Controller
- name: Withdraw via cash desk
  description: Cash Desk Withdrawal Controller
- name: Withdrawal via bank
  description: Bank Withdrawal Controller
paths:
  /authorization:
    post:
      tags:
      - Authorization
      summary: Get access token to authenticate other APIs for users without enabled
        dual authentication
      description: "Use this API to get access token. If dual authentication is not\
        \ enabled for the specified user, \nyou will receive token along with other\
        \ users' parameters in the response. \n<br><br>Provide the received token\
        \ as Bearer to authenticate other APIs. \n<br><br>The following service roles\
        \ and credentials can be used:\n<br><li> Administrator, `administrator@sdkfinance.tech`\n\
        <br><li> Accountant, `accountant@sdkfinance.tech`\n<br><li> Compliance manager,\
        \ `compliance_manager@sdkfinance.tech` \n<br><br>The following business roles\
        \ and credentials can be used: \n<br><li> Individual, `individual@sdkfinance.tech`\n\
        <br><li> Merchant, `merchant@sdkfinance.tech` \n<br><br>The sample password\
        \ for all mentioned users is “1”.\n<br>If dual authentication is enabled for\
        \ the specified user OTP will be sent to the provided credentials. The received\
        \ OTP should be provided in the API `/authorization/confirm` to get the token.\n"
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /authorization/confirm:
    post:
      tags:
      - Authorization
      summary: Pass the received OTP and get access token to authenticate other APIs
        for users with enabled dual authentication
      description: "Use this API to pass the received OTP and get access token. You\
        \ will receive token along with other users’ parameters in the response. \n\
        <br>Provide the received token as Bearer to authenticate other APIs.\n"
      operationId: loginConfirmByOtp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateOtpReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /authorization/resend-otp:
    post:
      tags:
      - Authorization
      summary: Resend OTP for authorisation
      description: "Use this API to resend OTP for authorisation if it was not received\
        \ or if it is expired. \n<br> OTP will be sent to the provided credentials\
        \ if the user with the provided credentials exists in the system. \nThe received\
        \ OTP should be passed in the API `/authorization/confirm` to get the access\
        \ token.\n"
      operationId: resendOtpForLoginConfirmation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /available-ip:
    post:
      tags:
      - Available IP
      summary: Add available IP
      description: This can only be done by the logged in user
      operationId: addAvailableIp
      requestBody:
        description: Request to add available IP
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAllowedIPReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedIPResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /available-ip/roles/{role}:
    get:
      tags:
      - Available IP
      summary: Get available IP by role
      description: This can only be done by the logged in user
      operationId: getAvailableIpByRole
      parameters:
      - name: role
        in: path
        description: Role to get available IP
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedIPResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Available IP
      summary: Delete available IP by role
      description: This can only be done by the logged in user
      operationId: deleteAvailableIpByRole
      parameters:
      - name: role
        in: path
        description: Role to deleting available IP
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /available-ip/{ipId}:
    delete:
      tags:
      - Available IP
      summary: Delete available IP by id
      description: This can only be done by the logged in user
      operationId: deleteAvailableIpById
      parameters:
      - name: ipId
        in: path
        description: Available IP identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedIPResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-accounts/view:
    post:
      tags:
      - Bank accounts management by service roles
      summary: View the list of bank accounts by business roles with filtering and
        pagination
      description: |
        Use this API to get the list of bank accounts by service roles. API supports filtering pagination.
        <br>API can be called only by the authorised user with the appropriate permissions.
        <br>In the response, you will receive the list of bank accounts with bank account `id` and account details. Pass `id` to the APIs where bank account id is required.
      operationId: viewBankAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountsViewReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-accounts/coin/{coinSerial}/with-bank:
    post:
      tags:
      - Bank accounts management by service roles
      summary: Create a new bank account by service user
      description: |
        This API can be used by users with service roles to add bank account to the system and link it to the in-system account.
        <br>API can be called only by the authorised user with the appropriate permissions.
        <br>To call this API you have to pass the following information along with bank account details:
        <li>In-system account number to which bank account will be linked. Take `serial` from the API `GET /coins` and pass it to the `coinSerial` parameter.
        <li>ID of bank where bank account is opened. Take `bankId` from the API `GET /bank-catalog` and pass it to the `bankId` fields in the request body.
        <br>In the response, you will receive the bank account `id` along with account details. Pass `id` to the API to approve bank account or to any other API where bank account id is required.
        <br>Created bank account should be approved by compliance using API `POST/bank-accounts/{bankAccountId}/approve`
      operationId: createBankAccountWithBank
      parameters:
      - name: coinSerial
        in: path
        description: In-system account number
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-accounts/{bankAccountId}/approve:
    post:
      tags:
      - Bank accounts management by service roles
      summary: Approve bank account by provided bank account id
      description: |
        This API can be used by users with service roles to approve added earlier bank account. Approved bank account can be used for operations.
        <br>API can be called only by the authorised user with the the appropriate permissions.
        <br>To call this API you have to pass the following information:
        <li>ID of bank account. Take `id` from the API `POST /bank-accounts/view` and pass it to the parameter `bankAccountId`.
      operationId: approveBankAccount
      parameters:
      - name: bankAccountId
        in: path
        description: ID of the bank account
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: 1ef7432a-e2cd-4334-af11-729f226c41d6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAndUpdateBankAccountResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-accounts/{bankAccountId}/reject:
    post:
      tags:
      - Bank accounts management by service roles
      summary: Reject bank account by provided bank account id
      description: |
        This API can be used by users with service roles to reject added earlier bank account. Rejected bank account can't be used for operations.
        <br>API can be called only by the authorised user with the appropriate permissions.
        <br>To call this API you have to pass the following information:
        <li>ID of bank account. Take `id` from the API `POST /bank-accounts/view` and pass it to the parameter `bankAccountId`.
      operationId: rejectBankAccount
      parameters:
      - name: bankAccountId
        in: path
        description: ID of the bank account
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: 1ef7432a-e2cd-4334-af11-729f226c41d6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAndUpdateBankAccountResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-accounts/{bankAccountId}:
    delete:
      tags:
      - Bank accounts management by service roles
      summary: Delete added earlier bank account by provided bank account ID
      description: |
        This API can be used by users with service roles to delete added earlier bank account.
        <br>API can be called only by the authorised user with the appropriate permissions.
        <br>To call this API you have to pass the following information:
        <li>ID of bank account. Take `id` from the API `POST /bank-accounts/view` and pass it to the parameter `bankAccountId`.
      operationId: deleteBankAccount
      parameters:
      - name: bankAccountId
        in: path
        description: ID of the bank account
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: 1ef7432a-e2cd-4334-af11-729f226c41d6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-accounts/{bankAccountId}/with-bank:
    patch:
      tags:
      - Bank accounts management by service roles
      summary: Change bank account details by provided bank account id
      description: |
        This API can be used by users with service roles to change bank account details for already added bank account.
        <br>API can be called only by the authorised user with the appropriate permissions.
        <br>To call this API you have to pass the following information along with bank account details:
        <li>ID of bank account. Take `id` from the API `GET /my/bank-accounts` or `POST /my/bank-accounts/view` and pass it to the parameter `bankAccountId`.
        <li>ID of bank where bank account is opened. Take `bankId` from the API `GET /bank-catalog` and pass it to the `bankId` fields in the request body.
      operationId: updateBankAccountWithBank
      parameters:
      - name: bankAccountId
        in: path
        description: ID of the bank account
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: 7cf1f309-09cd-4eda-8b2c-682bf64fd7cd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-catalog:
    get:
      tags:
      - Bank catalog management
      summary: Get list of banks added to the system
      description: "Use this API to get list of banks added to the system. \n<br>API\
        \ can be called only by the authorised user with the appropriate permissions.\
        \ Permission to call this API: `BANK_CATALOG_VIEWER`.\n<br> In the response,\
        \ you will receive the list of banks added to the system, with all provided\
        \ bank details. \n<br> You can use this API as well if you need to get `bankId`\
        \ to pass it to any other API.\n"
      operationId: getAllBanks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanksResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Bank catalog management
      summary: Add a bank to the system
      description: "Use this API to add a bank to the system. \n<br>After adding,\
        \ the bank can be used when creating a bank account and linking it to the\
        \ system account. \n<br>In the response, you will receive `bankId` along with\
        \ the provided details. Pass `bankId` to the APIs where a bank ID is required.\n\
        <br>If you need `bankId` for already added bank you can get it by calling\
        \ API `GET /bank-catalog`. \n<br>API can be called only by the authorised\
        \ user with the appropriate permissions. Permission to call this API: `BANK_CATALOG_MANAGER`.\
        \ \n<br>To check which role has this permission call API `/environment-variables`.\n"
      operationId: createBank
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-catalog/import:
    post:
      tags:
      - Bank catalog management
      summary: Import banks
      description: |
        API can be called only by the authorised user with the appropriate permissions. Permission to call this API: `BANK_CATALOG_MANAGER`.
      operationId: importBanks
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileMultipartFormDataRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanksResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: true
      security:
      - BearerAuth: []
  /bank-catalog/{bankId}:
    get:
      tags:
      - Bank catalog management
      summary: Get bank details by provided Bank ID
      description: "Use this API to get bank details by provided Bank ID. `BankId`\
        \ is returned in the API response for bank creation `POST /bank-catalog` \n\
        or can be taken from the API `GET /bank-catalog`.\n<br>API can be called only\
        \ by the authorised user with the appropriate permissions. Permission to call\
        \ this API: `BANK_CATALOG_VIEWER`\n"
      operationId: getBank
      parameters:
      - name: bankId
        in: path
        description: |
          Internal Bank identifier. `BankId` is returned in the API response for bank creation `POST /bank-catalog`
          or can be taken from the API `GET /bank-catalog`.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Bank catalog management
      summary: Delete bank by provided Bank ID
      description: "Use this API to delete bank with provided Bank ID. `BankId` is\
        \ returned in the API response for bank creation `POST /bank-catalog` \nor\
        \ can be taken from the API `GET /bank-catalog`.\n<br>API can be called only\
        \ by the authorised user with the appropriate permissions. Permission to call\
        \ this API: `BANK_CATALOG_MANAGER`.\n"
      operationId: deleteBank
      parameters:
      - name: bankId
        in: path
        description: |
          Internal Bank identifier. `BankId` is returned in the API response for bank creation `POST /bank-catalog`
          or can be taken from the API `GET /bank-catalog`.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Bank catalog management
      summary: Change bank details by provided Bank ID
      description: "Use this API to change bank details by provided Bank ID. `BankId`\
        \ is returned in the API response for bank creation `POST /bank-catalog` \n\
        or can be taken from the API `GET /bank-catalog`.\n<br>API can be called only\
        \ by the authorised user with the appropriate permissions. Permission to call\
        \ this API: `BANK_CATALOG_MANAGER`.\n"
      operationId: updateBank
      parameters:
      - name: bankId
        in: path
        description: |
          Internal Bank identifier. `BankId` is returned in the API response for bank creation `POST /bank-catalog`
          or can be taken from the API `GET /bank-catalog`.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update Bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-top-ups/calculate:
    post:
      tags:
      - Top up via bank
      summary: Calculate commission for top up via bank
      description: This can only be done by the logged in user
      operationId: calculateTopUpViaBankCommission
      requestBody:
        description: Request to calculate top up via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateBankTopUpCommissionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-top-ups/create-request:
    post:
      tags:
      - Top up via bank
      summary: Create a request to top up via bank
      description: This can only be done by the logged in user
      operationId: createRequestToTopUpViaBank
      requestBody:
        description: Response to create request to top up via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestToTopUpViaBankReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-top-ups/view:
    post:
      tags:
      - Top up via bank
      summary: View top up via bank requests
      description: This can only be done by the logged in user
      operationId: viewTopUpViaBankRequests
      requestBody:
        description: Request to get top up via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewBankTopUpReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-top-ups:
    post:
      tags:
      - Top up via bank
      summary: Perform top up via bank
      description: This can only be done by the logged in user
      operationId: executeTopUpViaBank
      requestBody:
        description: Request to top up via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpViaBankReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-top-ups/{requestIdentifier}/accept:
    post:
      tags:
      - Top up via bank
      summary: Accept the create request to top up via bank
      description: This can only be done by the logged in user
      operationId: acceptRequestToTopUpViaBank
      parameters:
      - name: requestIdentifier
        in: path
        description: The create request identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-top-ups/{requestIdentifier}/decline:
    post:
      tags:
      - Top up via bank
      summary: Decline the create request to top up via bank
      description: This can only be done by the logged in user
      operationId: declineRequestToTopUpViaBank
      parameters:
      - name: requestIdentifier
        in: path
        description: The create request identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/calculate:
    post:
      tags:
      - Withdrawal via bank
      summary: Calculate commission for withdrawal via bank
      description: This can only be done by the logged in user
      operationId: calculateCommissionToWithdrawViaBank
      requestBody:
        description: Request to calculate withdrawal via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateBankWithdrawalCommissionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals:
    post:
      tags:
      - Withdrawal via bank
      summary: Perform withdrawal via bank
      description: This can only be done by the logged in user
      operationId: withdrawViaBank
      requestBody:
        description: Request to withdraw funds via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawViaBankReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/view:
    post:
      tags:
      - Withdrawal via bank
      summary: View requests to withdraw via bank
      description: This can only be done by the logged in user
      operationId: viewRequestsToWithdrawViaBank
      requestBody:
        description: Request to get withdrawal via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewBankRedeemReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/create-request:
    post:
      tags:
      - Withdrawal via bank
      summary: Create a request to withdraw via bank
      description: This can only be done by the logged in user
      operationId: createRequestToWithdrawViaBank
      requestBody:
        description: Request to withdraw funds via bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestToWithdrawViaBankReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/{requestIdentifier}/accept:
    post:
      tags:
      - Withdrawal via bank
      summary: Accept request to withdraw via bank
      description: This can only be done by the logged in user
      operationId: acceptRequestToWithdrawViaBank
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/{requestIdentifier}/decline:
    post:
      tags:
      - Withdrawal via bank
      summary: Decline request to withdraw via bank
      description: This can only be done by the logged in user
      operationId: declineRequestToWithdrawViaBank
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/{requestIdentifier}/lift-limit:
    post:
      tags:
      - Withdrawal via bank
      summary: Lift limit for request to withdraw via bank
      description: This can only be done by the logged in user
      operationId: liftLimitForRequestToWithdrawViaBank
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /bank-withdrawals/{requestIdentifier}/reject:
    post:
      tags:
      - Withdrawal via bank
      summary: Reject limited request to withdraw via bank
      description: This can only be done by the logged in user
      operationId: rejectLimitedRequestToWithdrawViaBank
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessBankResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-top-ups:
    post:
      tags:
      - Top up via cash desk
      summary: Top up via cash desk
      description: Top up via cash desk
      operationId: createRequestToUpViaCashDesk
      requestBody:
        description: Top up via cash desk request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-top-ups/calculate:
    post:
      tags:
      - Top up via cash desk
      summary: Calculate commission to top-up via cash desk
      description: Calculate commission to top-up via cash desk
      operationId: calculateCommissionToTopUpViaCashDesk
      requestBody:
        description: Request to calculate top-up cost
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-withdrawals/details/{requestIdentifier}:
    get:
      tags:
      - Withdraw via cash desk
      summary: View withdrawal request details
      description: View withdrawal request details
      operationId: viewRequestDetailsToWithdrawViaCashDesk
      parameters:
      - name: requestIdentifier
        in: path
        description: Input request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCashDeskWithdrawResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-withdrawals/{cashDeskId}:
    get:
      tags:
      - Withdraw via cash desk
      summary: View withdrawal requests for specified cash desk
      description: View withdrawal requests for specified cash desk
      operationId: viewRequestToWithdrawViaCashDesk
      parameters:
      - name: cashDeskId
        in: path
        description: Cash desk's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCashDeskWithdrawalsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Withdraw via cash desk
      summary: Execute withdrawal via specified cash desk
      description: Execute withdrawal via specified cash desk
      operationId: executeWithdrawalViaCashDesk
      parameters:
      - name: cashDeskId
        in: path
        description: Cash desk's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to execute withdrawal transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-withdrawals/{cashDeskId}/calculate:
    post:
      tags:
      - Withdraw via cash desk
      summary: Calculate commission to withdraw via specified cash desk
      description: Calculate commission to withdraw via specified cash desk
      operationId: calculateCommissionToWithdrawViaCashDesk
      parameters:
      - name: cashDeskId
        in: path
        description: Cash desk's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to calculate withdrawal cost
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-withdrawals/{requestIdentifier}/accept:
    post:
      tags:
      - Withdraw via cash desk
      summary: Accept withdrawal request
      description: Accept withdrawal request
      operationId: acceptRequestToWithdrawViaCashDesk
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-withdrawals/{requestIdentifier}/approve:
    post:
      tags:
      - Withdraw via cash desk
      summary: Approve withdraw request
      description: Approve withdraw request
      operationId: approveRequestToWithdrawViaCashDesk
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desk-withdrawals/{requestIdentifier}/decline:
    post:
      tags:
      - Withdraw via cash desk
      summary: Decline request to withdraw via cash desk
      description: Decline request to withdraw via cash desk
      operationId: declineRequestToWithdrawViaCashDesk
      parameters:
      - name: requestIdentifier
        in: path
        description: Withdrawal request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desks/report-turnover:
    post:
      tags:
      - Cash desk operations
      summary: View cash desk turnover report
      description: View cash desk turnover report
      operationId: cashDeskReportUsingPOST
      requestBody:
        description: Cash desk request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewCashDeskReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCashDeskResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /cash-desks/view:
    post:
      tags:
      - Cash desk operations
      summary: Get cash desks for specified coin
      description: This can only be done by the logged in user
      operationId: getCashDesksUsingPOST
      requestBody:
        description: Request to view cash desks
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewCashDesksReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCashDesksResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins:
    get:
      tags:
      - Coin management
      summary: Get coins owned by current user
      description: This can only be done by the logged in user
      operationId: getCoinsOwnedByCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCoinsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Coin management
      summary: Create coin
      description: This can only be done by the logged in user
      operationId: createCoin
      requestBody:
        description: Request to create a new coin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCoinReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCoinResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/serial:
    post:
      tags:
      - Coin info
      summary: Get coin serial by login and currency code. Only for client Coin type
      description: This can only be done by the logged in user
      operationId: getCoinSerialByUserLogin
      requestBody:
        description: Request to get coin serial by user login. Only for client Coin
          type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoinInfoReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinInfoResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/set-main:
    post:
      tags:
      - Coin management
      summary: Set coin as main
      description: This can only be done by the logged in user
      operationId: setCoinAsMain
      requestBody:
        description: Request to set coin as main
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetMainReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/validate:
    post:
      tags:
      - Validation for coin
      summary: Validate a coin
      description: Method validates a coin serial for existence and returns corresponding
        information
      operationId: validateCoin
      requestBody:
        description: Request to validate a coin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateCoinReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateCoinResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/view:
    post:
      tags:
      - Coin info
      summary: Obtain coins info by login or serial. Only for client Coin type
      description: This can only be done by the logged in user
      operationId: getCoinsInfoByUserLoginOrCoinSerial
      requestBody:
        description: Request to obtain coins info by login or serial. Only for client
          Coin type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewCoinsInfoReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCoinsInfoResp'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstraintViolationsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/{serial}:
    delete:
      tags:
      - Coin management
      summary: Delete coin
      description: This can only be done by the logged in user
      operationId: deleteCoin
      parameters:
      - name: serial
        in: path
        description: Coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Coin management
      summary: Update coin
      description: This can only be done by the logged in user
      operationId: updateCoin
      parameters:
      - name: serial
        in: path
        description: Coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update an existing coin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCoinReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCoinResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/{serial}/credit-limit:
    patch:
      tags:
      - Coin credit limit management
      summary: Change coin credit limit
      description: change coin credit limit
      operationId: changeCoinCreditLimit
      parameters:
      - name: serial
        in: path
        description: Coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to change coin credit limit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCoinCreditLimitReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCoinResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /coins/{serial}/status:
    patch:
      tags:
      - Coin management
      summary: Toggle coin status
      description: This can only be done by the logged in user
      operationId: toggleCoinStatus
      parameters:
      - name: serial
        in: path
        description: Coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /collects:
    post:
      tags:
      - Cash desk - cash management
      summary: Cash collect request
      description: Cash collect request
      operationId: createCashDeskCollect
      requestBody:
        description: Collect request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /collects/{requestIdentifier}:
    get:
      tags:
      - Cash desk - cash management
      summary: View transaction details
      description: View transaction details
      operationId: viewCashDeskCollect
      parameters:
      - name: requestIdentifier
        in: path
        description: Collect request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCollectResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /collects/{requestIdentifier}/accept:
    post:
      tags:
      - Cash desk - cash management
      summary: Accept collect request
      description: Accept collect request
      operationId: acceptCashDeskCollect
      parameters:
      - name: requestIdentifier
        in: path
        description: Collect request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact:
    get:
      tags:
      - Contact book
      summary: Get contacts of current user
      description: This can only be done by the logged in user
      operationId: getContactsOfCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Contact book
      summary: Create contact
      description: This can only be done by the logged in user
      operationId: createContact
      requestBody:
        description: Request to create contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact/all:
    delete:
      tags:
      - Contact book
      summary: Delete all contacts
      description: This can only be done by the logged in user
      operationId: deleteAllContacts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact/list:
    post:
      tags:
      - Contact book
      summary: Create batch of contacts
      description: This can only be done by the logged in user
      operationId: createBatchOfContacts
      requestBody:
        description: Request to create list contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchContactReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact/unregistered:
    get:
      tags:
      - Contact book
      summary: Get all unregistered contacts on the system for current user
      description: This can only be done by the logged in user
      operationId: getAllUnregisteredContactsOnTheSystemForCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact/unregistered/all:
    get:
      tags:
      - Contact book
      summary: Get all unregistered contacts on the system for all users
      description: This can only be done by the logged in user
      operationId: getAllUnregisteredContactsOnTheSystemForAllUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact/view:
    post:
      tags:
      - Contact book
      summary: View user contacts
      description: This can only be done by the logged in user
      operationId: viewUserContacts
      requestBody:
        description: Request to filter contacts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewContactReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseContactBookItemDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contact-book/contact/{id}:
    delete:
      tags:
      - Contact book
      summary: Delete contact by id
      description: This can only be done by the logged in user
      operationId: deleteContact
      parameters:
      - name: id
        in: path
        description: Contact id which should be deleted
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Contact book
      summary: Update contact
      description: This can only be done by the logged in user
      operationId: updateContact
      parameters:
      - name: id
        in: path
        description: id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contacts/validate:
    post:
      tags:
      - Validation for user contact
      summary: Validate a contact
      description: "Method validates a contact (email, phone) for existence and returns\
        \ corresponding information"
      operationId: validateContact
      requestBody:
        description: Request to validate a contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateContactReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/for-update:
    post:
      tags:
      - Contract management
      summary: Get all available contracts for update
      description: This can only be done by the logged in user
      operationId: getAllAvailableContractsForUpdate
      requestBody:
        description: Request to update a contract person type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAllAvailableContractsForUpdateContractReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAvailableContractsForUpdateContractResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/view:
    post:
      tags:
      - Contract management
      summary: Obtain contracts matching the specified criteria
      description: This can only be done by the logged in user
      operationId: obtainContractsMatchingTheSpecifiedCriteria
      requestBody:
        description: Request to view contracts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewContractsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractPageResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles:
    get:
      tags:
      - Contract management
      summary: View commission profiles of specified contract
      description: This can only be done by the logged in user
      operationId: viewCommissionProfiles
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCommissionProfilesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Contract management
      summary: Create a new commission profile
      description: This can only be done by the logged in user
      operationId: createNewCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create a commission profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommissionProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateCommissionProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/multi-currency:
    post:
      tags:
      - Contract management
      summary: Create a new commission profile for multi-currency operation flow
      description: This can only be done by the logged in user
      operationId: createNewCommissionProfileForMultiCurrencyFlow
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create a commission profile for multi-currency operation
          flow
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommissionProfileMultiCurrencyReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateCommissionProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{commissionProfileId}/limit-profiles/{limitProfileId}:
    get:
      tags:
      - Contract management
      summary: View limit profile
      description: This can only be done by the logged in user
      operationId: viewLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: commissionProfileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: limitProfileId
        in: path
        description: Identifier of the limit profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewLimitProfileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Contract management
      summary: Delete limit profile
      description: This can only be done by the logged in user
      operationId: deleteLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: commissionProfileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: limitProfileId
        in: path
        description: Identifier of the limit profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Contract management
      summary: Update an existing limit profile
      description: This can only be done by the logged in user
      operationId: updateLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: commissionProfileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: limitProfileId
        in: path
        description: Identifier of the limit profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update a limit profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLimitProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewLimitProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/view:
    post:
      tags:
      - Contract management
      summary: "View commission profiles for specified contract, issuer, flow"
      description: This can only be done by the logged in user
      operationId: viewCommissionProfilesBy
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update a limit profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewCommissionProfilesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCommissionProfilesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{profileId}:
    get:
      tags:
      - Contract management
      summary: View commission profile
      description: This can only be done by the logged in user
      operationId: viewCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateCommissionProfileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Contract management
      summary: Update an existing commission profile
      description: This can only be done by the logged in user
      operationId: updateExistingCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update an existing commission profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommissionProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateCommissionProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{commissionProfileId}/limit-profiles:
    get:
      tags:
      - Contract management
      summary: Obtain limit profiles for specified commission profile
      description: This can only be done by the logged in user
      operationId: obtainLimitProfilesForSpecifiedCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: commissionProfileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewLimitProfilesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Contract management
      summary: Create a new limit profile
      description: This can only be done by the logged in user
      operationId: createNewLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: commissionProfileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create a new limit profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLimitProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewLimitProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{profileId}/commission-rule:
    post:
      tags:
      - Internal commission rule management
      summary: Create internal commission rule
      description: This can only be done by the logged in user
      operationId: createInternalCommissionRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up an internal commission rule
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInternalCommissionRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInternalCommissionRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{profileId}/commission-rule/view:
    post:
      tags:
      - Internal commission rule management
      summary: View internal commission rules
      description: This can only be done by the logged in user
      operationId: viewInternalCommissionRules
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to view internal commission rules
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewInternalCommissionRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInternalCommissionRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{profileId}/commission-rule/{ruleId}:
    get:
      tags:
      - Internal commission rule management
      summary: Get internal commission rule
      description: This can only be done by the logged in user
      operationId: getInternalCommissionRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the internal commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInternalCommissionRuleResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Internal commission rule management
      summary: Delete internal commission rule
      description: This can only be done by the logged in user
      operationId: deleteInternalCommissionRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the internal commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Internal commission rule management
      summary: Update internal commission rule
      description: This can only be done by the logged in user
      operationId: updateInternalCommissionRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the internal commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update an internal commission rule
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInternalCommissionRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInternalCommissionRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{profileId}/commission-rule/{ruleId}/condition:
    post:
      tags:
      - Internal commission rule management
      summary: Set up an internal commission rule condition
      description: This can only be done by the logged in user
      operationId: setUpInternalCommissionRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the internal commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up an internal commission rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInternalCommissionRuleConditionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInternalCommissionRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/commission-profiles/{profileId}/commission-rule/{ruleId}/condition/{conditionId}:
    put:
      tags:
      - Internal commission rule management
      summary: Update an internal commission rule condition
      description: This can only be done by the logged in user
      operationId: updateInternalCommissionRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the internal commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: conditionId
        in: path
        description: Identifier of the internal commission rule condition
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up an internal commission rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInternalCommissionRuleConditionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInternalCommissionRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Internal commission rule management
      summary: Delete an internal commission rule condition
      description: This can only be done by the logged in user
      operationId: deleteInternalCommissionRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the internal commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: conditionId
        in: path
        description: Identifier of the internal commission rule condition
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/copy:
    post:
      tags:
      - Contract management
      summary: Create a new contract using all commission profiles from existing one
      description: This can only be done by the logged in user
      operationId: copyContract
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create a new contract using all commission profiles
          from existing one
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyContractReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewContractResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles:
    get:
      tags:
      - Gate contract management
      summary: View gate commission profiles for specified contract
      description: This can only be done by the logged in user
      operationId: viewGateCommissionProfilesForSpecifiedContract
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateProfilesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Gate contract management
      summary: Create gate commission profile
      description: This can only be done by the logged in user
      operationId: createGateCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create a gate commission profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}:
    get:
      tags:
      - Gate contract management
      summary: View gate commission profile
      description: This can only be done by the logged in user
      operationId: viewGateCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateProfileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-product-rule:
    post:
      tags:
      - Gate commission product rule management
      summary: Create gate commission product rule
      description: This can only be done by the logged in user
      operationId: createGateCommissionProductRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission product rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateCommissionProductRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProductRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-product-rule/view:
    post:
      tags:
      - Gate commission product rule management
      summary: View gate commission product rules
      description: This can only be done by the logged in user
      operationId: viewGateCommissionProductRules
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to view gate product commission rules
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewGateCommissionProductRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProductRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-product-rule/{ruleId}:
    get:
      tags:
      - Gate commission product rule management
      summary: Get gate commission product rule
      description: This can only be done by the logged in user
      operationId: getGateCommissionProductRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission product rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProductRuleResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Gate commission product rule management
      summary: Delete gate commission product rule
      description: This can only be done by the logged in user
      operationId: deleteGateCommissionProductRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission product rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Gate commission product rule management
      summary: Update gate commission product rule
      description: This can only be done by the logged in user
      operationId: updateGateCommissionProductRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission product rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission product rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGateCommissionProductRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProductRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-product-rule/{ruleId}/condition:
    post:
      tags:
      - Gate commission product rule management
      summary: Set up a commission product rule condition
      description: This can only be done by the logged in user
      operationId: setUpCommissionProductRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission product rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateCommissionProductRuleConditionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProductRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-product-rule/{ruleId}/condition/{conditionId}:
    put:
      tags:
      - Gate commission product rule management
      summary: Update a commission product rule condition
      description: This can only be done by the logged in user
      operationId: updateCommissionProductRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: conditionId
        in: path
        description: Identifier of the gate commission product rule condition
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission product rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateCommissionProductRuleConditionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProductRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Gate commission product rule management
      summary: Delete gate commission product rule condition
      description: This can only be done by the logged in user
      operationId: deleteGateCommissionProductRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission product rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: conditionId
        in: path
        description: Identifier of the gate commission product rule condition
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-provider-rule:
    post:
      tags:
      - Gate commission provider rule management
      summary: Create gate commission provider rule
      description: This can only be done by the logged in user
      operationId: createGateCommissionProviderRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission provider rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateCommissionProviderRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProviderRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-provider-rule/view:
    post:
      tags:
      - Gate commission provider rule management
      summary: View gate commission provider rule
      description: This can only be done by the logged in user
      operationId: viewGateCommissionProviderRules
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to view gate provider commission rules
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewGateCommissionProviderRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProviderRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-provider-rule/{ruleId}:
    get:
      tags:
      - Gate commission provider rule management
      summary: Get gate commission provider rule
      description: This can only be done by the logged in user
      operationId: getGateCommissionProviderRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission provider rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProviderRuleResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Gate commission provider rule management
      summary: Delete gate commission provider rule
      description: This can only be done by the logged in user
      operationId: deleteGateCommissionProviderRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission provider rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Gate commission provider rule management
      summary: Update gate commission provider rule
      description: This can only be done by the logged in user
      operationId: updateGateCommissionProviderRule
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission provider rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission provider rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGateCommissionProviderRuleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProviderRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-provider-rule/{ruleId}/condition:
    post:
      tags:
      - Gate commission provider rule management
      summary: Set up a commission provider rule condition
      description: This can only be done by the logged in user
      operationId: createGateCommissionProviderRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission provider rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateCommissionProviderRuleConditionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProviderRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-provider-rule/{ruleId}/condition/{conditionId}:
    put:
      tags:
      - Gate commission provider rule management
      summary: Update a commission provider rule condition
      description: This can only be done by the logged in user
      operationId: updateGateCommissionProviderRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: conditionId
        in: path
        description: Identifier of the gate commission provider rule condition
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission provider rule condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateCommissionProviderRuleConditionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateCommissionProviderRuleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Gate commission provider rule management
      summary: Delete gate commission provider rule condition
      description: This can only be done by the logged in user
      operationId: deleteGateCommissionProviderRuleCondition
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: ruleId
        in: path
        description: Identifier of the gate commission provider rule
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: conditionId
        in: path
        description: Identifier of the gate commission provider rule condition
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-settings-records:
    get:
      tags:
      - Gate contract management
      summary: View commission settings of gate commission profile
      description: This can only be done by the logged in user
      operationId: viewGateCommissionSettingsOfGateCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCommissionSettingsRecordsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/commission-settings-records/set-up-commission-settings:
    post:
      tags:
      - Gate contract management
      summary: Set up commission settings
      description: This can only be done by the logged in user
      operationId: setUpCommissionSettings
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a commission settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommissionSettingsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCommissionSettingsRecordsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/exchange-settings-records:
    get:
      tags:
      - Gate contract management
      summary: View exchange settings of gate commission profile
      description: This can only be done by the logged in user
      operationId: viewExchangeSettingsOfGateCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewExchangeSettingsRecordsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Gate contract management
      summary: Create new exchange settings record
      description: This can only be done by the logged in user
      operationId: createNewExchangeSettingsRecord
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create an exchange settings record
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExchangeSettingsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewExchangeSettingsRecordResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{gateCommissionProfileId}/limit-profiles:
    get:
      tags:
      - Gate contract management
      summary: Obtain gate limit profiles for specified gate commission profile
      description: This can only be done by the logged in user
      operationId: viewGateLimitProfilesForSpecifiedGateCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: gateCommissionProfileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateLimitProfilesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Gate contract management
      summary: Create new gate limit profile
      description: This can only be done by the logged in user
      operationId: createNewGateLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: gateCommissionProfileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to create a new limit profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGateLimitProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateLimitProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{gateCommissionProfileId}/limit-profiles/{limitProfileId}:
    get:
      tags:
      - Gate contract management
      summary: View gate limit profile
      description: This can only be done by the logged in user
      operationId: viewGateLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: gateCommissionProfileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: limitProfileId
        in: path
        description: Identifier of the limit profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateLimitProfileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Gate contract management
      summary: Update existing gate limit profile
      description: This can only be done by the logged in user
      operationId: updateExistingGateLimitProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: gateCommissionProfileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: limitProfileId
        in: path
        description: Identifier of the limit profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update a limit profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGateLimitProfileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateLimitProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /contracts/{contractId}/gate-commission-profiles/{profileId}/product-commission-settings-records:
    get:
      tags:
      - Gate contract management
      summary: View product commission settings of gate commission profile
      description: This can only be done by the logged in user
      operationId: viewProductCommissionSettingsOfGateCommissionProfile
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProductCommissionSettingsRecordsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  ? /contracts/{contractId}/gate-commission-profiles/{profileId}/product-commission-settings-records/set-up-product-commission-settings
  : post:
      tags:
      - Gate contract management
      summary: Set up product commission settings
      description: This can only be done by the logged in user
      operationId: setUpProductCommissionSettings
      parameters:
      - name: contractId
        in: path
        description: Identifier of the contract
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: profileId
        in: path
        description: Identifier of the gate commission profile
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up a product commission settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductCommissionSettingsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProductCommissionSettingsRecordsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/create-system-broadcasts:
    post:
      tags:
      - In-system communication
      summary: Create system broadcasts
      description: This can only be done by the logged in user
      operationId: createSystemBroadcasts
      requestBody:
        description: Request to create system broadcast conversations
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSystemBroadcastsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSystemBroadcastsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/view:
    post:
      tags:
      - In-system communication
      summary: Retrieve list of conversations by specified filter
      description: This can only be done by the logged in user
      operationId: viewConversationsBySpecifiedFilter
      requestBody:
        description: Request to filter available conversations
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewConversationsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/{conversationId}:
    delete:
      tags:
      - In-system communication
      summary: Delete conversation
      description: This can only be done by the logged in user
      operationId: deleteConversation
      parameters:
      - name: conversationId
        in: path
        description: Conversation's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/{conversationId}/messages:
    post:
      tags:
      - In-system communication
      summary: Write a message as participant of the specified conversation
      description: This can only be done by the logged in user
      operationId: writeMessageAsParticipantOfSpecifiedConversation
      parameters:
      - name: conversationId
        in: path
        description: Conversation's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to write a message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateMessageResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/{conversationId}/messages/view:
    post:
      tags:
      - In-system communication
      summary: Retrieve list of messages for specified conversation
      description: This can only be done by the logged in user
      operationId: viewMessagesByConversationIdAndBySpecifiedFilter
      parameters:
      - name: conversationId
        in: path
        description: Conversation's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to filter available messages
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewMessagesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/{conversationId}/messages/{messageId}/mark-as-read:
    post:
      tags:
      - In-system communication
      summary: Mark message as read
      description: This can only be done by the logged in user
      operationId: markMessageAsRead
      parameters:
      - name: conversationId
        in: path
        description: Conversation's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: messageId
        in: path
        description: Message identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateMessageResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /conversations/{conversationId}/messages/{messageId}/media-files:
    get:
      tags:
      - In-system communication
      summary: Get files attached to the specified message
      description: This can only be done by the logged in user
      operationId: getFilesAttachedToSpecifiedMessage
      parameters:
      - name: conversationId
        in: path
        description: Conversation's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: messageId
        in: path
        description: Message identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFilesDto'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /country:
    get:
      tags:
      - Country information
      summary: Get countries information
      description: Get countries information
      operationId: getCountriesInformationUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCountryResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /currencies:
    get:
      tags:
      - Currency management
      summary: Get list of currencies
      description: "Use this API to get the list of currencies created in the system.\
        \ \n<br>You can use this API as well if you need currency `code` to pass it\
        \ in the API for Issuer creation.\n<br>API can be called only by the authorised\
        \ user with the appropriate permissions. Permission to call this API: `CURRENCY_VIEWER`\n"
      operationId: viewAllCurrencies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCurrenciesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Currency management
      summary: Create a new currency
      description: "Use this API to create new Currency in the system. \nIn the response\
        \ you will receive created currency details. Use `code` from this API request\
        \ or response to create an Issuer for the Currency. \n<br>API can be called\
        \ only by the authorised user with the appropriate permissions. Permission\
        \ to call this API: `CURRENCY_MANAGER`.\n<br>To be able to use created Currency\
        \ you need to create an Issuer for this currency using API `POST /issuers`.\n"
      operationId: Create_currency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCurrencyReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /user-notification:
    post:
      tags:
      - User notifications
      summary: Send notification to the verified user contact by provided user ID
      description: "Use this API to send notification to the user by provided `userId`.\
        \ Pass `userId` in the `id` parameter in the request. \n<br>It can be taken\
        \ from the API `POST /users/view` response from the `id` field.\n<br>Notification\
        \ will be sent to the verified user contact, email and/or phone. \nIf both\
        \ contacts are verified notification will be sent to both. \n<br>API can be\
        \ called only by the authorised user with the appropriate permissions. \n\
        Permission to call this API: `EMAIL_NOTIFICATION`.\n"
      operationId: sendEmailNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailNotificationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /environment-variables:
    get:
      tags:
      - Environment variable tech management. For developers only
      summary: View all environment variables
      description: This can only be done by the logged in user
      operationId: viewAllEnvironmentVariables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewEnvironmentVariablesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    put:
      tags:
      - Environment variable tech management. For developers only
      summary: Create or update environment variable
      description: The request can be only done by the logged in user
      operationId: createOrUpdateEnvironmentVariable
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentVariableCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /environment-variables/{environmentVariableKey}:
    get:
      tags:
      - Environment variable tech management. For developers only
      summary: View environment variable by key
      description: The request can be only done by the logged in user
      operationId: view_environment_variable_by_key
      parameters:
      - name: environmentVariableKey
        in: path
        description: environmentVariableKey
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewEnvironmentVariableResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /exchange-rates/rate:
    post:
      tags:
      - Exchange
      summary: Set currency exchange rate
      description: This can only be done by the logged in user
      operationId: setCurrencyExchangeRate
      requestBody:
        description: Request to update rate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetExchangeRateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetExchangeRateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /exchange-rates/rate/{rateId}:
    delete:
      tags:
      - Exchange
      summary: Delete currency exchange rate
      description: This can only be done by the logged in user
      operationId: deleteExchangeRate
      parameters:
      - name: rateId
        in: path
        description: Rate id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /exchange-rates/view:
    post:
      tags:
      - Exchange
      summary: View exchange rates
      description: This can only be done by the logged in user
      operationId: viewExchangeRates
      requestBody:
        description: Request to view exchange rates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewExchangeRatesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewRatesResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate-investments:
    post:
      tags:
      - Gate investment operations
      summary: Top up of system provider coin
      description: Top up of system provider coin
      operationId: topUpSystemProviderCoin
      requestBody:
        description: Investment request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestmentReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate-investments/{requestIdentifier}:
    get:
      tags:
      - Gate investment operations
      summary: View cash investment details
      description: View cash investment details
      operationId: viewGateCashInvestmentDetails
      parameters:
      - name: requestIdentifier
        in: path
        description: Investment request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInvestmentResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate-investments/{requestIdentifier}/accept:
    post:
      tags:
      - Gate investment operations
      summary: Accept investment request
      description: Accept investment request
      operationId: acceptGateInvestmentRequest
      parameters:
      - name: requestIdentifier
        in: path
        description: Investment request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate-providers:
    get:
      tags:
      - Gate provider management
      summary: View gate providers
      description: This can only be done by the logged in user
      operationId: viewGateProviders
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewGateProvidersResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate-providers/{gateProviderId}/settings:
    get:
      tags:
      - Gate provider management
      summary: View gate provider settings
      description: This can only be done by the logged in user
      operationId: viewGateProvidersSettings
      parameters:
      - name: gateProviderId
        in: path
        description: Identifier of the gate provider
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsFieldsRespDto'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Gate provider management
      summary: Update settings of gate provider
      description: This can only be done by the logged in user
      operationId: Update_settings_of_gate_provider
      parameters:
      - name: gateProviderId
        in: path
        description: Identifier of the gate provider
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Filled setting fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsFieldsReqDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsFieldsRespDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/available-products:
    get:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Get list of all available products
      description: This can only be done by the logged in user
      operationId: getAllAvailableProducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProductsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/available-products/{gateGateProviderId}:
    get:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Get all available products for gate provider
      description: This can only be done by the logged in user
      operationId: getAllAvailableProductsForGateProvider
      parameters:
      - name: gateGateProviderId
        in: path
        description: Request to get all products for gate gate provider
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProductsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/cards:
    get:
      tags:
      - Card controller
      summary: Get cards
      description: This can only be done by the logged in user
      operationId: getCards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCardsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/cards/{cardId}:
    delete:
      tags:
      - Card controller
      summary: Delete card from list
      description: This can only be done by the logged in user
      operationId: deleteCard
      parameters:
      - name: cardId
        in: path
        description: Payment card identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/methods/view:
    post:
      tags:
      - Gate - interaction with external payment systems
      summary: Retrieve list of payment providers for transaction with specified parameters
      description: This can only be done by the logged in user.
      operationId: getPaymentMethods
      requestBody:
        description: Request to view gate methods for specified coin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/product/{id}:
    delete:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Delete product
      description: This can only be done by the logged in user
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        description: Id of product which should be deleted
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/product/{id}/payer-fields:
    get:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Get payer fields for specific product
      description: This can only be done by the logged in user
      operationId: getPayerFieldsForSpecificProduct
      parameters:
      - name: id
        in: path
        description: Identifier of the product
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldsOptionsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/products/view:
    post:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Get filtered available products for purchase
      description: This can only be done by the logged in user
      operationId: getFilteredAvailableProductsForPurchase
      requestBody:
        description: Request to filter products available for purchase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterProductsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterProductsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/products/visibility/batch-update:
    patch:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Update product visibility status
      description: This can only be done by the logged in user
      operationId: updateProductVisibilityStatus
      requestBody:
        description: Request to update product visibility status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedProductsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedProductsVisibilityStatusesResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/products/visibility/disable:
    patch:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Turn off the all products visibility
      description: This can only be done by the logged in user
      operationId: turnOffAllProductsVisibility
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/products/visibility/enable:
    patch:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Turn on the all products visibility
      description: This can only be done by the logged in user
      operationId: turnOnAllProductsVisibility
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/products/{gateProviderId}:
    get:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Get all products for gate provider
      description: This can only be done by the logged in user
      operationId: getAllProductsForGateProvider
      parameters:
      - name: gateProviderId
        in: path
        description: Request to get all products for gate provider
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProductsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Delete all products of gate provider
      description: This can only be done by the logged in user
      operationId: deleteAllProductsOfGateProvider
      parameters:
      - name: gateProviderId
        in: path
        description: Id of gate provider which products should be deleted
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/purchases:
    post:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Create purchase for selected product
      description: This can only be done by the logged in user
      operationId: createPurchaseForSelectedProduct
      requestBody:
        description: Request to create gate purchase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePurchaseReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxDtoResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/purchases/calculate:
    post:
      tags:
      - Gate purchases - pay for external services with your wallet
      summary: Calculate gate purchase commission amount
      description: This can only be done by the logged in user
      operationId: calculateGatePurchaseCommission
      requestBody:
        description: Request to calculate gate purchase commission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateCommissionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxCommissionDtoResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions:
    post:
      tags:
      - Gate - interaction with external payment systems
      summary: Create a gate transaction
      description: This can only be done by the logged in user.
      operationId: createTx
      requestBody:
        description: Request to create a new gate transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTxReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxDtoResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions/calculate:
    post:
      tags:
      - Gate - interaction with external payment systems
      summary: Calculate commission for execution of gate transaction with specified
        parameters
      description: This can only be done by the logged in user.
      operationId: calculateGateTransactionCommission
      requestBody:
        description: Request to calculate commission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateCommissionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxCommissionDtoResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions/payment-points:
    post:
      tags:
      - Gate - interaction with external payment systems
      summary: Retrieve list of payment points
      description: This can only be done by the logged in user.
      operationId: getPaymentPoints
      requestBody:
        description: Request to get payment points
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPointsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPointsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions/view:
    post:
      tags:
      - Gate - interaction with external payment systems
      summary: Filtered view of gate transactions
      description: This can only be done by the logged in user.
      operationId: viewTxs
      requestBody:
        description: Filtering request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewTxsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseTxDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions/{tx}:
    get:
      tags:
      - Gate - interaction with external payment systems
      summary: Get gate transaction state
      description: This can only be done by the logged in user.
      operationId: getTx
      parameters:
      - name: tx
        in: path
        description: Id of gate transaction
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxDtoResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions/{tx}/payer-fields:
    get:
      tags:
      - Gate - interaction with external payment systems
      summary: Retrieve list of payer fields request by payment provider
      description: This can only be done by the logged in user.
      operationId: getListOfPayerFields
      parameters:
      - name: tx
        in: path
        description: Id of gate transaction
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldsOptionsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /gate/transactions/{tx}/submit:
    post:
      tags:
      - Gate - interaction with external payment systems
      summary: Submit payer data and send gate transaction to payment provider
      description: This can only be done by the logged in user.
      operationId: submitTxUsingPOST
      parameters:
      - name: tx
        in: path
        description: Id of gate transaction
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Payer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTxResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /health:
    get:
      tags:
      - System health check
      summary: Check if server is up and running
      description: Check if server is up and running
      operationId: checkHealthStatus
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /inputs:
    post:
      tags:
      - Cash desk - cash management
      summary: Input collected cash to cash desk
      description: Input collected cash to cash desk
      operationId: createCashDeskInputRequest
      requestBody:
        description: Input to cash desk request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /inputs/{requestIdentifier}:
    get:
      tags:
      - Cash desk - cash management
      summary: View cash desk input request details
      description: View cash desk input request details
      operationId: viewCashDeskInputRequests
      parameters:
      - name: requestIdentifier
        in: path
        description: Input request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCashDeskInputResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /inputs/{requestIdentifier}/accept:
    post:
      tags:
      - Cash desk - cash management
      summary: Accept input cash desk request
      description: Accept input cash desk request
      operationId: acceptCashDeskInputRequest
      parameters:
      - name: requestIdentifier
        in: path
        description: Input request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /investments:
    post:
      tags:
      - Cash desk - cash management
      summary: Top up of authorized capital via cash desk
      description: This can only be done by the logged in user
      operationId: topUpAuthorizedCapitalViaCashDesk
      requestBody:
        description: Investment request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestmentReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /investments/{requestIdentifier}:
    get:
      tags:
      - Cash desk - cash management
      summary: View cash desk investment details
      description: This can only be done by the logged in user
      operationId: viewCashDeskInvestmentDetails
      parameters:
      - name: requestIdentifier
        in: path
        description: Investment request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewInvestmentResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /investments/{requestIdentifier}/accept:
    post:
      tags:
      - Cash desk - cash management
      summary: Accept cash desk investment request
      description: This can only be done by the logged in user
      operationId: acceptCashDeskInvestmentRequest
      parameters:
      - name: requestIdentifier
        in: path
        description: Investment request id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoice-templates:
    post:
      tags:
      - Invoice Template
      summary: Create invoice template
      description: This can only be done by the logged in user
      operationId: createInvoiceTemplate
      requestBody:
        description: Request to create invoice template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoice-templates/view:
    post:
      tags:
      - Invoice Template
      summary: View invoice templates
      description: This can only be done by the logged in user
      operationId: viewInvoiceTemplates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTemplatesResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoice-templates/{id}:
    delete:
      tags:
      - Invoice Template
      summary: Delete invoice template
      description: This can only be done by the logged in user
      operationId: deleteInvoiceTemplate
      parameters:
      - name: id
        in: path
        description: Identifier of an invoice template
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Invoice Template
      summary: Update invoice template
      description: This can only be done by the logged in user
      operationId: updateInvoiceTemplate
      parameters:
      - name: id
        in: path
        description: Identifier of invoice template
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update invoice template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoiceTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices:
    post:
      tags:
      - Invoice
      summary: Create an invoice
      description: This can only be done by the logged in merchant
      operationId: createInvoice
      requestBody:
        description: Request to create a new invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices/calculate:
    post:
      tags:
      - Invoice
      summary: Calculate commission for invoice as merchant
      description: This can only be done by the logged in merchant
      operationId: calculateInvoiceCommissionAsMerchant
      requestBody:
        description: Request to create a new invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateMerchantInvoiceCommissionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices/view:
    post:
      tags:
      - Invoice
      summary: View invoices
      description: This can only be done by the logged in individual or merchant
      operationId: viewInvoices
      requestBody:
        description: Request to view invoices
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewInvoicesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices/{identifier}:
    get:
      tags:
      - Invoice
      summary: View invoice details
      description: This can only be done by the logged in individual or merchant
      operationId: viewInvoiceDetails
      parameters:
      - name: identifier
        in: path
        description: Invoice's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Invoice
      summary: Delete invoice
      description: This can only be done by the logged in individual or merchant
      operationId: deleteInvoice
      parameters:
      - name: identifier
        in: path
        description: Invoice identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices/{identifier}/calculate:
    post:
      tags:
      - Invoice
      summary: Calculate commission for specified invoice as payer
      description: This can only be done by the logged in individual or merchant
      operationId: calculateInvoiceCommissionAsPayer
      parameters:
      - name: identifier
        in: path
        description: Invoice's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to calculate invoice transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatePayerInvoiceCommissionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices/{identifier}/files/{fileId}:
    get:
      tags:
      - Invoice
      summary: Get file attached to the invoice
      description: This can only be done by the logged in individual or merchant
      operationId: getFileAttachedToInvoice
      parameters:
      - name: identifier
        in: path
        description: Invoice's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: fileId
        in: path
        description: File's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /invoices/{identifier}/pay:
    post:
      tags:
      - Invoice
      summary: Pay for the invoice
      description: This can only be done by the logged in individual or merchant
      operationId: payInvoice
      parameters:
      - name: identifier
        in: path
        description: Invoice's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to make payment for invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoicePayRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /issuers:
    get:
      tags:
      - Issuers management
      summary: Get the list of Issuers created in the system
      description: |
        Use this API to get the list of Issuers created in the system. In the response you will receive Issuer ID along with all Issuer details.
        <br>Pass `id` from the response to the APIs where Issuer ID is required.
        <br>API can be called only by the authorised user with the appropriate permissions. Permission to call this API: `ISSUER_VIEWER`.
      operationId: viewIssuers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewIssuersResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Issuers management
      summary: Create a new issuer
      description: "Use this API to create a new Issuer for already created Currency.\
        \ Pass currency alphabetic code to the `currencyCode`. \n<br>You can get currency\
        \ alphabetic cote from the `code` field in the API `GET /currencies` response.\n\
        <br>In the response you will receive created Issuer `id` along with all Issuer\
        \ details. Pass it to the APIs where Issuer ID is required.\n<br>API can be\
        \ called only by the authorised user with the appropriate permissions. Permission\
        \ to call this API: `ISSUER_MANAGER`.\n"
      operationId: createIssuer
      requestBody:
        description: Request to create an issuer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIssuerReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /issuers/{id}:
    patch:
      tags:
      - Issuers management
      summary: Change Issuer details by provided Issuer ID
      description: "Use this API to change Issuer details for the defined Issuer.\
        \ You can get issuer `id` from the API `GET /issuers` response.\n<br><br>Using\
        \ this API you can change the following information: \n<li>Issuer name\n<li>Issuer\
        \ description\n<li>Issuer status - activate/deactivate Issuer. If issuer is\
        \ inactive any operations with accounts in the issued currency are not allowed.\n\
        <br><br>API can be called only by the authorised user with the appropriate\
        \ permissions. Permission to call this API: `ISSUER_MANAGER`.\n"
      operationId: updateIssuer
      parameters:
      - name: id
        in: path
        description: Identifier of the issuer
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update the issuer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIssuerReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /management/business-processes/batch-update:
    post:
      tags:
      - Business processes management
      summary: Update business process history of business process with actual data
      description: This can only be done by the logged in user
      operationId: updateBusinessProcessHistoryWithActualData
      requestBody:
        description: Request to update business process history
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBusinessProcessHistoryRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /management/filter-templates:
    get:
      tags:
      - Filter templates management provider
      summary: View filter templates
      description: This can only be done by the logged in user
      operationId: viewFilterTemplates
      parameters:
      - name: urlPath
        in: query
        description: The url path without domain which filter templates will be shown
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFilterTemplatesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Filter templates management provider
      summary: Create filter template
      description: This can only be done by the logged in user
      operationId: createFilterTemplate
      requestBody:
        description: Create filter template request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFilterTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFilterTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /management/filter-templates/{filterTemplateId}:
    put:
      tags:
      - Filter templates management provider
      summary: Update filter template
      description: This can only be done by the logged in user
      operationId: updateFilterTemplate
      parameters:
      - name: filterTemplateId
        in: path
        description: The filter template identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Update filter template request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseFilterTemplateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFilterTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Filter templates management provider
      summary: Delete filter template
      description: This can only be done by the logged in user
      operationId: deleteFilterTemplate
      parameters:
      - name: filterTemplateId
        in: path
        description: The filter template identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /management/organization-settings:
    get:
      tags:
      - Organization settings management
      summary: View organization settings
      description: The request can be only done by the logged in user
      operationId: viewOrganizationSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettingsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /management/organization-settings/{organizationTypeCode}/roles/{roleName}:
    put:
      tags:
      - Organization settings management
      summary: Update role permissions
      description: The request can be only done by the logged in user
      operationId: updateRolePermissions
      parameters:
      - name: organizationTypeCode
        in: path
        description: Code of organization type
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: roleName
        in: path
        description: Code of individual
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request with new permissions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionsUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettingsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /media-files:
    post:
      tags:
      - Media files management
      summary: Upload a file
      description: This can only be done by the logged in user
      operationId: uploadMediaFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileMultipartFormDataRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /media-files/resources:
    post:
      tags:
      - Media files management
      summary: Upload a file
      description: This can only be done by the logged in user. Save permanent media
        file that can be accessed by name by anonymous user
      operationId: uploadResourceMediaFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileMultipartFormDataRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /media-files/view:
    post:
      tags:
      - Media files management
      summary: Get media files by specified filter
      description: This can only be done by the logged in user
      operationId: getFilteredMediaFiles
      requestBody:
        description: Request to view media files
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewMediaFilesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMediaFilesResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /media-files/{fileId}/{token}:
    get:
      tags:
      - Media files management
      summary: Download a file by Id
      description: This can only be done by the logged in user
      operationId: downloadMediaFile
      parameters:
      - name: fileId
        in: path
        description: File identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: token
        in: path
        description: Token
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/StringBinaryData'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /media-files/resources/{fileName}:
    get:
      tags:
      - Media files management
      summary: Download a file by name
      description: This can be done anonymous user. Download resource by resource
        name.
      operationId: downloadResourceMediaFile
      parameters:
      - name: fileName
        in: path
        description: File identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/StringBinaryData'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /media-files/{id}:
    delete:
      tags:
      - Media files management
      summary: Delete an unused file
      description: This can only be done by the logged in user
      operationId: deleteMediaFile
      parameters:
      - name: id
        in: path
        description: File identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Media files management
      summary: Update a file
      description: This can only be done by the logged in user
      operationId: updateMediaFile
      parameters:
      - name: id
        in: path
        description: File identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewFileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /members:
    post:
      tags:
      - Organization membership management
      summary: Create an organization member
      description: This can only be done by the logged in user
      operationId: createOrganizationMember
      requestBody:
        description: Request to create an organization member
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMemberResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /members/{id}:
    delete:
      tags:
      - Organization membership management
      summary: Delete organization member
      description: This can only be done by the logged in user
      operationId: deleteOrganizationMember
      parameters:
      - name: id
        in: path
        description: Member's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Organization membership management
      summary: Update organization member
      description: This can only be done by the logged in user
      operationId: updateOrganizationMember
      parameters:
      - name: id
        in: path
        description: Member's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update an organization member
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMemberResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-measure-units:
    get:
      tags:
      - Merchant product measure units
      summary: Get list of all measure units for merchant
      description: This can only be done by the logged in user
      operationId: getAllMeasureUnitsForMerchant
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureUnitsViewResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Merchant product measure units
      summary: Create measure unit
      description: This can only be done by the logged in user
      operationId: createMeasureUnit
      requestBody:
        description: Request to create a measure unit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasureUnitCreateReqDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureUnitViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-measure-units/batch-create:
    post:
      tags:
      - Merchant product measure units
      summary: Create measure unit from batch
      description: This can only be done by the logged in user
      operationId: createMeasureUnitFromBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasureUnitCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureUnitsViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-measure-units/delete-by-external-code:
    post:
      tags:
      - Merchant product measure units
      summary: Delete measure unit by external code
      description: This can only be done by the logged in user
      operationId: deleteMeasureUnitByExternalCode
      requestBody:
        description: Delete request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasureUnitExtCodeDeleteReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-measure-units/update-by-external-code:
    post:
      tags:
      - Merchant product measure units
      summary: Update measure unit data by external code
      description: This can only be done by the logged in user
      operationId: updateMeasureUnitDataByExternalCode
      requestBody:
        description: Update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasureUnitUpdateExtCodeReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureUnitViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-measure-units/{id}:
    delete:
      tags:
      - Merchant product measure units
      summary: Delete measure unit by Id
      description: This can only be done by the logged in user
      operationId: deleteMeasureUnitById
      parameters:
      - name: id
        in: path
        description: Measure unit ID
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Merchant product measure units
      summary: Update measure unit data by Id
      description: This can only be done by the logged in user
      operationId: updateMeasureUnitDataById
      parameters:
      - name: id
        in: path
        description: Measure unit code
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Update measure unit data by Id request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasureUnitUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureUnitViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments:
    post:
      tags:
      - Merchant Payment
      summary: Create a payment
      description: This can only be done by the logged in merchant
      operationId: createMerchantPayment
      requestBody:
        description: Request to create a new payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdatePaymentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments/view:
    post:
      tags:
      - Merchant Payment
      summary: Get payments
      description: This can only be done by the logged in merchant
      operationId: viewMerchantPayments
      requestBody:
        description: Request to view merchant's payments
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewPaymentsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments/{identifier}:
    delete:
      tags:
      - Merchant Payment
      summary: Delete a pending payment
      description: This can only be done by the logged in merchant
      operationId: deletePendingMerchantPayment
      parameters:
      - name: identifier
        in: path
        description: Payment identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments/{identifier}/calculate:
    post:
      tags:
      - Merchant Payment
      summary: Calculate commission fee
      description: This can only be done by the logged in merchant
      operationId: calculateCommissionFeeForMerchantPayment
      parameters:
      - name: identifier
        in: path
        description: Payment identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments/{identifier}/execute:
    post:
      tags:
      - Merchant Payment
      summary: Pay for payment
      description: This can only be done by the logged in merchant
      operationId: executeMerchantPayment
      parameters:
      - name: identifier
        in: path
        description: Payment identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      requestBody:
        description: Request to pay for payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutePaymentReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdatePaymentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments/{identifier}/merchant-purchases:
    get:
      tags:
      - Merchant Payment
      summary: Get purchases completed within payment
      description: This can only be done by the logged in payer or merchant
      operationId: getPurchasesCompletedWithinMerchantPayment
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      - name: identifier
        in: path
        description: Payment identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewPurchasesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-payments/{identifier}/resend-otp:
    post:
      tags:
      - Merchant Payment
      summary: Resend one time password
      description: This can only be done by the logged in merchant
      operationId: resendOneTimePasswordForMerchantPayment
      parameters:
      - name: identifier
        in: path
        description: Payment identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-product-categories:
    get:
      tags:
      - Merchant product categories
      summary: View product categories belonging to this merchant
      description: This can be only done by an authorized merchant
      operationId: viewMerchantProductCategories
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMerchantProductCategoriesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Merchant product categories
      summary: Create a product category
      description: This can be only done by an authorized merchant
      operationId: createMerchantProductCategory
      requestBody:
        description: Request to create a category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMerchantProductCategoryReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductCategoryResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-product-categories/{categoryId}:
    delete:
      tags:
      - Merchant product categories
      summary: Delete a product category
      description: This can be only done by an authorized merchant
      operationId: deleteMerchantProductCategory
      parameters:
      - name: categoryId
        in: path
        description: Identifier of the category
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Merchant product categories
      summary: Update a product category
      description: This can be only done by an authorized merchant
      operationId: updateMerchantProductCategory
      parameters:
      - name: categoryId
        in: path
        description: Identifier of the category
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      requestBody:
        description: Request to update a category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMerchantProductCategoryReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductCategoryResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-product-categories/{categoryId}/merchant-products:
    get:
      tags:
      - Merchant product categories
      summary: View products belonging to category
      description: This can only be done by the logged in user
      operationId: viewMerchantProductsByCategory
      parameters:
      - name: categoryId
        in: path
        description: Identifier of the category
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterInteger'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMerchantProductsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-product-categories/{categoryId}/merchant-products/{productId}:
    put:
      tags:
      - Merchant product categories
      summary: Add product into category
      description: This can be only done by an authorized merchant
      operationId: addMerchantProductIntoCategory
      parameters:
      - name: categoryId
        in: path
        description: Identifier of the category
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      - name: productId
        in: path
        description: Identifier of the product
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Merchant product categories
      summary: Remove product from category
      description: This can only be done by the logged in user
      operationId: removeMerchantProductFromCategory
      parameters:
      - name: categoryId
        in: path
        description: Identifier of the category
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      - name: productId
        in: path
        description: Identifier of the product
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products:
    post:
      tags:
      - Merchant product
      summary: Create one product
      description: This can be only done by an authorized merchant
      operationId: createMerchantProduct
      requestBody:
        description: Request to create a product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductCreateDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateMerchantProductResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/batch-create:
    post:
      tags:
      - Merchant product
      summary: Create products from batch
      description: This can be only done by an authorized merchant
      operationId: createMerchantProductsFromBatch
      requestBody:
        description: Request to create products
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductsViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/batch-create-prices:
    post:
      tags:
      - Merchant product price
      summary: Create prices from batch
      description: This can be only done by an authorized merchant
      operationId: createMerchantProductPricesFromBatch
      requestBody:
        description: Prices create request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductPricesCreateBatchReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductPricesReadResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/batch-delete:
    post:
      tags:
      - Merchant product
      summary: Delete list of products
      description: This can be only done by an authorized merchant
      operationId: deleteBatchOfMerchantProducts
      requestBody:
        description: Request to delete a list of products
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductDeleteListReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/delete-by-external-code:
    post:
      tags:
      - Merchant product
      summary: Delete by external code
      description: This can be only done by an authorized merchant
      operationId: deleteMerchantProductByExternalCode
      requestBody:
        description: Delete request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductDeleteExtCodeReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/delete-prices:
    post:
      tags:
      - Merchant product price
      summary: Delete a price by product filter
      description: This can be only done by an authorized merchant
      operationId: deleteMerchantProductPrice
      requestBody:
        description: Delete request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductPriceDeleteReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/delete-prices-for-point-of-sale:
    post:
      tags:
      - Merchant product price
      summary: Delete all prices for product and point of sale
      description: This can be only done by an authorized merchant
      operationId: deleteMerchantProductPriceByPOSAndProductId
      requestBody:
        description: Delete request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductPriceDeleteForPosReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/update-by-external-code:
    post:
      tags:
      - Merchant product
      summary: Update product by it's external code
      description: This can be only done by an authorized merchant
      operationId: updateMerchantProductByExternalCode
      requestBody:
        description: Request to update a product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductUpdateExtCodeReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateMerchantProductResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/view:
    post:
      tags:
      - Merchant product
      summary: View product list
      description: This can be only done by an authorized merchant
      operationId: viewMerchantProducts
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      requestBody:
        description: Request to view products
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductViewReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductsViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/view-prices:
    post:
      tags:
      - Merchant product price
      summary: Get prices by product filter
      description: This can be only done by an authorized merchant
      operationId: viewMerchantProductPrices
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      requestBody:
        description: View request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductPriceViewReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductPricesReadResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/{id}:
    get:
      tags:
      - Merchant product
      summary: Get merchant product by it's ID
      description: This can be only done by an authorized merchant
      operationId: getMerchantProductDetails
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      - name: id
        in: path
        description: Product identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductViewResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Merchant product
      summary: Delete merchant product by ID
      description: This can be only done by an authorized merchant
      operationId: deleteMerchantProductById
      parameters:
      - name: id
        in: path
        description: Product internal ID
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Merchant product
      summary: Update product by it's identifier
      description: This can be only done by an authorized merchant
      operationId: updateMerchantProductById
      parameters:
      - name: id
        in: path
        description: Merchant product id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update a product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateMerchantProductResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/{productId}/merchant-product-categories:
    get:
      tags:
      - Merchant product
      summary: View categories specified merchant product belongs to
      description: This can only be done by the logged in user
      operationId: viewCategoriesOfMerchantProduct
      parameters:
      - name: productId
        in: path
        description: Identifier of the product
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterLong'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMerchantProductCategoriesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/{productId}/prices:
    get:
      tags:
      - Merchant product price
      summary: Get prices by product ID
      description: This can be only done by an authorized merchant
      operationId: viewMerchantProductPricesByProductId
      parameters:
      - name: Accept-Language
        in: header
        description: Two-digit language code for localized variables
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en
      - name: productId
        in: path
        description: Identifier of the product
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductPricesReadResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Merchant product price
      summary: Add price for a product with the given ID
      description: This can be only done by an authorized merchant
      operationId: addMerchantProductPrice
      parameters:
      - name: productId
        in: path
        description: Product identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Price create request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantProductPriceCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantProductPriceReadResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /merchant-products/{productId}/prices/{priceId}:
    delete:
      tags:
      - Merchant product price
      summary: Delete a price by it's ID for the given product ID
      description: This can be only done by an authorized merchant
      operationId: deleteMerchantProductPriceByProductId
      parameters:
      - name: priceId
        in: path
        description: Price ID
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: productId
        in: path
        description: Product ID
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /notification/message/keys:
    get:
      tags:
      - Notification message keys
      summary: Get notification message parameter keys
      description: This can only be done by the logged in user.
      operationId: getNotificationMessageParameterKeys
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewNotificationMessageKeyResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /operation-flows:
    get:
      tags:
      - Contract management
      summary: Obtain all available operation flows
      description: This can only be done by the logged in user
      operationId: viewOperationFlows
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewOperationFlowsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /organizations:
    post:
      tags:
      - Organization management
      summary: View organizations
      description: The request can be only done by the logged in user
      operationId: viewOrganizations
      requestBody:
        description: Request to view organizations
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewOrganizationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewOrganizationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /organizations/system/coins:
    get:
      tags:
      - Coin management as supervisor
      summary: View coins for system organization
      description: This can only be done by the logged in user
      operationId: viewSystemOrganizationCoins
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCoinsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /organizations/{id}/coins:
    get:
      tags:
      - Coin management as supervisor
      summary: View coins for organization
      description: This can only be done by the logged in user
      operationId: viewOrganizationCoins
      parameters:
      - name: id
        in: path
        description: Organization id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCoinsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /organizations/{id}/provider-coins:
    get:
      tags:
      - Provider coin management
      summary: View provider coins of organization
      description: This can only be done by the logged in user
      operationId: viewProviderCoinsOfOrganization
      parameters:
      - name: id
        in: path
        description: Organization id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProviderCoinsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /organizations/{organizationId}/contract:
    post:
      tags:
      - Organization management
      summary: Change contract into organization
      description: This can only be done by the logged in user
      operationId: changeContractIntoOrganization
      parameters:
      - name: organizationId
        in: path
        description: Identifier of organization
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to set up new contract into organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeOrganizationContractReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationShortDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /password/recovery:
    post:
      tags:
      - Password recovery
      summary: Send request to restore a password
      description: Send request to restore a password
      operationId: sendRequestToRestorePassword
      requestBody:
        description: Request to restore a password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendConfirmationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /password/recovery/confirm:
    post:
      tags:
      - Password recovery
      summary: Confirmation of password restoring using one time password
      description: Confirmation of password restoring using one time password
      operationId: confirmByOtpAndResetPasswordUsingPOST
      requestBody:
        description: One time password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmPasswordReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /password/recovery/resend-otp:
    post:
      tags:
      - Password recovery
      summary: Resend one time password to confirm password restoring
      description: Resend one time password to confirm password restoring
      operationId: resendOTPtoConfirmPasswordRestoring
      requestBody:
        description: Request to resend otp
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /points-of-sale:
    get:
      tags:
      - Point of sale
      summary: Get points of sale
      description: This can only be done by the logged in merchant
      operationId: getPointsOfSale
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewPointsOfSaleResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Point of sale
      summary: Create point of sale
      description: This can only be done by the logged in merchant
      operationId: createPointOfSale
      requestBody:
        description: Request to create a new point of sale
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePointOfSaleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfSaleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /points-of-sale/{posId}:
    get:
      tags:
      - Point of sale
      summary: Get information about single point of sale
      description: "This can only be done by the logged in user. POS owner will see\
        \ full information, while other users - only public."
      operationId: getPointOfSaleDetails
      parameters:
      - name: posId
        in: path
        description: Identifier of the point of sale
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortPointOfSaleResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Point of sale
      summary: Delete point of sale
      description: This can only be done by the logged in merchant
      operationId: deletePointOfSale
      parameters:
      - name: posId
        in: path
        description: Point of sale id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Point of sale
      summary: Update point of sale
      description: This can only be done by the logged in merchant
      operationId: updatePointOfSale
      parameters:
      - name: posId
        in: path
        description: Point of sale id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update an existing pos
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePointOfSaleReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfSaleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /points-of-sale/{posId}/generate-secret:
    post:
      tags:
      - Point of sale
      summary: Generate new secret code for point of sale
      description: This can only be done by the logged in merchant
      operationId: generateNewSecretCodeForPOS
      parameters:
      - name: posId
        in: path
        description: Point of sale id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointOfSaleResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /points-of-sale/{posId}/transactions/view:
    post:
      tags:
      - Point of sale
      summary: Get merchant payment transactions for specified POS
      description: This can only be done by the logged in user
      operationId: viewTransactionsForPOS
      parameters:
      - name: posId
        in: path
        description: Point of sale id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to get user transactions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewPaymentTransactionsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewPaymentTransactionsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins:
    post:
      tags:
      - Prepaid
      summary: Create prepaid
      description: This can only be done by the logged in user
      operationId: createPrepaid
      requestBody:
        description: Request to execute prepaid creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrepaidCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCoinResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins/calculate:
    post:
      tags:
      - Prepaid
      summary: Calculate commission for prepaid creation
      description: This can only be done by the logged in user
      operationId: calculateCommissionToCreatePrepaid
      requestBody:
        description: Request to calculate prepaid creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrepaidCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins/view:
    post:
      tags:
      - Prepaid
      summary: View prepaid vouchers
      description: The request can be only done by the logged in user
      operationId: viewPrepaidVouchers
      requestBody:
        description: Request to view prepaid vouchers
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewPrepaidVouchersReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewPrepaidVouchersResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins/{serial}/activate:
    post:
      tags:
      - Prepaid
      summary: Activate prepaid coin
      description: This can only be done by the logged in user
      operationId: activatePrepaidCoin
      parameters:
      - name: serial
        in: path
        description: Serial of the prepaid coin
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to activate prepaid coin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeemPrepaidReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins/{serial}/calculate:
    post:
      tags:
      - Prepaid
      summary: Calculate commission for redeem of the prepaid
      description: This can only be done by the logged in user
      operationId: calculateCommissionToRedeemPrepaid
      parameters:
      - name: serial
        in: path
        description: Serial of the prepaid coin
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to redeem prepaid coin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeemPrepaidReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins/{serial}/change-pin:
    post:
      tags:
      - Prepaid
      summary: Change pin for prepaid
      description: This can only be done by the logged in user
      operationId: changePinForPrepaid
      parameters:
      - name: serial
        in: path
        description: Serial of the prepaid coin
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /prepaid-coins/{serial}/view:
    get:
      tags:
      - Prepaid
      summary: View prepaid voucher
      description: This can only be done by the logged in user
      operationId: viewPrepaidVoucher
      parameters:
      - name: serial
        in: path
        description: Serial of the prepaid voucher
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidVoucherDto'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profile-documents:
    get:
      tags:
      - Profile - documents uploading
      summary: "Get profile documents, last of each type"
      description: This can only be done by the logged in user
      operationId: getProfileDocuments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMyProfileDocumentsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Profile - documents uploading
      summary: Submit file for approval as profile document
      description: This can only be done by the logged in user
      operationId: submitProfileDocument
      requestBody:
        description: Request for file approval
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileDocumentReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileDocumentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profile-documents/identifier:
    post:
      tags:
      - Profile - documents uploading
      summary: Upload profile document identifier as plain text
      description: This can only be done by the logged in user
      operationId: submitDocumentIdentifier
      requestBody:
        description: Request for file approval
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileDocumentIdentifierReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileDocumentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profile-documents/view:
    post:
      tags:
      - Profile - documents approving
      summary: View all profile documents
      description: This can only be done by the logged in user
      operationId: viewAllProfileDocuments
      requestBody:
        description: Request to view all profile documents
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewProfileDocumentsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileDocumentsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profile-documents/view-document-types:
    post:
      tags:
      - Profile - documents uploading
      summary: Get all document types required for approval
      description: This can only be done by the logged in user
      operationId: getAllProfileDocumentTypesForApproval
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewDocumentTypesResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profile-documents/{profileDocumentId}/approve:
    post:
      tags:
      - Profile - documents approving
      summary: Approve the profile document
      description: This can only be done by the logged in user
      operationId: approveProfileDocument
      parameters:
      - name: profileDocumentId
        in: path
        description: Identifier of profile document
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproveOrDeclineProfileDocumentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profile-documents/{profileDocumentId}/decline:
    post:
      tags:
      - Profile - documents approving
      summary: Decline the profile document
      description: This can only be done by the logged in user
      operationId: declineProfileDocument
      parameters:
      - name: profileDocumentId
        in: path
        description: Identifier of profile document
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproveOrDeclineProfileDocumentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my:
    get:
      tags:
      - Owner profile management
      summary: Get user profile
      description: This can only be done by the logged in user
      operationId: getUserProfile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/additional:
    patch:
      tags:
      - Owner profile management
      summary: Update additional information
      description: This can only be done by the logged in user
      operationId: updateAdditionalInformation
      requestBody:
        description: Request to update additional info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalInfoUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/address:
    patch:
      tags:
      - Owner profile management
      summary: Update user address
      description: This can only be done by the logged in user
      operationId: updateUserAddress
      requestBody:
        description: Request to update address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /my/bank-accounts:
    get:
      tags:
      - Bank accounts management by business roles
      summary: Get the list of bank accounts owned by current user
      description: |
        This API can be used by users with business roles to get the list of their bank accounts.
        <br>API can be called only by the authorised user.
        <br>In the response, you will receive the list of bank accounts with bank account `id` and account details. Pass `id` to the APIs where bank account id is required.
      operationId: getUserBankAccounts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsViewResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /my/bank-accounts/view:
    post:
      tags:
      - Bank accounts management by business roles
      summary: Get the list of bank accounts owned by current user with filtering
        and pagination
      description: |
        This API can be used by users with business roles to get the list of their bank accounts. API supports filtering and pagination.
        <br>API can be called only by the authorised user.
        <br>In the response, you will receive the list of bank accounts with bank account `id` and account details. Pass `id` to the APIs where bank account id is required.
      operationId: viewUserBankAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountsViewReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsViewResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /my/bank-accounts/coin/{coinSerial}/with-bank:
    post:
      tags:
      - Bank accounts management by business roles
      summary: Create a new bank account by business user
      description: |
        This API can be used by users with business roles to add bank account to the system and link it to the in-system account.
        <br>API can be called only by the authorised user.
        <br>To call this API you have to pass the following information along with bank account details:
        <li>In-system account number to which bank account will be linked. Take `serial` from the API `GET /coins` and pass it to the `coinSerial` parameter.
        <li>ID of bank where bank account is opened. Take `bankId` from the API `GET /bank-catalog` and pass it to the `bankId` fields in the request body.
        <br>In the response, you will receive the bank account `id` along with account details. Pass `id` to the API to approve bank account or to any other API where bank account id is required.
        <br>Created bank account should be approved by compliance using API `POST/bank-accounts/{bankAccountId}/approve`
      operationId: createUserBankAccountWithBankId
      parameters:
      - name: coinSerial
        in: path
        description: In-system account number to which created bank account will be
          linked
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: "710664919642"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /my/bank-accounts/{bankAccountId}:
    delete:
      tags:
      - Bank accounts management by business roles
      summary: Delete bank account by provided bank account id
      description: |
        This API can be used by users with business roles to delete added earlier bank account.
        <br>API can be called only by the authorised user.
        <br>To call this API you have to pass the following information:
        <li>ID of bank account. Take `id` from the API `GET /my/bank-accounts` or `POST /my/bank-accounts/view` and pass it to the parameter `bankAccountId`.
      operationId: deleteUserBankAccount
      parameters:
      - name: bankAccountId
        in: path
        description: Internal ID of the bank account which you are going to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: 1ef7432a-e2cd-4334-af11-729f226c41d6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /my/bank-accounts/{bankAccountId}/with-bank:
    patch:
      tags:
      - Bank accounts management by business roles
      summary: Change bank account details by provided bank account id
      description: |
        This API can be used by users with business roles to change bank account details for already added bank account.
        <br>API can be called only by the authorised user.
        <br>To call this API you have to pass the following information along with bank account details:
        <li>ID of bank account. Take `id` from the API `GET /my/bank-accounts` or `POST /my/bank-accounts/view` and pass it to the parameter `bankAccountId`.
        <li>ID of bank where bank account is opened. Take `bankId` from the API `GET /bank-catalog` and pass it to the `bankId` fields in the request body.
      operationId: updateUserBankAccountWithBankId
      parameters:
      - name: bankAccountId
        in: path
        description: Internal bank account ID
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: 1ef7432a-e2cd-4334-af11-729f226c41d6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateBankAccountWithBankIdResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/business:
    patch:
      tags:
      - Owner profile management
      summary: Update business information
      description: This can only be done by the logged in user
      operationId: updateBusinessInformation
      requestBody:
        description: Request to update business information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/callback-settings:
    get:
      tags:
      - Callback settings for non-merchant operations
      summary: View callback settings
      description: This can be only done by an authorized merchant
      operationId: viewProfileCallbackSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallbackSettingsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    put:
      tags:
      - Callback settings for non-merchant operations
      summary: Create or update callback settings
      description: This can be only done by an authorized merchant
      operationId: setProfileCallbackSettings
      requestBody:
        description: Request to create or update callback settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetCallbackSettingsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallbackSettingsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/callback-settings/generate-secret-code:
    post:
      tags:
      - Callback settings for non-merchant operations
      summary: Generate secret code for callback settings
      description: This can be only done by an authorized merchant
      operationId: generateSecretCodeForCallbackSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallbackSettingsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/contact:
    post:
      tags:
      - Owner profile management
      summary: Create contact verification request
      description: This can only be done by the logged in user
      operationId: createContactVerificationRequest
      requestBody:
        description: Request for contact verification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendConfirmationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/contact/confirm:
    post:
      tags:
      - Owner profile management
      summary: Confirm contact verification request using one time password
      description: This can only be done by the logged in user
      operationId: confirmContactVerificationRequestViaOTP
      requestBody:
        description: One time password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateOtpReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/contact/resend-otp:
    post:
      tags:
      - Owner profile management
      summary: Resend one time password to confirm contact
      description: This can only be done by the logged in user
      operationId: resendOTPToConfirmContact
      requestBody:
        description: One time password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/master-pin:
    get:
      tags:
      - Profile - Master PIN
      summary: Get master PIN belonging to current user
      description: This can only be done by the logged in user
      operationId: getMasterPINForCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMasterPINResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    put:
      tags:
      - Profile - Master PIN
      summary: Set up a new or replace an existing master PIN
      description: This can only be done by the logged in user
      operationId: setUpNewOrReplaceExistingMasterPIN
      requestBody:
        description: Request to replace a PIN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplacePINRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMasterPINResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/master-pin/confirm-ban-removal:
    post:
      tags:
      - Profile - Master PIN
      summary: Confirmation of ban removal
      description: Confirmation of ban removal
      operationId: confirmationOfBanRemoval
      requestBody:
        description: Request to confirm ban removal
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateOtpReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /profiles/my/master-pin/restore:
    post:
      tags:
      - Profile - Master PIN
      summary: Restore an existing master PIN by generating a new one
      description: This can only be done by the logged in user
      operationId: restoreExistingMasterPINByGeneratingANewOne
      requestBody:
        description: Request to restore a PIN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestorePINRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewMasterPINResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/password:
    patch:
      tags:
      - Owner profile management
      summary: Update user password
      description: This can only be done by the logged in user
      operationId: updateUserPassword
      requestBody:
        description: Request to update password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/person:
    patch:
      tags:
      - Owner profile management
      summary: Update person information
      description: This can only be done by the logged in user
      operationId: updateProfilePersonInfo
      requestBody:
        description: Request to update person's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/reset-identification:
    post:
      tags:
      - Owner profile management
      summary: Create a request to reset an identification
      description: This can only be done by the logged in user
      operationId: createRequestToResetIdentification
      requestBody:
        description: Request to create a reset identification request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResetIdentificationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResetIdentificationRequestResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/security-settings:
    patch:
      tags:
      - Owner profile management
      summary: Update security settings
      description: This can only be done by the logged in user
      operationId: updateProfileSecuritySettings
      requestBody:
        description: Request to update security settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/transactions-confirmation-settings:
    get:
      tags:
      - Profile - transactions confirmation
      summary: Get current transactions confirmation settings
      description: This can only be done by the logged in user
      operationId: getTransactionConfirmationSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProcessConfirmationSettingsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Profile - transactions confirmation
      summary: Create transaction confirmation settings record
      description: This can only be done by the logged in user
      operationId: createTransactionConfirmationSettingsRecord
      requestBody:
        description: Request to create confirmation settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProcessConfirmationSettingsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateProcessConfirmationSettingsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/transactions-confirmation-settings/view-eligible-business-process-types:
    post:
      tags:
      - Profile - transactions confirmation
      summary: Retrieve list of business process types eligible for confirmations
        set up
      description: This can only be done by the logged in user
      operationId: viewEligibleBusinessProcessesTypesEligibleForConfirmationsSetUp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewEligibleForConfirmationProcessTypesResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/transactions-confirmation-settings/{id}/confirm-update:
    post:
      tags:
      - Profile - transactions confirmation
      summary: Confirm update of transaction confirmation settings record
      description: This can only be done by the logged in user
      operationId: confirmUpdateOfTransactionConfirmationSettings
      parameters:
      - name: id
        in: path
        description: Identifier of the confirmation settings record
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: "Confirmation value: OTP, PIN etc"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmProcessReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateProcessConfirmationSettingsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/my/transactions-confirmation-settings/{id}/request-update:
    post:
      tags:
      - Profile - transactions confirmation
      summary: Request to update transaction confirmation settings record
      description: This can only be done by the logged in user
      operationId: requestToUpdateTransactionConfirmationSettingsRecord
      parameters:
      - name: id
        in: path
        description: Identifier of the confirmation settings record
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update confirmation settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProcessConfirmationSettingsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/view-reset-identification-requests:
    post:
      tags:
      - Profile - identification
      summary: View pending reset identification requests
      description: This can only be done by the logged in user
      operationId: viewPendingResetIdentificationRequests
      requestBody:
        description: Request to reset identification of user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewResetIdentificationRequestsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/approve:
    post:
      tags:
      - Profile - identification
      summary: Approve organization's identification
      description: This can only be done by the logged in user
      operationId: approveIdentificationRequest
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/decline:
    post:
      tags:
      - Profile - identification
      summary: Decline organization's identification
      description: This can only be done by the logged in user
      operationId: declineIdentificationRequest
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/reset:
    post:
      tags:
      - Profile - identification
      summary: Reset an identification of user and send mandatory fields of profile
        to update for re identification
      description: This can only be done by the logged in user
      operationId: rebootIdentificationWithRemarks
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to reset identification of user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetIdentificationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}:
    get:
      tags:
      - Operator profile management
      summary: Get user profile by id
      description: This can only be done by the logged in user
      operationId: getUserProfileById
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/additional:
    patch:
      tags:
      - Operator profile management
      summary: Update additional information
      description: This can only be done by the logged in user
      operationId: updateUserProfileAdditionalInfo
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update additional info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalInfoUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/address:
    patch:
      tags:
      - Operator profile management
      summary: Update user address
      description: This can only be done by the logged in user
      operationId: updateUserProfileAddressInto
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/business:
    patch:
      tags:
      - Operator profile management
      summary: Update business information
      description: This can only be done by the logged in user
      operationId: updateUserProfileBusinessInfo
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update business information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/contact:
    patch:
      tags:
      - Operator profile management
      summary: Update and verify contact without confirmation
      description: This can only be done by the logged in user
      operationId: updateUserProfileContact
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request for contact verification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/history:
    post:
      tags:
      - Operator profile management
      summary: Get profile history
      description: This can only be done by the logged in user
      operationId: getUserProfileHistory
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Get profile history request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileHistoryReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileHistoryResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/person:
    patch:
      tags:
      - Operator profile management
      summary: Update person information
      description: This can only be done by the logged in user
      operationId: updateUserProfilePersonInfo
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update person's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/reset-identification-requests/{reqId}/approve:
    post:
      tags:
      - Profile - identification
      summary: Reset an identification of user
      description: This can only be done by the logged in user
      operationId: approveRequestToResetUserIdentification
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      - name: reqId
        in: path
        description: Identifier of request
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetIdentificationRequestResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/reset-identification-requests/{reqId}/decline:
    post:
      tags:
      - Profile - identification
      summary: Decline a reset identification request of user
      description: This can only be done by the logged in user
      operationId: declineRequestToResetUserIdentification
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      - name: reqId
        in: path
        description: Identifier of request
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetIdentificationRequestResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/reset-password:
    post:
      tags:
      - Operator profile management
      summary: "Reset user's password and to send it to verified user contacts: phone\
        \ or email"
      description: This can only be done by the logged in user
      operationId: resetUserPassword
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/secret-word:
    post:
      tags:
      - Operator profile management
      summary: Validate secret word
      description: This can only be done by the logged in user
      operationId: validateSecretWord
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request for contact verification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckSecretWordReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /profiles/{userId}/security-settings:
    patch:
      tags:
      - Operator profile management
      summary: Update security settings
      description: This can only be done by the logged in user
      operationId: updateUserProfileSecuritySettings
      parameters:
      - name: userId
        in: path
        description: User's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update security settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewProfileResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /registration:
    post:
      tags:
      - User self-registration
      summary: Registration
      description: The method allows the user to register in the system SDK.Finance
      operationId: createUserRegistrationRequest
      requestBody:
        description: Request for registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendConfirmationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /registration/confirm:
    post:
      tags:
      - User self-registration
      summary: Confirmation of registration using one time password
      description: |
        The method allows the user to confirm the registration (change status to active) using the one-time password,
        which was sent to the login method in
      operationId: confirmationOfRegistrationViaOTP
      requestBody:
        description: Registration confirmation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateOtpWithNewPasswordReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /registration/resend-otp:
    post:
      tags:
      - User self-registration
      summary: Resend one time password to confirm registration
      description: "The method allows to re-send the one-time password, which is used\
        \ for user registration"
      operationId: resendOTPtoConfirmRegistration
      requestBody:
        description: Request to resend otp
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmationReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
  /role-groups:
    get:
      tags:
      - System roles management
      summary: View all available system roles
      description: This can only be done by the logged in user
      operationId: viewSystemRoles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewRoleGroupsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards:
    post:
      tags:
      - Smart cards management - as supervisor
      summary: Create a new smart card
      description: This can only be done by the logged in user
      operationId: createSmartCard
      requestBody:
        description: Request to create a smart card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmartCardReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCardResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/validate:
    post:
      tags:
      - Validation for smart card
      summary: Validate a smart card
      description: Method validates a smart card number for existence and returns
        corresponding information
      operationId: validateSmartCard
      requestBody:
        description: Request to validate a smart card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateSmartCardReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateSmartCardResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/view:
    post:
      tags:
      - Smart cards management - as supervisor
      summary: Get smart cards by specified filter
      description: This can only be done by the logged in user
      operationId: getFilteredSmartCards
      requestBody:
        description: Request to view smart cards
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewSmartCardsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseSmartCardDto'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/{number}:
    delete:
      tags:
      - Smart cards management - as supervisor
      summary: Delete an existing smart card
      description: This can only be done by the logged in user
      operationId: deleteExistingSmartCard
      parameters:
      - name: number
        in: path
        description: Smart card number
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Smart cards management - as supervisor
      summary: Update an existing smart card
      description: This can only be done by the logged in user
      operationId: updateExistingSmartCard
      parameters:
      - name: number
        in: path
        description: Smart card number
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: New smart card data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCardReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCardResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/my:
    get:
      tags:
      - Smart cards management - as client
      summary: Get smart cards owned by current user
      description: This can only be done by the logged in user
      operationId: getCurrentUserSmartCards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewSmartCardsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Smart cards management - as client
      summary: Create a new smart card
      description: This can only be done by the logged in user
      operationId: createUserSmartCard
      requestBody:
        description: Request to create a smart card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmartCardReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCardResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/my/{id}:
    get:
      tags:
      - Smart cards management - as client
      summary: Get smart card by id with full card number
      description: This can only be done by the logged in user
      operationId: getUserSmartCardById
      parameters:
      - name: id
        in: path
        description: Smart card id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewSmartCardsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/my/coin/{serial}:
    get:
      tags:
      - Smart cards management - as client
      summary: Get all smart card by associated coin serial
      description: This can only be done by the logged in user
      operationId: getAllUserSmartCardsByAssociatedCoinSerial
      parameters:
      - name: serial
        in: path
        description: Associated coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewSmartCardsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /smart-cards/my/number/{number}:
    delete:
      tags:
      - Smart cards management - as client
      summary: Delete an existing user smart card
      description: This can only be done by the logged in user
      operationId: deleteUserExistingSmartCard
      parameters:
      - name: number
        in: path
        description: Smart card number
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Smart cards management - as client
      summary: Update an existing user smart card
      description: This can only be done by the logged in user
      operationId: updateExistingUserSmartCard
      parameters:
      - name: number
        in: path
        description: Smart card number
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: New smart card data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCardReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCardResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /subscriptions:
    get:
      tags:
      - Subscriptions
      summary: Get subscriptions owned by current user
      description: This can only be done by the logged in user
      operationId: getCurrentUserSubscriptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewSubscriptionResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Subscriptions
      summary: Create subscription
      description: This can only be done by the logged in user
      operationId: createSubscription
      requestBody:
        description: Request to create subscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /subscriptions/{id}:
    delete:
      tags:
      - Subscriptions
      summary: Delete subscription
      description: This can only be done by the logged in user
      operationId: deleteSubscription
      parameters:
      - name: id
        in: path
        description: Subscription id which should be deleted
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /subscriptions/{id}/activate:
    patch:
      tags:
      - Subscriptions
      summary: Activate subscription
      description: This can only be done by the logged in user
      operationId: activateSubscription
      parameters:
      - name: id
        in: path
        description: Subscription id which should be activated
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /subscriptions/{id}/stop:
    patch:
      tags:
      - Subscriptions
      summary: Stop subscription
      description: This can only be done by the logged in user
      operationId: stopSubscription
      parameters:
      - name: id
        in: path
        description: Subscription id which should be stopped
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart:
    get:
      tags:
      - Templates
      summary: Get cart templates for current user
      description: This can only be done by the logged in user
      operationId: getCartTemplatesForCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCartTemplateResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Templates
      summary: Create cart template
      description: This can only be done by the logged in user
      operationId: createCartTemplate
      requestBody:
        description: Request to create cart template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/copy/{id}:
    post:
      tags:
      - Templates
      summary: Make copy of cart template
      description: This can only be done by the logged in user
      operationId: makeCopyOfCartTemplate
      parameters:
      - name: id
        in: path
        description: Id of cart template which should be copped
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      - name: oppositeRegularParam
        in: query
        description: |
          Is copy should have an opposite regular param.
          Regular param shows that template should be use in regular payments
        required: true
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterBoolean'
        example: false
      - name: oppositeReusableParam
        in: query
        description: |
          Is copy should have an opposite reusable param.
          Reusable param shows that template could be used more than one time in different regular payments
        required: true
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterBoolean'
        example: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/regular/{id}:
    put:
      tags:
      - Templates
      summary: Update cart template regular param
      description: This can only be done by the logged in user
      operationId: updateCartTemplateRegularParam
      parameters:
      - name: id
        in: path
        description: Cart template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update cart template regular param
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartTemplateRegularParamReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/{cartId}/commission:
    get:
      tags:
      - Templates
      summary: Calculate commission before payment execution
      description: This can only be done by the logged in user
      operationId: calculateCommissionBeforePaymentExecution
      parameters:
      - name: cartId
        in: path
        description: Cart template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartCommissionResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/{cartId}/purchase/{templateId}:
    delete:
      tags:
      - Templates
      summary: Delete purchase template from a cart template
      description: This can only be done by the logged in user
      operationId: removePurchaseTemplateFromCartTemplate
      parameters:
      - name: cartId
        in: path
        description: Cart template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      - name: templateId
        in: path
        description: Purchase template id to remove
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/{id}:
    delete:
      tags:
      - Templates
      summary: Delete cart template
      description: This can only be done by the logged in user
      operationId: deleteCartTemplate
      parameters:
      - name: id
        in: path
        description: Cart template id which should be deleted
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Templates
      summary: Update cart template
      description: This can only be done by the logged in user
      operationId: updateCartTemplate
      parameters:
      - name: id
        in: path
        description: Cart template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update cart template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/{id}/payment:
    post:
      tags:
      - Templates
      summary: Execute payment by cart template
      description: This can only be done by the logged in user
      operationId: executePaymentByCartTemplate
      parameters:
      - name: id
        in: path
        description: Cart template id which should be paid
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCartTemplatePaymentResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/cart/{id}/purchase:
    post:
      tags:
      - Templates
      summary: Add new purchase template to a cart template
      description: This can only be done by the logged in user
      operationId: addNewPurchaseTemplateToCartTemplate
      parameters:
      - name: id
        in: path
        description: Cart template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: Request to update cart template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePurchaseTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCartTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/transfer:
    get:
      tags:
      - Transfer Template
      summary: Get transfer templates for current user
      description: This can only be done by the logged in user
      operationId: getTransferTemplatesForCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTransferTemplateResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    post:
      tags:
      - Transfer Template
      summary: Create transfer template
      description: This can only be done by the logged in user
      operationId: createTransferTemplate
      requestBody:
        description: Request to create transfer template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferTemplateWithPaymentToolReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/transfer/operation/{id}:
    post:
      tags:
      - Transfer Template
      summary: Create transfer template by operation id
      description: This can only be done by the logged in user
      operationId: createTransferTemplateByOperationId
      parameters:
      - name: id
        in: path
        description: Operation id (business process) which has already executed
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to create transfer template by operation id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/transfer/view:
    post:
      tags:
      - Transfer Template
      summary: Get transfer templates for current user with filter and pagination
      description: This can only be done by the logged in user
      operationId: getTransferTemplatesForCurrentUserWithFilterAndPagination
      requestBody:
        description: Request to filter available transfer templates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewTransferTemplateFilteredReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTransferTemplateFilteredResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/transfer/{id}:
    delete:
      tags:
      - Transfer Template
      summary: Delete transfer template
      description: This can only be done by the logged in user
      operationId: deleteTransferTemplate
      parameters:
      - name: id
        in: path
        description: Transfer template id to delete
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - Transfer Template
      summary: Update transfer template
      description: This can only be done by the logged in user
      operationId: updateTransferTemplate
      parameters:
      - name: id
        in: path
        description: Transfer template id to update
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update transfer template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransferTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/transfer/{id}/calculate:
    post:
      tags:
      - Transfer Template
      summary: Calculate payment fee by transfer template
      description: This can only be done by the logged in user
      operationId: calculatePaymentFeeByTransferTemplate
      parameters:
      - name: id
        in: path
        description: Transfer template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to calculate payment fee by transfer template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentByTransferTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedPushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /templates/transfer/{id}/execute:
    post:
      tags:
      - Transfer Template
      summary: Execute payment by transfer template
      description: This can only be done by the logged in user
      operationId: executePaymentByTransferTemplate
      parameters:
      - name: id
        in: path
        description: Transfer template id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to execute payment by transfer template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentByTransferTemplateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentByTransferTemplateResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /tickets:
    post:
      tags:
      - Support
      summary: Create ticket for customer support
      description: This can only be done by the logged in user
      operationId: createTicketForCustomerSupport
      requestBody:
        description: Request to create a ticket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTicketResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /tickets/view:
    post:
      tags:
      - Support
      summary: Retrieve list of tickets as customer support manager
      description: This can only be done by the logged in user
      operationId: retrieveListOfTicketsAsCustomerSupportManager
      requestBody:
        description: Request to filter available tickets
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewTicketsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTicketsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transactions/view:
    post:
      tags:
      - Transactions
      summary: Get user transactions
      description: This can only be done by the logged in user
      operationId: getUserTransactions
      requestBody:
        description: Request to get user transactions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewTransactionsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTransactionsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transactions/{id}/confirm:
    post:
      tags:
      - Transactions
      summary: Confirm a transaction
      description: This can only be done by the logged in user
      operationId: confirmTransaction
      parameters:
      - name: id
        in: path
        description: Identifier of business process
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to confirm a business process
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmProcessReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transactions/{transactionId}:
    get:
      tags:
      - Transactions
      summary: Get user transaction by ID
      description: This can only be done by the logged in user
      operationId: getUserTransactionById
      parameters:
      - name: transactionId
        in: path
        description: Transaction's identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transaction-categories/view:
    post:
      tags:
      - Transaction Categories
      summary: View transaction categories
      description: This can only be done by the logged in user
      operationId: viewTransactionCategories
      requestBody:
        description: Request to view transaction categories
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewTransactionCategoriesReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTransactionCategoriesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transaction-categories:
    post:
      tags:
      - Transaction Categories
      summary: Create transaction category
      description: This can only be done by the logged in user
      operationId: createTransactionCategory
      requestBody:
        description: Request to create transaction category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryCreateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transaction-categories/{categoryId}:
    put:
      tags:
      - Transaction Categories
      summary: Update transaction category
      description: This can only be done by the logged in user
      operationId: updateTransactionCategory
      parameters:
      - name: categoryId
        in: path
        description: Transaction category identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to update transaction category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpdateReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    delete:
      tags:
      - Transaction Categories
      summary: Delete transaction category
      description: This can only be done by the logged in user
      operationId: deleteTransactionCategory
      parameters:
      - name: categoryId
        in: path
        description: Transaction category identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transaction-categories/business-process/{typeId}:
    put:
      tags:
      - Transaction Categories
      summary: set category to operation
      description: This can only be done by the logged in user
      operationId: setTransactionCategoryToBusinessProcessType
      parameters:
      - name: typeId
        in: path
        description: Operation type
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      requestBody:
        description: category id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryIdReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transaction-categories/business-process:
    get:
      tags:
      - Transaction Categories
      summary: Get transaction category for business processes
      description: This can only be done by the logged in user
      operationId: getAllTransactionCategoryToBusinessProcessType
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategoryToBusinessProcessTypeResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transfers:
    post:
      tags:
      - Transfer
      summary: Execute transfer transaction
      description: This can only be done by the logged in user
      operationId: executeTransferTransaction
      requestBody:
        description: Request to execute transfer transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessClientTransactionResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /transfers/calculate:
    post:
      tags:
      - Transfer
      summary: Calculate transfer commission fee
      description: This can only be done by the logged in user
      operationId: calculateTransferCommissionFee
      requestBody:
        description: Request to calculate transfer transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedPushResultResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users:
    post:
      tags:
      - User management by service roles
      summary: Create new user in the system
      description: "Use this API to create new user in the system. You can create\
        \ user with service or business role. \n<br>After creation credentials are\
        \ sent to the provided email or phone and user is able to login to the system.\
        \ \n<br>To create user with service role you have to provide system `organizationId`.\
        \ It can be taken from the `/authorization` API or from the `POST users/view`\
        \ API from any user with service roles. \n<br>All service users are linked\
        \ to the system organisation. \n<br>Do not provide organisation ID to create\
        \ user with business role. It will be created along with the user and user\
        \ will be linked to the created organisation as a member. \n<br>API can be\
        \ called only by the authorised user with the appropriate permissions. Permission\
        \ to call this API: `USER_MANAGER`\n"
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/message:
    post:
      tags:
      - User message API provider
      summary: Create and send message to user
      description: This can only be done by the logged in user
      operationId: sendMessageToUser
      requestBody:
        description: Create and send message to user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserMessageReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMessageResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/message/{userId}:
    get:
      tags:
      - User message API provider
      summary: Get all messages to user
      description: This can only be done by the logged in user
      operationId: getAllMessagesToUser
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMessagesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/note:
    post:
      tags:
      - User note API provider
      summary: Create note about user
      description: This can only be done by the logged in user
      operationId: createNoteAboutUser
      requestBody:
        description: Create a note about the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserNoteReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNoteResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/note/{userId}:
    get:
      tags:
      - User note API provider
      summary: Get all user notes
      description: This can only be done by the logged in user
      operationId: getAllUserNotes
      parameters:
      - name: userId
        in: path
        description: Identifier of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotesResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/view:
    post:
      tags:
      - User management by service roles
      summary: View the list of users with filtering and pagination
      description: |
        API can be called only by the authorised user with the appropriate permissions. Permission to call this API `USER_VIEWER`.
        <br>API supports filtering, sorting by the definite parameters, and pagination.
      operationId: viewUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewUsersReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewUsersResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/view/actions:
    post:
      tags:
      - User actions monitoring
      summary: View all actions
      description: This can only be done by the logged in user
      operationId: viewUserActions
      requestBody:
        description: Request to filter available actions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewFilteredActionsReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserActionsResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/view/{actionId}/action-reverse:
    get:
      tags:
      - User actions monitoring
      summary: Get list of object masks related to certain action
      description: This can only be done by the logged in user
      operationId: viewUserActionReverse
      parameters:
      - name: actionId
        in: path
        description: User's action identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReverseActionsResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/{userId}:
    delete:
      tags:
      - User management by service roles
      summary: Delete user by provided user ID
      description: |
        Use this API to delete user by provided User ID. `userId` can be taken from the field `ìd` in the API `POST /users/view` response.
        <br>User with business role can be deleted only if all their balances are zero.
        <br>API can be called only by the authorised user with the appropriate permissions. Permission to call this API: `USER_MANAGER`.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: |
          Internal user identifier. `userId` can be taken from the field `ìd` in the API `POST /users/view` response.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
    patch:
      tags:
      - User management by service roles
      summary: Activate or deactivate user by provided user ID
      description: "Use this API to activate or deactivate user by provided User ID.\
        \ Deactivated user is not allowed to login to the system. \n<br>`userId` can\
        \ be taken from the field `ìd` in the API `POST /users/view` response.\n<br>API\
        \ can be called only by the authorised user with the appropriate permissions.\
        \ Permission to call this API: `USER_MANAGER`.\n"
      operationId: updateExistingUser
      parameters:
      - name: userId
        in: path
        description: |
          Identifier of the user. `userId` can be taken from the field `ìd` in the API `POST /users/view` response
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      requestBody:
        description: Request to activate or deactivate a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewUserResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/contracts/update:
    patch:
      tags:
      - User management by service roles
      summary: Change contract for user
      description: "Use this API to update the current contract type for the specified\
        \ user. Provide the current `userId` and the new `contractId` in the request\
        \ body. The `userId` is returned in the API response for user registration\
        \ POST `/users` or can be taken from the API GET `/users/view`. The `contractId`\
        \ can be taken from the API response POST `/contracts/view` (`id`). <br> **Note**,\
        \ that the user contract can be changed only to contract with the same type\
        \ as the current user `personType` (contract type equals `personType`). Contract\
        \ Type is related to the `PersonType` in `PersonDef` of a User Profile. <br>\
        \ There are 4 contract types (`personType`) available and pre-configured by\
        \ default in the system: <li> base <li> standard <li> gold <li> VIP <br> **Current\
        \ Flow for the automatic contract changing**: Users after registration are\
        \ assigned with a `Base` Contract being a `base` PersonType. Through contract\
        \ management, the Administrator can set available operations, commissions,\
        \ and limits for this Contract type. By default, all operations within a `Base`\
        \ Contract\_are allowed. <br> To prohibit certain operations, the Administrator\
        \ should **deactivate** the commission profile for a such specific commission.\
        \ <br> After user verification by the Compliance the PersonType and a Contract\
        \ type is being changed\_automatically to a `Standard`.\_Further changes of\
        \ the personType to `Gold` or `VIP` can be done only manually through UI/API\
        \ or can be configured within the code based on the business requirements.\
        \ <br> To determine the user `personType` use API GET `/users/view` or it\
        \ can be taken from the response for user registration POST `/users`. <br>\
        \ API can be called only by the authorized user with the appropriate permissions.\
        \ <br> To check which role has this permission call API `/environment-variables`."
      operationId: updateContractForExistingUser
      requestBody:
        description: Request to update contract for user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserContract'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewUserResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /users/{userId}/unban:
    post:
      tags:
      - User management by service roles
      summary: Unban user by provided user ID
      description: |
        Use this API to unban user by provided User ID. Use is banned for the defined period after the defined number of wrong password attempts.
        <br>This API allows to unban user earlier than bank period ends.
        <br>`userId` can be taken from the field `ìd` in the API `POST /users/view` response.
        <br>API can be called only by the authorised user with the appropriate permissions. Permission to call this API: `USER_MANAGER`.
      operationId: unbanUser
      parameters:
      - name: userId
        in: path
        description: |
          Identifier of the user. `userId` can be taken from the field `ìd` in the API `POST /users/view` response.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterStringWithConstrains'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewUserResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /working-days:
    post:
      tags:
      - Cash desk - working day management
      summary: Open working day for cash desk
      description: "To be able to perform operations with cash desk working day for\
        \ the cash desk should be opened. \n<br>API can be called only by the authorised\
        \ user with the appropriate permissions. Permission to call this API: `CASHIER`.\n\
        <br>When working day is opened the following operations are available through\
        \ the cash desk:\n<li>Top-up account via cash desk\n<li>Withdrawal from account\
        \ via cash desk\n<li>Cash collect\n<li>Cash input\n<li>Cash investment\n<li>Close\
        \ working day\n"
      operationId: openWorkingDay
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkingDayProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /working-days/confirm-request-closing:
    post:
      tags:
      - Cash desk - working day management
      summary: Accept request to close working day for cash desk
      description: "After request to close working day for cash desk is initiated\
        \ it should be accepted so that working day is closed. \n<br>To accept request\
        \ for the definite cash desk organisation of this cash desk should be provided.\
        \ \n<br>It can be taken from the field `cashdesk.id` from the API `POST working-days/request-closing/view`\
        \ response.\n<br>API can be called only by the authorised user with the appropriate\
        \ permissions. Permission to call this API: `CASH_DESK_WORKING_DAYS_MANAGER`.\n"
      operationId: acceptRequestToCloseWorkingDay
      requestBody:
        description: Request to accept the working day
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptClosingWorkingDayReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkingDayProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /working-days/current:
    get:
      tags:
      - Cash desk - working day management
      summary: View the current working day for cash desk
      description: |
        Use this API to get the information about current working day for cash desk.
        <br>API can be called only by the authorised user with the appropriate permissions. Permission to call this API: `CASHIER`.
      operationId: viewCurrentWorkingDay
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkingDayProcessResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /working-days/request-closing:
    post:
      tags:
      - Cash desk - working day management
      summary: Initiate request to close a working day for cash desk
      description: "When work with cash desk is finished working day should be closed.\
        \ \n<br>If the working day is not closed until 00:00 (server time) the system\
        \ blocks all operations for this cash desk until working day is closed.\n\
        <br>This API initiates request to close working day. To accept working day\
        \ closing API `POST /working-days/confirm-request-closing` should be called.\n\
        <br>API can be called only by the authorised user with the appropriate permissions.\
        \ Permission to call this API: `CASHIER`.\n"
      operationId: closeRequestToCloseWorkingDay
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkingDayProcessResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /working-days/request-closing/view:
    post:
      tags:
      - Cash desk - working day management
      summary: Get the list of requests to close working day for cash desks
      description: |
        After request to close working day for cash desk is initiated it should be accepted so that working day is closed.
        <br>Use this API to see all requests to close working day for cash desks.
        <br>Provide `cashdesk.id` from the response to the API `POST /working-days/confirm-request-closing` to accept the request to close working day for cash desk.
        <br>API can be called only by the authorised user with the appropriate permissions. Permission to call this API: `CASH_DESK_WORKING_DAYS_MANAGER`.
      operationId: viewWorkingDaysForClosingRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewWorkingDayForClosingReq'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewWorkingDayResp'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /reporting/coins:
    get:
      tags:
      - Reporting
      summary: Calculate total amount for all coins that user own in specified currency
      description: This can only be done by the authorised user COIN_OWNER
      operationId: getCoinsOverview
      parameters:
      - name: currency
        in: query
        description: Currency code
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: showOnlyActive
        in: query
        description: Show only active
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterBoolean'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoinsOverviewResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /reporting/coins/outflows:
    get:
      tags:
      - Reporting
      summary: Returns transaction summary by category in a chosen currency
      description: This can only be done by the authorised user COIN_OWNER
      operationId: getTxOverview
      parameters:
      - name: currency
        in: query
        description: Currency code
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: from
        in: query
        description: Date from
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: to
        in: query
        description: Date to
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: showOnlyActive
        in: query
        description: Show only active
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterBoolean'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxAggregatedSummaryResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /reporting/coins/outflows/{serial}:
    get:
      tags:
      - Reporting
      summary: Returns transaction summary by category in a chosen currency
      description: This can only be done by the authorised user COIN_OWNER
      operationId: getTxOverviewBySerial
      parameters:
      - name: serial
        in: path
        description: Coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: from
        in: query
        description: Date from
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: to
        in: query
        description: Date to
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: showOnlyActive
        in: query
        description: Show only active
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterBoolean'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxAggregatedSummaryResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /reporting/coins/funds-flows:
    get:
      tags:
      - Reporting
      summary: Return sum of amount spent and income funds
      description: Return sum of amount spent and income funds
      operationId: getFundsFlow
      parameters:
      - name: currency
        in: query
        description: Currency code
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: from
        in: query
        description: Date from
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: to
        in: query
        description: Date to
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: showOnlyActive
        in: query
        description: Show only active
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterBoolean'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedFundsFlowResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      security:
      - BearerAuth: []
  /reporting/coins/funds-flows/{serial}:
    get:
      tags:
      - Reporting
      summary: Return sum of amount spent and income funds
      description: Return sum of amount spent and income funds
      operationId: getFundsFlowByCoinSerial
      parameters:
      - name: serial
        in: path
        description: Coin serial
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      - name: from
        in: query
        description: Date from
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      - name: to
        in: query
        description: Date to
        required: false
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ParameterDate'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedFundsFlowResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      security:
      - BearerAuth: []
  /exchange:
    post:
      tags:
      - Exchange
      summary: Executes an exchange transaction
      description: This can only be done by the authorised user COIN_OWNER
      operationId: executeExchange
      requestBody:
        description: Request to execute exchange transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteExchangeReq'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessProcessResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /exchange/calculator:
    post:
      tags:
      - Exchange
      summary: Calculate an exchange transaction
      description: This can only be done by the authorised user COIN_OWNER
      operationId: calculateExchange
      requestBody:
        description: Request to execute exchange transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateExchangeReq'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeCalculationResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /data-export/init:
    post:
      tags:
      - Export transactions
      summary: Export initialization
      description: This can only be done by the authorised user
      operationId: exportTransactions
      requestBody:
        description: Request to execute exchange transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewTransactionsReq'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsExportIdResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /data-export/info/{id}:
    get:
      tags:
      - Export transactions
      summary: Export status and file if
      description: This can only be done by the authorised user COIN_OWNER
      operationId: getExportInfo
      parameters:
      - name: id
        in: path
        description: Export Id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsExportInfoResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /i18n/import:
    post:
      tags:
      - I18n - management
      summary: Save international properties for specific
      description: This can only be done by the logged in user
      operationId: importLocalisation
      requestBody:
        description: Request to execute exchange transaction
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileMultipartFormDataWithLocaleRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
  /i18n/export/{fileName}:
    get:
      tags:
      - I18n - management
      summary: Load international properties for specific
      description: This can only be done by the logged in user
      operationId: exportLocalisation
      parameters:
      - name: fileName
        in: path
        description: File name is a string where name is language key and format either
          json or property.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ParameterString'
        example: en.json
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/StringBinaryData'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      security:
      - BearerAuth: []
  /i18n/locales:
    get:
      tags:
      - I18n - management
      summary: Get available locales
      description: This can only be done by the logged in user
      operationId: getLocales
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleResp'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
      deprecated: false
      security:
      - BearerAuth: []
components:
  schemas:
    PageRequest:
      title: PageRequest
      type: object
      properties:
        pageNumber:
          minimum: 0
          exclusiveMinimum: false
          type: integer
          description: Page number which should be returned
          format: int32
          example: 0
          default: 0
        pageSize:
          maximum: 20
          exclusiveMaximum: false
          minimum: 1
          exclusiveMinimum: false
          type: integer
          description: Number of records which will be returned on the page
          format: int32
          example: 10
          default: 10
    BaseResponse:
      title: BaseResponse
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: processed successfully
        status:
          type: string
          description: Response status
          example: ok
          enum:
          - ok
          - fail
    PageResponse:
      title: PageResponse
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          pageNumber:
            type: integer
            description: Page number which is returned
            format: int32
            example: 0
          pageSize:
            type: integer
            description: Number of records returned on the page
            format: int32
            example: 10
          totalPages:
            type: integer
            description: Total number of pages
            format: int64
            example: 1
          totalRecords:
            type: integer
            description: Total number of records
            format: int64
            example: 10
    StringBinaryData:
      title: StringBinaryData
      type: string
      description: String binary data
      format: binary
    FileMultipartFormDataRequest:
      title: FileMultipartFormDataRequest
      required:
      - file
      type: object
      properties:
        file:
          $ref: '#/components/schemas/StringBinaryData'
      description: File multipart form-data request
    FileMultipartFormDataWithLocaleRequest:
      title: FileMultipartFormDataWithLocaleRequest
      required:
      - file
      - locale
      type: object
      properties:
        file:
          $ref: '#/components/schemas/StringBinaryData'
        locale:
          type: string
          description: Locale
      description: File multipart form-data with locale request
    ParameterString:
      type: string
      description: Parameter string
    ParameterStringWithConstrains:
      maxLength: 36
      minLength: 36
      type: string
      description: Parameter string with constrains
    ParameterBoolean:
      type: boolean
      description: Parameter boolean
      default: false
    ParameterDate:
      type: string
      description: Parameter date
      format: date
    ParameterInteger:
      type: integer
      description: Parameter integer
      format: int32
    ParameterLong:
      type: integer
      description: Parameter long
      format: int64
    UpdateCartTemplateRegularParamReq:
      type: object
      properties:
        regular:
          type: boolean
    TransactionsExportIdResp:
      title: TransactionsExportIdResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: Export id
    TransactionsExportInfoResp:
      title: TransactionsExportInfoResp
      required:
      - exportStatus
      - fileId
      type: object
      properties:
        exportStatus:
          type: string
          description: Export status
          enum:
          - COMPLETE
          - PENDING
          - NOT_FOUND
        fileId:
          type: string
          description: Export id
    CoinDto:
      title: CoinDto
      required:
      - active
      - amount
      - availableAmount
      - creditLimit
      - futureAmount
      - issuer
      - serial
      - type
      type: object
      properties:
        serial:
          type: string
          description: Unique serial number
        name:
          type: string
          description: Name
        amount:
          type: number
          description: Total amount of funds
        availableAmount:
          type: number
          description: "Amount available to use: total subtract held funds"
        futureAmount:
          type: number
          description: Amount of expected income
        heldAmount:
          type: number
          description: The amount that was held for transactions
        creditLimit:
          type: number
          description: Credit limit amount
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        active:
          type: boolean
          description: Whether coin is active
        type:
          type: string
          description: Type of coin
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
        main:
          type: boolean
        smartCards:
          type: array
          description: Smart cards
          items:
            $ref: '#/components/schemas/SmartCardShortDto'
      description: Information about coin
    CoinShortInfoDto:
      title: CoinShortInfoDto
      required:
      - issuer
      - ownerFullName
      - serial
      type: object
      properties:
        serial:
          type: string
          description: Unique serial number
        ownerFullName:
          type: string
          description: Name
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
      description: Information about coin
    ConstraintViolationDto:
      title: ConstraintViolationDto
      required:
      - message
      - parameter
      type: object
      properties:
        parameter:
          type: string
          description: parameter
        message:
          type: string
          description: parameter
    CurrencyDto:
      title: CurrencyDto
      required:
      - code
      - description
      - digitalCode
      - name
      - symbol
      type: object
      properties:
        code:
          maxLength: 12
          minLength: 1
          type: string
          description: |
            It can be ISO-4217 Currency alphabetic code for real currencies or any code for other entities created as Currency in the system
            This value should be provided to create Issuer for the Currency.
          example: USD
        digitalCode:
          maxLength: 12
          minLength: 1
          type: string
          description: |
            It can be ISO-4217 Currency numeric code for real currencies or any numeric code for other entities created as Currency in the system
          example: "840"
        symbol:
          maxLength: 12
          minLength: 1
          type: string
          description: Currency symbol
          example: $
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Currency name
          example: US Dollar
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Currency description
          example: US Dollar
      description: Currency
    IssuerShortDto:
      title: IssuerShortDto
      required:
      - currency
      - id
      - sn
      - symbol
      type: object
      properties:
        id:
          type: string
          description: Identifier
        sn:
          maxLength: 255
          minLength: 1
          type: string
          description: Unique code (SN prefix)
        currency:
          type: string
          description: Currency code
        symbol:
          type: string
          description: Currency symbol
      description: Issuer's data
    ProductCurrencyDto:
      title: ProductCurrencyDto
      required:
      - currency
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyDto'
        minAmount:
          type: number
          description: Minimal amount for purchase in this currency
        maxAmount:
          type: number
          description: Maximum amount for purchase in this currency
      description: Currency available to be paid for Product
    ProductDto:
      title: ProductDto
      required:
      - category
      - currencies
      - description
      - externalId
      - gateProviderId
      - icon
      - id
      - name
      - visible
      type: object
      properties:
        id:
          type: string
          description: Product identifier
        externalId:
          type: string
          description: Product external identifier
        name:
          type: string
          description: Name
        description:
          type: string
          description: Description
        category:
          type: string
          description: Product's category
          enum:
          - MOBILE
          - INTERNET_TV
          - SIP
          - COMMUNAL
          - BANK
          - WEB_MONEY
          - ENTERTAINMENT
          - OTHER
        icon:
          type: string
          description: Icon URL
        gateProviderId:
          type: string
          description: Gate provider identifier
        visible:
          type: boolean
          description: Indicate that product should be shown to user
        currencies:
          type: array
          description: Currencies available to perform a purchase
          items:
            $ref: '#/components/schemas/ProductCurrencyDto'
      description: Gate product information
    PurchaseTemplateDto:
      title: PurchaseTemplateDto
      description: Representation of purchase template
      allOf:
      - $ref: '#/components/schemas/CommonTemplateDto'
      - required:
        - coin
        - optionName
        - productDto
        type: object
        properties:
          productDto:
            $ref: '#/components/schemas/ProductDto'
          optionName:
            type: string
            description: Option name
          coin:
            $ref: '#/components/schemas/CoinDto'
    ReplacePINRequest:
      title: ReplacePINRequest
      required:
      - active
      - newPin
      type: object
      properties:
        oldPin:
          type: string
          description: Old PIN value. Null in case of setting up a new PIN
        newPin:
          type: string
          description: New PIN value.
        active:
          type: boolean
          description: Whether new PIN must be active
      description: Request to create a new pin or replace an existing one
    MasterPINDto:
      title: MasterPINDto
      required:
      - active
      - createdAt
      - updatedAt
      type: object
      properties:
        createdAt:
          type: string
          description: When PIN was created
          format: date-time
        updatedAt:
          type: string
          description: When PIN was modified
          format: date-time
        active:
          type: boolean
          description: Whether PIN is active
      description: Information about master PIN
    ViewMasterPINResp:
      title: ViewMasterPINResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        pin:
          $ref: '#/components/schemas/MasterPINDto'
      description: Response to master PIN viewing request
    SetCallbackSettingsReq:
      title: SetCallbackSettingsReq
      required:
      - active
      - callbackUrl
      - trustAllCertificates
      type: object
      properties:
        trustAllCertificates:
          type: boolean
          description: Whether trust all certificates while performing a `callbackUrl`
            call
        callbackUrl:
          maxLength: 255
          minLength: 0
          type: string
          description: Where to send callbacks
        active:
          type: boolean
          description: Whether callbacks sending is enabled
      description: Request to create or update merchant's callback settings
    CallbackSettingsDto:
      title: CallbackSettingsDto
      required:
      - active
      - callbackUrl
      - secretCode
      - trustAllCertificates
      type: object
      properties:
        secretCode:
          type: string
          description: Secret code - used to create and verify callback signature
        trustAllCertificates:
          type: boolean
          description: Whether trust all certificates while performing a `callbackUrl`
            call
        callbackUrl:
          type: string
          description: Where to send callbacks
        active:
          type: boolean
          description: Whether callbacks sending is enabled
      description: Callback settings
    CallbackSettingsResp:
      title: CallbackSettingsResp
      required:
      - callbackSettings
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        callbackSettings:
          $ref: '#/components/schemas/CallbackSettingsDto'
      description: Response for callback settings modification request
    ConstraintViolationsResp:
      title: ConstraintViolationsResp
      allOf:
      - $ref: '#/components/schemas/FailureResponse'
      - required:
        - errors
        type: object
        properties:
          errors:
            type: array
            description: List of errors
            items:
              $ref: '#/components/schemas/ConstraintViolationDto'
    CreatedResponse:
      title: CreatedResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - created
        message:
          type: string
          description: Response message
      description: Created response
      example:
        status: created
        message: Request created
    FailureResponse:
      title: FailureResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - fail
        message:
          type: string
          description: Response message
        identifier:
          type: string
          description: Identifier
        mdcId:
          type: string
          description: Mapped Diagnostic Context (MDC) identifier
        code:
          type: string
          description: Exception code
    UnauthorizedResponse:
      title: UnauthorizedResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - fail
        message:
          type: string
          description: Response message
        mdcId:
          type: string
          description: Mapped Diagnostic Context (MDC) identifier
        code:
          type: string
          description: Exception code
      description: Unauthorized response
      example:
        status: fail
        message: Invalid credentials
        mdcId: NlY0HPjVO6jAJJQ8
        code: exception.invalid_login_or_pass
    ForbiddenResponse:
      title: ForbiddenResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - fail
        message:
          type: string
          description: Response message
        mdcId:
          type: string
          description: Mapped Diagnostic Context (MDC) identifier
      description: Forbidden response
      example:
        status: fail
        message: Operation forbidden
        mdcId: DhrjMF3QQXYj5Fwc
    NotFoundResponse:
      title: NotFoundResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - fail
        code:
          type: string
          description: Exception code
        mdcId:
          type: string
          description: Mapped Diagnostic Context (MDC) identifier
      description: Not Found response
      example:
        status: fail
        code: exception.coin.not_found
        mdcId: ztQGGyWfqc7fy4rJ
    ConflictResponse:
      title: ConflictResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - fail
        message:
          type: string
          description: Response message
        identifier:
          type: string
          description: Identifier
        mdcId:
          type: string
          description: Mapped Diagnostic Context (MDC) identifier
        code:
          type: string
          description: Exception code
      description: Conflict response
      example:
        status: fail
        code: exception.bank_catalog.already_exists
        mdcId: MdeaCEoaI0qUw5tQ
    InternalServerErrorResponse:
      title: InternalServerErrorResponse
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - fail
        mdcId:
          type: string
          description: Mapped Diagnostic Context (MDC) identifier
      description: Internal server error response
      example:
        status: fail
        mdcId: H7kKrCfKakdoh6QZ
    PermissionsUpdateReq:
      title: PermissionsUpdateReq
      required:
      - permissions
      type: object
      properties:
        permissions:
          uniqueItems: true
          type: array
          description: List of role permissions
          items:
            type: string
      description: Request change to role permissions
    OrganizationPermissionConfigDto:
      title: OrganizationPermissionConfigDto
      required:
      - creationMethods
      - organizationType
      - permissions
      - role
      - rolesUnderManagement
      - selfRegistrationAllowed
      - userManagementAllowed
      type: object
      properties:
        role:
          $ref: '#/components/schemas/RoleGroupDto'
        permissions:
          type: array
          description: List of role permissions
          items:
            type: string
        organizationType:
          type: string
          description: Organization type
        creationMethods:
          uniqueItems: true
          type: array
          description: Creation methods
          items:
            type: string
            enum:
            - CREATE_NEW_ORGANIZATION
            - ATTACH_SINGLE
            - ATTACH_MULTIPLE
        rolesUnderManagement:
          uniqueItems: true
          type: array
          description: Roles under management
          items:
            type: string
        selfRegistrationAllowed:
          type: boolean
          description: Self registration
        userManagementAllowed:
          type: boolean
          description: User management allowed
      description: Organization settings config
    OrganizationSettingsResp:
      title: OrganizationSettingsResp
      required:
      - settings
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        settings:
          type: array
          description: List of organization settings
          items:
            $ref: '#/components/schemas/OrganizationPermissionConfigDto'
      description: Response to role groups viewing request
    RoleGroupDto:
      title: RoleGroupDto
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: Code of role group
      description: Role group information
    BaseFilterTemplateDto:
      title: BaseFilterTemplateDto
      required:
      - name
      - parameters
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The filter template name
        parameters:
          type: object
          additionalProperties:
            type: object
            description: Filter parameter
          description: Filter parameters
      description: Base filter template
    ViewFilterTemplateDto:
      title: ViewFilterTemplateDto
      required:
      - name
      - parameters
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The filter template name
        parameters:
          type: object
          additionalProperties:
            type: object
            description: Filter parameter
          description: Filter parameters
        id:
          type: string
          description: Filter template identifier
        urlPath:
          type: string
          description: The url path without domain where filter is used
      description: View filter template DTO
    ViewFilterTemplateResp:
      title: ViewFilterTemplateResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        filterTemplate:
          $ref: '#/components/schemas/ViewFilterTemplateDto'
      description: Response for view filter template
    EnvironmentVariableCreateReq:
      title: EnvironmentVariableCreateReq
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    UpdateGateCommissionProviderRuleReq:
      title: UpdateGateCommissionProviderRuleReq
      required:
      - beginDate
      - direction
      type: object
      properties:
        beginDate:
          type: string
          description: Begin date of the period of commission rule
          format: date-time
        endDate:
          type: string
          description: End date of the period of commission rule
          format: date-time
        direction:
          type: string
          description: Commission direction
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Active status
        payToolType:
          maxLength: 50
          minLength: 0
          type: string
          description: Pay tool type
        payToolPresent:
          type: boolean
          description: Pay tool present
      description: Request to update commission product rule
    CommissionValueDto:
      title: CommissionValueDto
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the commission
          enum:
          - zero
          - percent
          - fixed
          - greater_of_fixed_or_percent
          - lesser_of_fixed_or_percent
          - fixed_and_percent
        valuePercent:
          minimum: 0.00010
          exclusiveMinimum: false
          type: number
          description: Percentage value of the commission (NULL for zero and fixed
            types). 0.01 value means 1%.
        valueFixed:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Fixed value of the commission (NULL for zero and percent types)
      description: Information about commission value
    CreateInternalCommissionRuleReq:
      title: CreateInternalCommissionRuleReq
      required:
      - beginDate
      - direction
      - endDate
      type: object
      properties:
        beginDate:
          type: string
          description: Begin date of the period of commission rule
          format: date-time
        endDate:
          type: string
          description: End date of the period of commission rule
          format: date-time
        direction:
          type: string
          description: |
            Who pays the commission.
            IN means it will be receiver (dest coin).
            OUT means it will be sender (src coin).
            SHARED means that commission will be halved and shared between sender (src coin) and receiver (dest coin).
          enum:
          - IN
          - OUT
          - SHARED
        active:
          type: boolean
          description: Active status
      description: Request to create internal commission rule
    CreateInternalCommissionRuleConditionReq:
      title: CreateInternalCommissionRuleConditionReq
      required:
      - beginAmount
      - commission
      - endAmount
      type: object
      properties:
        beginAmount:
          type: number
          description: Begin amount (included) for the commission rule condition
        endAmount:
          type: number
          description: End amount (included) for the commission rule condition
        commission:
          $ref: '#/components/schemas/CommissionValueDto'
      description: Request to create internal commission rule condition
    ViewInternalCommissionRuleReq:
      title: ViewInternalCommissionRuleReq
      required:
      - date
      type: object
      properties:
        date:
          type: string
          description: Date of commission rule
          format: date-time
        filterCriteria:
          type: string
          description: |
            Filter criteria to view rules.
            FOR_DATE is default value to obtain all rules for current date: (beginDate is before (include) required date and endDate is NULL or after required date).
            BEFORE_DATE is value to obtain all rules before date: (beginDate is before (exclude) required date).
            FROM_DATE is value to obtain all rules for from date (beginDate is before (include) or after (include) required date and endDate is NULL or after required date).
          enum:
          - FOR_DATE
          - BEFORE_DATE
          - FROM_DATE
      description: Request to view internal commission rule
    ViewInternalCommissionRuleResp:
      title: ViewInternalCommissionRuleResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of internal commission rules
          items:
            $ref: '#/components/schemas/InternalCommissionRuleDto'
      description: Response to internal commission rules viewing request
    InternalCommissionRuleDto:
      title: InternalCommissionRuleDto
      type: object
      properties:
        id:
          type: string
          description: Identifier
        beginDate:
          type: string
          description: Begin date of the period when rule starts to be available
          format: date-time
        endDate:
          type: string
          description: End date of the period when rule stops to be available
          format: date-time
        feeDirection:
          type: string
          description: Direction of commission
          enum:
          - IN
          - OUT
          - SHARED
        active:
          type: boolean
          description: Active status
        conditions:
          type: array
          description: List of internal commission rule conditions
          items:
            $ref: '#/components/schemas/InternalCommissionRuleConditionDto'
      description: internal commission rule information
    InternalCommissionRuleConditionDto:
      title: InternalCommissionRuleConditionDto
      type: object
      properties:
        id:
          type: string
          description: Identifier
        beginAmount:
          type: number
          description: Begin amount (included) for the commission rule condition
        endAmount:
          type: number
          description: End amount (included) for the commission rule condition
        value:
          $ref: '#/components/schemas/CommissionValueDto'
      description: Internal commission rule condition information
    GateCommissionProviderRuleConditionDto:
      title: GateCommissionProviderRuleConditionDto
      type: object
      properties:
        id:
          type: string
          description: Identifier
        beginAmount:
          type: number
          description: Begin amount (included) for the commission rule condition
        endAmount:
          type: number
          description: End amount (included) for the commission rule condition
        value:
          $ref: '#/components/schemas/CommissionValueDto'
      description: Provider commission rule condition information
    GateCommissionProviderRuleDto:
      title: GateCommissionProviderRuleDto
      type: object
      properties:
        id:
          type: string
          description: Identifier
        txType:
          type: string
          description: Gate transaction type
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
        beginDate:
          type: string
          description: Begin date of the period when rule starts to be available
          format: date-time
        endDate:
          type: string
          description: End date of the period when rule stops to be available
          format: date-time
        feeDirection:
          type: string
          description: Direction of commission
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Active status
        payToolType:
          type: string
          description: Pay tool type
        payToolPresent:
          type: boolean
          description: Pay tool present
        conditions:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/GateCommissionProviderRuleConditionDto'
          description: Map of gate commission product rule conditions
      description: Provider commission product rule information
    ViewGateCommissionProviderRuleResp:
      title: ViewGateCommissionProviderRuleResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of gate commission provider rules
          items:
            $ref: '#/components/schemas/GateCommissionProviderRuleDto'
      description: Response to gate commission provider rule viewing request
    UpdateGateCommissionProductRuleReq:
      title: UpdateGateCommissionProductRuleReq
      required:
      - beginDate
      - direction
      type: object
      properties:
        beginDate:
          type: string
          description: Begin date of the period of commission rule
          format: date-time
        endDate:
          type: string
          description: End date of the period of commission rule
          format: date-time
        direction:
          type: string
          description: Commission direction
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Active status
        payToolType:
          maxLength: 50
          minLength: 0
          type: string
          description: Pay tool present
        payToolPresent:
          type: boolean
          description: Pay tool type
      description: Request to update commission product rule
    GateCommissionProductRuleConditionDto:
      title: GateCommissionProductRuleConditionDto
      type: object
      properties:
        id:
          type: string
          description: Identifier
        beginAmount:
          type: number
          description: Begin amount (included) for the commission rule condition
        endAmount:
          type: number
          description: End amount (included) for the commission rule condition
        value:
          $ref: '#/components/schemas/CommissionValueDto'
      description: Product commission rule condition information
    GateCommissionProductRuleDto:
      title: GateCommissionProductRuleDto
      type: object
      properties:
        id:
          type: string
          description: Identifier
        product:
          $ref: '#/components/schemas/ProductDto'
        beginDate:
          type: string
          description: Begin date of the period when rule starts to be available
          format: date-time
        endDate:
          type: string
          description: End date of the period when rule stops to be available
          format: date-time
        feeDirection:
          type: string
          description: Direction of commission
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Active status
        payToolType:
          type: string
          description: Pay tool type
        payToolPresent:
          type: boolean
          description: Pay tool present
        conditions:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/GateCommissionProductRuleConditionDto'
          description: Map of gate commission product rule conditions
      description: Product commission product rule information
    ViewGateCommissionProductRuleResp:
      title: ViewGateCommissionProductRuleResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of gate commission product rules
          items:
            $ref: '#/components/schemas/GateCommissionProductRuleDto'
      description: Response to gate commission product rule viewing request
    OrganizationShortDto:
      title: OrganizationShortDto
      required:
      - contract_info
      - id
      - identificationStatus
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: Identifier of organisation
          example: 7cf1f309-09cd-4eda-8b2c-682bf64fd7cd
        type:
          type: string
          description: Organisation type
          example: individual
          enum:
          - individual
          - merchant
          - support
          - cash_desk
          - system
        name:
          type: string
          description: Organisation name specified in the organisation profile
          example: Tony Stark
        organizationStatus:
          $ref: '#/components/schemas/OrganizationStatus'
        contract_info:
          $ref: '#/components/schemas/ShortContractDto'
      description: Short information about organization
    ShortContractDto:
      title: ShortContractDto
      required:
      - id
      - name
      - personType
      type: object
      properties:
        id:
          type: string
          description: Identifier of contract
          example: 5bc369de-4fee-4d72-b5e5-73769adeec4e
        personType:
          $ref: '#/components/schemas/PersonType'
        name:
          type: string
          description: Name of contract
          example: standard contract for org individual
    UserShortDto:
      title: UserShortDto
      required:
      - id
      - name
      - profileOrganizationId
      type: object
      properties:
        id:
          type: string
          description: Identifier of ths user
          example: b97e5cad-e8de-4306-89e1-824d0bed55da
        name:
          type: string
          description: User name specified in the user profile
          example: Tony Stark
        profileOrganizationId:
          type: string
          description: Identifier of user organization
          example: 13f9aa5d-2ca2-44f3-b07f-7769b620ca42
    WorkingDayDto:
      title: WorkingDayDto
      type: object
      properties:
        id:
          type: string
          description: Identifier of working day
          example: 13f9aa5d-2ca2-44f3-b07f-7769b620ca42
        cashDesk:
          $ref: '#/components/schemas/OrganizationShortDto'
        cashier:
          $ref: '#/components/schemas/UserShortDto'
        status:
          type: string
          description: Working day status
          example: opened
          enum:
          - opened
          - requested_to_close
          - closed
        createdAt:
          type: string
          description: Date of working day opening
          format: date-time
          example: 2023-03-21T16:53:40.969Z
        start:
          type: string
          description: Calendar beginning of working day
          format: date-time
          example: 2023-03-21T00:00:00Z
      description: Information about the working day
    WorkingDayProcessResp:
      title: WorkingDayProcessResp
      required:
      - workingDay
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          workingDay:
            $ref: '#/components/schemas/WorkingDayDto'
    ViewWorkingDayForClosingReq:
      title: ViewWorkingDayForClosingReq
      required:
      - filter
      - sort
      description: Request to view working days requested for closing
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/WorkingDayForClosingFilterDto'
          sort:
            $ref: '#/components/schemas/WorkingDayForClosingSortDto'
    ViewWorkingDayResp:
      title: ViewWorkingDayResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of working days
            items:
              $ref: '#/components/schemas/WorkingDayDto'
    WorkingDayForClosingFilterDto:
      title: WorkingDayForClosingFilterDto
      type: object
      properties:
        status:
          $ref: '#/components/schemas/WorkingDayStatus'
        createdAt:
          type: string
          description: Creation date
          format: date-time
      description: Filter settings
    WorkingDayStatus:
      type: string
      description: |
        Working day status.
        The cashier opening and closing working day.
        Accountant confirms the closing of the working day.
      enum:
      - opened
      - requested_to_close
      - closed
    WorkingDayForClosingSortDto:
      title: WorkingDayForClosingSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date of working day
          enum:
          - asc
          - desc
      description: Sort settings
    AcceptClosingWorkingDayReq:
      title: AcceptClosingWorkingDayReq
      required:
      - organizationId
      type: object
      properties:
        organizationId:
          type: string
          description: Organization id
      description: Request to accept a working day
    CreateUserReq:
      title: CreateUserReq
      required:
      - login
      - role
      type: object
      properties:
        login:
          type: string
          description: User login (phone number or email)
          example: accountant+1@sdkfinance.tech
        role:
          type: string
          description: User role
          example: accountant
        organizationId:
          type: string
          description: |
            Organization this user will be linked to.
            System organisation should be provided to create user with service role.
            Do not provide this field to create user with business role, it will be created along with the user and user will be linked to the created organisation.
          example: 918db24b-724f-4621-8f95-bf54ec29626d
      discriminator:
        propertyName: role
    ContactDto:
      title: ContactDto
      required:
      - countryCode
      - email
      - emailVerified
      - phoneNumber
      - phoneVerified
      type: object
      properties:
        phoneNumber:
          type: string
          description: User phone number specified in user credentials
          example: ""
        phoneVerified:
          type: boolean
          description: Shows if phone number is verified
          example: true
        email:
          type: string
          description: User email specified in user credentials
        emailVerified:
          type: boolean
          description: Shows if email is verified
          example: true
        countryCode:
          $ref: '#/components/schemas/CountryCode'
      description: User credentials information
    CreateUserResp:
      title: CreateUserResp
      required:
      - login
      - user
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          user:
            $ref: '#/components/schemas/UserDto'
          login:
            type: string
            description: User login credential (email or phone)
            example: individual@sdkfinance.com
    OrganizationMemberDto:
      title: OrganizationMemberDto
      required:
      - organization
      - role
      type: object
      properties:
        id:
          type: string
          description: Identifier of organisation member
          example: 7653779a-8c14-4932-b536-1075e97041f5
        role:
          type: string
          description: User role
          example: individual
        organization:
          $ref: '#/components/schemas/OrganizationShortDto'
      description: Information about user as a member of organization
    UserDto:
      title: UserDto
      required:
      - active
      - banned
      - contact
      - createdAt
      - id
      - members
      - name
      type: object
      properties:
        id:
          type: string
          description: Internal user identifier
          example: cca1fe9b-4e08-450c-840a-49dcefd7b126
        name:
          type: string
          description: User name specified in the user profile
          example: Tony Stark
        createdAt:
          type: string
          description: Date when user has been registered
          format: date-time
          example: 2021-01-28T18:12:48.985Z
        active:
          type: boolean
          description: Shows if user is active
          example: true
        banned:
          type: boolean
          description: Shows if user is banned. User can be banned if wrong password
            is specified for login more than the defined number of times.
          example: false
        banExpiryDate:
          type: string
          description: |
            If user was banned it will be unbanned automatically after the defined period. This parameter shows when user will be unbanned.
            <br>For not banned users this parameter is not returned.
          format: date-time
        contact:
          $ref: '#/components/schemas/ContactDto'
        members:
          type: array
          description: User membership information
          items:
            $ref: '#/components/schemas/OrganizationMemberDto'
      description: Information about user
    ViewUserResp:
      title: ViewUserResp
      required:
      - user
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          user:
            $ref: '#/components/schemas/UserDto'
    UserFilterDto:
      title: UserFilterDto
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          description: User identifiers
          items:
            type: string
            example: cca1fe9b-4e08-450c-840a-49dcefd7b126
        email:
          type: string
          description: Email or part of it
          example: individual@sdkfinance.tech
        emailVerified:
          type: boolean
          description: Whether phone is verified
          example: true
        phone:
          type: string
          description: Phone number or part of it
          example: "1111111"
        phoneVerified:
          type: boolean
          description: Whether phone is verified
          example: true
        text:
          type: string
          description: "Any text fragment present in phone, email or profile name"
          example: individual
        banned:
          type: boolean
          description: Whether user is banned
          example: false
        active:
          type: boolean
          description: Whether user is active
          example: true
        roles:
          uniqueItems: true
          type: array
          description: Roles of the user
          items:
            type: string
            example: individual
        organizationIds:
          uniqueItems: true
          type: array
          description: User's organization ids
          items:
            type: string
            example: 61b065de-58ef-4959-ab5e-4a2d75ab6564
        identificationStatus:
          $ref: '#/components/schemas/OrganizationStatus'
      description: Filter settings
    OrganizationStatus:
      type: string
      description: Organization status
      example: approved
      enum:
      - none
      - pending
      - approved
      - declined
    UserSortDto:
      title: UserSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        active:
          type: string
          description: Activeness
          enum:
          - asc
          - desc
      description: Sort settings
    ViewUsersReq:
      title: ViewUsersReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/UserFilterDto'
          sort:
            $ref: '#/components/schemas/UserSortDto'
    ViewUsersResp:
      title: ViewUsersResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            items:
              $ref: '#/components/schemas/UserDto'
    ViewActionsSortDto:
      title: ViewActionsSortDto
      type: object
      properties:
        dateCreated:
          type: string
          description: Creation date of AH product purchase
          enum:
          - asc
          - desc
      description: Sort settings
    ViewFilteredActionsDto:
      title: ViewFilteredActionsDto
      type: object
      properties:
        actionIds:
          type: array
          description: Actions ids
          items:
            type: string
        performedAtFrom:
          type: string
          description: Interval beginning of creation date
          format: date-time
        performedAtTo:
          type: string
          description: Interval ending of creation date
          format: date-time
        comment:
          type: string
          description: What to search in comments
        userIds:
          type: array
          description: User id`s
          items:
            type: string
        userIps:
          type: array
          description: User ip`s
          items:
            type: string
        hosts:
          type: array
          description: User hosts
          items:
            type: string
      description: View actions filter settings
    ViewFilteredActionsReq:
      title: ViewFilteredActionsReq
      required:
      - filter
      - sort
      description: Request to view filtered actions
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ViewFilteredActionsDto'
          sort:
            $ref: '#/components/schemas/ViewActionsSortDto'
    RequestInfoDto:
      title: RequestInfoDto
      required:
      - host
      - userAgent
      - userIp
      type: object
      properties:
        host:
          type: string
          description: Host IP
        userAgent:
          type: string
          description: Application or client that sends request
        userIp:
          type: string
          description: User IP
      description: Request info
    ActionDto:
      title: ActionDto
      required:
      - actionId
      - comment
      - performedAt
      - requestInfo
      - userId
      type: object
      properties:
        actionId:
          type: string
          description: Action identifier
        comment:
          type: string
          description: Comment in action
        performedAt:
          type: string
          description: Date of action creation
          format: date-time
        requestInfo:
          $ref: '#/components/schemas/RequestInfoDto'
        userId:
          type: string
          description: User identifier
      description: Action reverse object dto
    GetUserActionsResp:
      title: GetUserActionsResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of actions
            items:
              $ref: '#/components/schemas/ActionDto'
    CreateUserNoteReq:
      title: CreateUserNoteReq
      required:
      - note
      - userId
      type: object
      properties:
        userId:
          type: string
          description: User id
        note:
          maxLength: 255
          minLength: 1
          type: string
          description: Note about user
      description: Request for creating note about user
    UserNoteDto:
      title: UserNoteDto
      required:
      - createdAt
      - id
      - note
      type: object
      properties:
        id:
          type: string
          description: Note id
        note:
          type: string
          description: Note about user
        createdAt:
          type: string
          description: Date of create
          format: date-time
      description: Contains note about user
    UserNoteResp:
      title: UserNoteResp
      required:
      - noteDto
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        noteDto:
          $ref: '#/components/schemas/UserNoteDto'
      description: Response contains note about user
    CreateUserMessageReq:
      title: CreateUserMessageReq
      required:
      - message
      - userId
      type: object
      properties:
        userId:
          type: string
          description: User id
        message:
          maxLength: 255
          minLength: 1
          type: string
          description: Message
      description: Request for creating message to user
    UserMessageDto:
      title: UserMessageDto
      required:
      - createdAt
      - email
      - message
      - phone
      - userId
      type: object
      properties:
        userId:
          type: string
          description: User id
        message:
          type: string
          description: Message to user
        email:
          type: string
          description: Mail to which the message was sent
        phone:
          type: string
          description: Phone to which the message was sent
        createdAt:
          type: string
          description: Date of create
          format: date-time
      description: Contains user message
    UserMessageResp:
      title: UserMessageResp
      required:
      - messageDto
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        messageDto:
          $ref: '#/components/schemas/UserMessageDto'
      description: Response contains message to user
    TransferReq:
      title: TransferReq
      required:
      - amount
      - paymentTool
      type: object
      properties:
        paymentTool:
          $ref: '#/components/schemas/PaymentToolDto'
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount of transfer
        description:
          maxLength: 4000
          minLength: 0
          type: string
          description: Optional transfer description
      description: Request to execute transfer
    PaymentToolDto:
      title: PaymentToolDto
      required:
      - destValue
      - srcValue
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            Payment tool type.
            COIN means that srcValue and destValue are coins.
            SMART_CARD means that srcValue is smartCard id and destValue is smartCard number (dashed, spaced or not).
          enum:
          - COIN
          - SMART_CARD
        srcValue:
          type: string
          description: Value of source payment tool
        destValue:
          type: string
          description: Value of destination payment tool
      description: Payment tool
    BusinessProcessDto:
      title: BusinessProcessDto
      required:
      - categoryCode
      - categoryImageLink
      - categoryName
      - children
      - createdAt
      - id
      - requestIdentifier
      - requestStatus
      - status
      - transactions
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: string
          description: Process identifier
        createdAt:
          type: string
          description: When process was created
          format: date-time
        updatedAt:
          type: string
          description: Last time process was updated
          format: date-time
        type:
          type: string
          description: Type of business process
        status:
          type: string
          enum:
          - limited
          - pending
          - declined
          - processed
          - error
          - rejected
        categoryCode:
          type: string
          description: Category code
        categoryName:
          type: string
          description: Category name
        categoryImageLink:
          type: string
          description: Category image Id
        requestIdentifier:
          type: integer
          description: Request identifier
          format: int32
        requestStatus:
          type: string
          description: Current request status
          enum:
          - limited
          - pending
          - timer
          - approved_by_payroll
          - approved_by_accountant
          - approved_by_cfo
          - requires_confirmation
          - declined
          - rejected
          - processed
          - error
        transactions:
          type: array
          description: Performed transactions
          items:
            $ref: '#/components/schemas/TransactionDto'
        children:
          type: array
          description: Child processes
          items:
            $ref: '#/components/schemas/BusinessProcessDto'
        errorMessage:
          type: string
          description: "Error message, null if process was not failed"
      description: Business process data. Some processes can have additional data
        included.
    ClientTransactionProcessDto:
      title: ClientTransactionProcessDto
      allOf:
      - $ref: '#/components/schemas/BusinessProcessDto'
      - required:
        - amount
        - commission
        - description
        - from
        - netAmount
        - paymentToolDetails
        - recipient
        - sender
        - to
        type: object
        properties:
          amount:
            type: number
            description: Amount
          commission:
            type: number
            description: Commission Fee
          netAmount:
            type: number
            description: Net amount
          operationAmountDetails:
            $ref: '#/components/schemas/OperationAmountDetailsDto'
          paymentToolDetails:
            $ref: '#/components/schemas/PaymentToolDetailsDto'
          from:
            $ref: '#/components/schemas/TransactionCoinDto'
          to:
            $ref: '#/components/schemas/TransactionCoinDto'
          description:
            type: string
            description: description
          sender:
            $ref: '#/components/schemas/ParticipantDto'
          recipient:
            $ref: '#/components/schemas/ParticipantDto'
    OperationAmountDetailsDto:
      title: OperationAmountDetails
      required:
      - recipientFee
      - recipientGrossAmount
      - recipientNetAmount
      - senderFee
      - senderGrossAmount
      - senderNetAmount
      properties:
        senderGrossAmount:
          type: number
          description: Sender gross amount
        senderNetAmount:
          type: number
          description: Sender net amount
        senderFee:
          type: number
          description: Sender fee
        recipientGrossAmount:
          type: number
          description: Recipient gross amount
        recipientNetAmount:
          type: number
          description: Recipient net amount
        recipientFee:
          type: number
          description: Recipient fee
      description: Operation amount details
    PaymentToolDetailsDto:
      title: PaymentToolDetails
      required:
      - currency
      - destId
      - destValue
      - recipientFullName
      - srcId
      - srcValue
      - symbol
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            Payment tool type.
            COIN means that srcValue and destValue are coins.
            SMART_CARD means that srcValue is smartCard id and destValue is smartCard number (dashed, spaced or not).
          enum:
          - COIN
          - SMART_CARD
        srcValue:
          type: string
          description: Value of source payment tool
        srcId:
          type: string
          description: Id of source payment tool
        destValue:
          type: string
          description: Value of destination payment tool
        destId:
          type: string
          description: Id of destination payment tool
        currency:
          type: string
          description: Currency code
        symbol:
          type: string
          description: Currency symbol
        recipientFullName:
          type: string
          description: Recipient full name
      description: Payment tool details
    BankProcessDto:
      title: BankProcessDto
      allOf:
      - $ref: '#/components/schemas/BusinessProcessDto'
      - required:
        - bankAccountNumber
        - bankInfo
        - cashAmount
        - cashCommission
        - cashNetAmount
        - clientCoin
        - fullName
        - iban
        type: object
        properties:
          bankAccountNumber:
            type: number
            description: Bank account number
          iban:
            type: string
            description: IBAN
          bankInfo:
            $ref: '#/components/schemas/BankDto'
          fullName:
            type: string
            description: Recipient full name
          cashAmount:
            type: number
            description: Cash amount
          cashCommission:
            type: number
            description: Cash commission
          cashNetAmount:
            type: number
            description: Cash net amount
          clientCoin:
            $ref: '#/components/schemas/TransactionCoinDto'
    BankDto:
      title: BankDto
      type: object
      properties:
        address:
          type: string
          description: |
            Bank address: street and house number
          example: 48 Tomasikova
        bankId:
          type: string
          description: |
            Internal Bank identifier which should be used in any API when `bankId` should be provided
          example: 3a16cb2e-422d-4f30-8b46-ee4e89da3b3a
        bic:
          type: string
          description: Bank Identifier Code (BIC)
          example: GIBASKBX
        city:
          type: string
          description: |
            Bank address: city
          example: Bratislava
        country:
          type: string
          description: |
            Bank address: country name
          example: Slovakia
        name:
          type: string
          description: Bank name
          example: Slovenska Sporitelna
        swift:
          type: string
          description: Bank SWIFT code
          example: GIBASKBX
        zipCode:
          type: string
          description: |
            Bank address: zip code
          example: "83237"
    BusinessProcessResp:
      title: BusinessProcessResp
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - required:
        - process
        type: object
        properties:
          process:
            $ref: '#/components/schemas/BusinessProcessDto'
    BusinessProcessClientTransactionResp:
      title: BusinessProcessClientTransactionResp
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - required:
        - process
        type: object
        properties:
          process:
            $ref: '#/components/schemas/ClientTransactionProcessDto'
    BusinessProcessBankResp:
      title: BusinessProcessBankResp
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - required:
        - process
        type: object
        properties:
          process:
            $ref: '#/components/schemas/BankProcessDto'
    TransactionCoinDto:
      title: TransactionCoinDto
      required:
      - issuer
      - name
      - organizationId
      - organizationName
      - serial
      - technical
      - type
      type: object
      properties:
        serial:
          type: string
          description: Unique serial number
        organizationId:
          type: string
          description: Coin owner's identifier
        organizationName:
          type: string
          description: Coin owner's name
        technical:
          type: boolean
          description: Whether coin is technical
        type:
          type: string
          description: Type of coin
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
        issuer:
          $ref: '#/components/schemas/TransactionIssuerDto'
        name:
          type: string
          description: Coin name
      description: Coin data
    TransactionDto:
      title: TransactionDto
      required:
      - id
      - issuer
      - parentId
      - performedAt
      - type
      type: object
      properties:
        id:
          type: string
          description: Identifier
        parentId:
          type: string
          description: "Identifier of parent transaction (example: for commission\
            \ transaction it will identifier of transfer transaction)"
        type:
          type: string
          description: Transaction type
          enum:
          - transfer
          - split
          - merge
          - issue
          - balance
          - redeem
          - commission
          - authorization
          - commission_authorization
          - capture
          - commission_capture
          - reversal
          - commission_reversal
          - hold
        from:
          $ref: '#/components/schemas/TransactionCoinDto'
        to:
          $ref: '#/components/schemas/TransactionCoinDto'
        amount:
          type: number
          description: Amount
        performedAt:
          type: string
          description: When transaction was executed
          format: date-time
        issuer:
          $ref: '#/components/schemas/TransactionIssuerDto'
      description: Atomic transaction data
    TransactionIssuerDto:
      title: TransactionIssuerDto
      required:
      - currency
      - id
      - sn
      - symbol
      type: object
      properties:
        id:
          type: string
          description: Identifier
        sn:
          type: string
          description: SN prefix
        currency:
          type: string
          description: Currency code
        symbol:
          type: string
          description: Currency symbol
      description: Issuer's information
    PushResultResp:
      title: PushResultResp
      required:
      - commissionAmountPush
      - issuer
      - recipientAmountPush
      - senderAmountPush
      - transactionAmount
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        transactionAmount:
          type: number
          description: Transaction amount
        senderAmountPush:
          type: number
          description: Increase of the sender coin balance
        recipientAmountPush:
          type: number
          description: Increase of the recipient coin balance
        commissionAmountPush:
          type: number
          description: Increase of the commission coin balance
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
      description: Response to commission calculation request
    ExtendedPushResultResp:
      title: ExtendedPushResultResp
      description: Extended response to commission calculation request
      allOf:
      - $ref: '#/components/schemas/PushResultResp'
      - required:
        - paymentToolDetails
        type: object
        properties:
          paymentToolDetails:
            $ref: '#/components/schemas/PaymentToolDetailsDto'
    ConfirmProcessReq:
      title: ConfirmProcessReq
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: "Confirmation value (OTP, PIN etc), depends on type of confirmation"
      description: Request to confirm a transaction
    TransactionSortDto:
      title: TransactionSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        status:
          type: string
          description: Status
          enum:
          - asc
          - desc
        type:
          type: string
          description: Type
          enum:
          - asc
          - desc
      description: Sort settings
    ViewTransactionsReq:
      title: ViewTransactionsReq
      required:
      - filter
      - sort
      description: Request to view user transactions
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/TransactionFilterDto'
          sort:
            $ref: '#/components/schemas/TransactionSortDto'
    ViewTransactionsResp:
      title: ViewTransactionsResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of business processes
            items:
              $ref: '#/components/schemas/BusinessProcessDto'
    CreateTicketReq:
      title: CreateTicketReq
      required:
      - category
      - description
      - topic
      type: object
      properties:
        category:
          type: string
          description: Ticket category
          enum:
          - GENERAL
          - FINANCIAL
          - TECHNICAL
          - ONBOARDING
          - PRODUCT
          - PAYMENT
          - CASHOUT
        topic:
          maxLength: 255
          minLength: 1
          type: string
          description: Topic
        description:
          maxLength: 10240
          minLength: 1
          type: string
          description: Description - ticket message
      description: Request to create a ticket
    CreateTicketResp:
      title: CreateTicketResp
      required:
      - ticket
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        ticket:
          $ref: '#/components/schemas/TicketDto'
      description: Response for ticket creation request
    ParticipantDto:
      title: ParticipantDto
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: Identifier of this participant
        type:
          type: string
          description: "Type of participant: user, organization or system"
          enum:
          - ORGANIZATION
          - USER
          - SYSTEM
        entityId:
          type: string
          description: Identifier of user or organization; null for case when participant
            is SYSTEM
        name:
          type: string
          description: Participant full name
        phoneNumber:
          type: string
          description: Participant phone number
        email:
          type: string
          description: Participant email
        organizationType:
          type: string
          description: Participant organization type code
        tariffPlan:
          type: string
          description: Participant organization person type
          enum:
          - base
          - standart
          - gold
          - vip
          - invest
      description: Information about participant of conversation
    TicketConversationDto:
      title: TicketConversationDto
      required:
      - id
      - initiator
      - name
      type: object
      properties:
        id:
          type: string
          description: Identifier of conversation
        name:
          type: string
          description: Name of conversation
        createdAt:
          type: string
          description: When conversation was created
          format: date-time
        initiator:
          $ref: '#/components/schemas/ParticipantDto'
      description: Information about ticket's conversation
    TicketDto:
      title: TicketDto
      required:
      - category
      - conversation
      - id
      type: object
      properties:
        id:
          type: string
          description: Identifier of ticket
        category:
          type: string
          description: Category
          enum:
          - GENERAL
          - FINANCIAL
          - TECHNICAL
          - ONBOARDING
          - PRODUCT
          - PAYMENT
          - CASHOUT
        conversation:
          $ref: '#/components/schemas/TicketConversationDto'
      description: Information about single ticket
    TicketFilterDto:
      title: TicketFilterDto
      type: object
      properties:
        id:
          type: string
          description: Identifier of the ticket
        conversationId:
          type: string
          description: Identifier of the conversation
        categories:
          uniqueItems: true
          type: array
          description: Ticket's category (one of specified)
          items:
            $ref: '#/components/schemas/TicketCategory'
        text:
          type: string
          description: "Any text entry occurred within conversation, either in conversation\
            \ name or in message body"
        initiatorType:
          $ref: '#/components/schemas/ParticipantType'
        initiatorEntityId:
          type: string
          description: "Identifier of initiator entity: User or Organization"
        createdAtFrom:
          type: string
          description: Beginning of interval for creation date
          format: date-time
        createdAtTo:
          type: string
          description: End of interval for creation date
          format: date-time
      description: Filter settings
    TicketCategory:
      type: string
      description: Ticket category
      enum:
      - GENERAL
      - FINANCIAL
      - TECHNICAL
      - ONBOARDING
      - PRODUCT
      - PAYMENT
      - CASHOUT
    TicketSortDto:
      title: TicketSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date of conversation
          enum:
          - asc
          - desc
      description: Sort settings
    ViewTicketsReq:
      title: ViewTicketsReq
      required:
      - filter
      - sort
      description: Request to view user's tickets
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/TicketFilterDto'
          sort:
            $ref: '#/components/schemas/TicketSortDto'
    ViewTicketsResp:
      title: ViewTicketsResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: Tickets
            items:
              $ref: '#/components/schemas/TicketDto'
    CreateTransferTemplateReq:
      title: CreateTransferTemplateReq
      required:
      - amount
      - description
      - name
      - reusable
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount
        description:
          type: string
          description: Description
        reusable:
          type: boolean
          description: Reusable
      description: Request to create transfer template
    CreateTransferTemplateWithPaymentToolReq:
      title: CreateTransferTemplateWithPaymentToolReq
      description: Request to create transfer template with payment tool
      allOf:
      - $ref: '#/components/schemas/CreateTransferTemplateReq'
      - required:
        - paymentTool
        type: object
        properties:
          paymentTool:
            $ref: '#/components/schemas/PaymentToolDto'
    TransferTemplateResp:
      title: TransferTemplateResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
        id:
          type: string
          description: Identifier
        name:
          type: string
          description: Name
        senderCoin:
          $ref: '#/components/schemas/CoinDto'
        recipientCoin:
          $ref: '#/components/schemas/ShortCoinDto'
        recipientPhoneNumber:
          type: string
          description: Recipient phone number
        amount:
          type: number
          description: Amount
        description:
          type: string
          description: Description
      description: Response to show transfer template data
    PaymentByTransferTemplateReq:
      title: CreateTransferTemplateReq
      type: object
      properties:
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount
      description: Request to execute payment by transfer template
    PaymentByTransferTemplateResp:
      title: PaymentByTransferTemplateResp
      required:
      - businessProcessId
      - businessProcessStatus
      - message
      - status
      - templateId
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
        templateId:
          type: string
          description: Identifier
        businessProcessId:
          type: string
          description: Identifier
        businessProcessStatus:
          type: string
          enum:
          - limited
          - pending
          - declined
          - processed
          - error
          - rejected
      description: Response to show result data of execution payment by transfer template
    ShortCoinDto:
      title: ShortCoinDto
      required:
      - active
      - issuer
      - serial
      - type
      type: object
      properties:
        serial:
          type: string
          description: Unique serial number
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        active:
          type: boolean
          description: Whether coin is active
        type:
          type: string
          description: Type of coin
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
      description: Information about coin
    TransferTemplateFilterDto:
      title: TransferTemplateFilterDto
      type: object
      properties:
        id:
          type: string
          description: Identifier of the transfer template
        name:
          type: string
          description: Name of the transfer template
        recipientPhoneNumber:
          type: string
          description: Recipient phone number
        paymentToolType:
          type: string
          description: |
            Payment tool type.
            COIN means that srcValue and destValue are coins.
            SMART_CARD means that srcValue is smartCard id and destValue is smartCard number (dashed, spaced or not).
          enum:
          - COIN
          - SMART_CARD
        paymentToolSrcId:
          type: string
          description: Id of source payment tool (coin or smart card id)
      description: Filter settings
    TransferTemplateSortDto:
      title: TransferTemplateSortDto
      type: object
      properties:
        date:
          type: string
          description: Creation date of transfer template
          enum:
          - asc
          - desc
      description: Sort settings
    ViewTransferTemplateFilteredReq:
      title: ViewTransferTemplateFilteredReq
      required:
      - filter
      - sort
      description: Request to view user transfer templates
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/TransferTemplateFilterDto'
          sort:
            $ref: '#/components/schemas/TransferTemplateSortDto'
    ViewTransferTemplateFilteredResp:
      title: ViewTransferTemplateFilteredResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of transfer templates
            items:
              $ref: '#/components/schemas/TransferTemplateDto'
    ViewOrganizationResp:
      title: ViewOrganizationResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of organization DTO
            items:
              $ref: '#/components/schemas/OrganizationShortDto'
    CreateCartTemplateReq:
      title: CreateCartTemplateReq
      required:
      - description
      - name
      - regular
      - reusable
      - templates
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Description
        regular:
          type: boolean
          description: Regular or not
        reusable:
          type: boolean
          description: |
            Reusable or not.
            Shows that template could be used more than one time in different regular payments(e.g. Subscription)
        templates:
          type: array
          description: List of templates' id
          items:
            $ref: '#/components/schemas/CreatePurchaseTemplateReq'
        templateDtos:
          type: array
          items:
            $ref: '#/components/schemas/SimplePurchaseTemplateDto'
      description: Request to create cart template
    CreatePurchaseTemplateReq:
      title: CreatePurchaseTemplateReq
      required:
      - amount
      - coinSerial
      - description
      - fields
      - name
      - optionName
      - productId
      - reusable
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        reusable:
          type: boolean
          description: |
            Reusable or not.
            Shows that template could be used more than one time in different regular payments(e.g. Subscription)
        productId:
          type: string
          description: Product identifier
        coinSerial:
          maxLength: 255
          minLength: 1
          type: string
          description: Coin serial number
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Description
        optionName:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of the selected form filling option
          example: default
        fields:
          type: array
          description: List of filled fields
          items:
            $ref: '#/components/schemas/FilledFieldDto'
        templateDto:
          $ref: '#/components/schemas/SimplePurchaseTemplateDto'
      description: Request to create purchase template
    FilledFieldDto:
      title: FilledFieldDto
      required:
      - label
      - name
      - value
      type: object
      properties:
        label:
          type: string
          description: Field label
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Field name
        value:
          type: object
          properties: {}
          description: Value provided by client
      description: Filled field
    SimplePurchaseTemplateDto:
      title: SimplePurchaseTemplateDto
      type: object
      properties:
        name:
          type: string
        productId:
          type: string
        coin:
          type: string
        amount:
          type: number
        description:
          type: string
        optionName:
          type: string
        payerFields:
          type: object
          additionalProperties:
            type: object
        filledPurchaseData:
          type: object
          additionalProperties:
            type: string
        regular:
          type: boolean
        reusable:
          type: boolean
    CartTemplateResp:
      title: CartTemplateResp
      required:
      - amount
      - description
      - id
      - name
      - regular
      - templates
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: Identifier
        name:
          type: string
          description: Name
        amount:
          type: number
          description: Amount
        description:
          type: string
          description: Description
        regular:
          type: boolean
          description: Regular
        templates:
          type: array
          description: List of templates in the cart
          items:
            $ref: '#/components/schemas/PurchaseTemplateDto'
      description: Response to show cart template info
    CartTemplateDto:
      title: CartTemplateDto
      description: Representation of purchase template
      allOf:
      - $ref: '#/components/schemas/CommonTemplateDto'
      - required:
        - templates
        - usedInSubscriptions
        type: object
        properties:
          templates:
            type: array
            description: List of templates' id
            items:
              $ref: '#/components/schemas/PurchaseTemplateDto'
          usedInSubscriptions:
            type: boolean
            description: Used in subscriptions
    ViewCartTemplateResp:
      title: ViewCartTemplateResp
      required:
      - cartTemplates
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        cartTemplates:
          type: array
          description: Cart templates
          items:
            $ref: '#/components/schemas/CartTemplateDto'
      description: Response to view cart templates for current user
    GateDto:
      title: GateDto
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Provider's name
      description: Information about gate provider
    ShortGateProviderDto:
      title: ShortGateProviderDto
      required:
      - gate
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Gate provider identifier
        name:
          type: string
          description: Gate provider name
        gate:
          $ref: '#/components/schemas/GateDto'
      description: Information about gate provider
    TxDto:
      title: TxDto
      required:
      - coin
      - id
      - orderId
      - sourceAmount
      - status
      - type
      type: object
      properties:
        id:
          type: string
          description: Gate transaction identifier
        orderId:
          type: integer
          description: Human-readable transaction identifier
          format: int64
        deviceId:
          type: string
          description: |
            Additional field means device (like mobile POS) where transaction was created.
            Used for filtering and grouping
        deviceOrderId:
          type: string
        type:
          type: string
          description: Gate transaction type
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
        status:
          type: string
          description: Status
          enum:
          - INITIATED
          - PROVIDER_ASSIGNED
          - PROCESSING
          - PROCESSED
          - SUCCESS
          - FAILURE
          - EXCEPTION
        errorCode:
          type: string
          description: Error code for failed transaction
          enum:
          - UNKNOWN
          - NOT_ENOUGH_FUNDS
          - CARD_3D_SECURE_REJECTED
          - CARD_TRANSACTION_CANCELLED
          - CONNECTION_TO_EXTERNAL_SERVER_ERROR
          - REJECTED
          - REJECTED_SLS_SENDER
          - REJECTED_SLS_BENEFICIARY
          - REJECTED_INVALID_BENEFICIARY
          - REJECTED_BARRED_BENEFICIARY
          - REJECTED_INVALID_BENEFICIARY_DETAILS
          - REJECTED_LIMITATIONS_ON_TRANSACTION_VALUE
          - REJECTED_LIMITATIONS_ON_SENDER_VALUE
          - REJECTED_LIMITATIONS_ON_BENEFICIARY_VALUE
          - REJECTED_LIMITATIONS_ON_ACCOUNT_VALUE
          - REJECTED_LIMITATIONS_ON_SENDER_QUANTITY
          - REJECTED_LIMITATIONS_ON_BENEFICIARY_QUANTITY
          - REJECTED_LIMITATIONS_ON_ACCOUNT_QUANTITY
          - REJECTED_PAYER_CURRENTLY_UNAVAILABLE
          - REJECTED_INSUFFICIENT_BALANCE
          - DECLINED
          - DECLINED_SLS_SENDER
          - DECLINED_SLS_BENEFICIARY
          - DECLINED_INVALID_BENEFICIARY
          - DECLINED_BARRED_BENEFICIARY
          - DECLINED_INVALID_BENEFICIARY_DETAILS
          - DECLINED_LIMITATIONS_ON_TRANSACTION_VALUE
          - DECLINED_LIMITATIONS_ON_SENDER_VALUE
          - DECLINED_LIMITATIONS_ON_BENEFICIARY_VALUE
          - DECLINED_LIMITATIONS_ON_ACCOUNT_VALUE
          - DECLINED_LIMITATIONS_ON_SENDER_QUANTITY
          - DECLINED_LIMITATIONS_ON_BENEFICIARY_QUANTITY
          - DECLINED_LIMITATIONS_ON_ACCOUNT_QUANTITY
          - DECLINED_PAYER_CURRENTLY_UNAVAILABLE
        coin:
          $ref: '#/components/schemas/CoinDto'
        paymentMethod:
          $ref: '#/components/schemas/ViewPaymentMethodDto'
        sourceAmount:
          type: number
          description: Amount specified by payer during transaction creation
        amountToSend:
          type: number
          description: Amount value sent to payment provider
        finalAmount:
          type: number
          description: Final amount that was added to or subtracted from transaction's
            coin
        processId:
          type: string
          description: |
            Identifier of gate business process.
            Use it at transaction viewer API to retrieve more information about commission and balance transactions
        payerData:
          type: object
          additionalProperties:
            type: object
          description: Data filled by the payer
    ViewCartTemplatePaymentResp:
      title: ViewCartTemplatePaymentResp
      required:
      - id
      - name
      - transactions
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: Cart identifier
        name:
          type: string
          description: Cart name
        transactions:
          type: array
          description: Response to gate transaction processing request
          items:
            $ref: '#/components/schemas/TxDto'
      description: Response of payment for cart template
    ViewPaymentMethodDto:
      title: ViewPaymentMethodDto
      required:
      - gateProvider
      type: object
      properties:
        gateProvider:
          $ref: '#/components/schemas/ShortGateProviderDto'
        way:
          type: string
          description: Provider's payment way
        icon:
          type: string
          description: Provider's icon
      description: Payment method information
    CreateSubscriptionReq:
      title: CreateSubscriptionReq
      required:
      - expirationType
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        expirationType:
          type: string
          description: Expiration type
          enum:
          - DATE
          - INFINITY
          - COUNT
          - AMOUNT
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount for Expiration Rule
        count:
          minimum: 1
          type: integer
          description: Count for Expiration Rule
          format: int32
        endDate:
          type: string
          description: End date for Expiration Rule
          format: date-time
        recurringStartDate:
          type: string
          description: Start date of subscription
          format: date-time
        type:
          type: string
          description: Recurring type
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
          - ANNUALLY
        frequency:
          minimum: 1
          type: integer
          description: Frequency
          format: int32
        templateId:
          type: string
          description: Template id
      description: Request to create subscription
    BaseTemplateDto:
      title: BaseTemplateDto
      type: object
      description: Representation of template information
      allOf:
      - $ref: '#/components/schemas/CommonTemplateDto'
    SubscriptionResp:
      title: SubscriptionResp
      required:
      - expirationConfig
      - frequency
      - id
      - name
      - recurringStartDate
      - subscriptionStatus
      - templateDto
      - type
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: Subscription id
        name:
          type: string
          description: Name
        expirationConfig:
          $ref: '#/components/schemas/ExpirationConfigDto'
        recurringStartDate:
          type: string
          description: Start date of subscription
          format: date-time
        type:
          type: string
          description: Recurring type
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
          - ANNUALLY
        frequency:
          type: integer
          description: Frequency
          format: int32
        templateDto:
          $ref: '#/components/schemas/BaseTemplateDto'
        subscriptionStatus:
          type: string
          description: Subscription status
          enum:
          - ACTIVE
          - STOPPED
          - PROCESSED
          - CANCELLED
      description: Response to show subscription info
    ExpirationConfigDto:
      title: ExpirationConfigDto
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Config type
          enum:
          - DATE
          - INFINITY
          - COUNT
          - AMOUNT
        amount:
          type: number
          description: Amount
        count:
          type: integer
          description: Count
          format: int32
        expirationDate:
          type: string
          description: End date of subscription
          format: date-time
    CreateSmartCardReq:
      title: CreateSmartCardReq
      required:
      - associatedCoinSerial
      - name
      type: object
      properties:
        name:
          maxLength: 36
          minLength: 1
          type: string
          description: Name of the smart card
        associatedCoinSerial:
          type: string
          description: Serial number of associated coin
        active:
          type: boolean
          description: Activation status of smart card
      description: Request to create a new smart card
    SmartCardResp:
      title: SmartCardResp
      required:
      - smartCard
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        smartCard:
          $ref: '#/components/schemas/SmartCardDto'
      description: Response to show smart card info
    SmartCardDto:
      title: SmartCardDto
      description: Information about smart card
      allOf:
      - $ref: '#/components/schemas/SmartCardShortDto'
      - required:
        - associatedCoinSerial
        - availableAmount
        - createdAt
        - currencyCode
        - organizationId
        type: object
        properties:
          organizationId:
            type: string
            description: Identifier of the card's owner
          createdAt:
            type: string
            description: When smart card was created
            format: date-time
          associatedCoinSerial:
            type: string
            description: Serial of associated coin
          availableAmount:
            type: number
            description: Amount available to use
          currencyCode:
            type: string
            description: Currency code
    SmartCardShortDto:
      title: SmartCardShortDto
      required:
      - active
      - cardNumber
      - expirationDate
      - expirationStatus
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
        cardNumber:
          type: string
          description: Unique number
        expirationDate:
          type: string
          description: Smart card expirationd date
        name:
          type: string
          description: Name of the smart card
        expirationStatus:
          pattern: ACTIVE|EXPIRED
          type: string
          description: Smart card expiration status
          enum:
          - ACTIVE
          - EXPIRED
        active:
          type: boolean
          description: Whether card is active
      description: Short information about smart card
    SmartCardFilterDto:
      title: SmartCardFilterDto
      type: object
      properties:
        cardNumber:
          type: string
          description: Unique smart card number
        organizationIds:
          type: array
          description: Identifiers of smart card owners
          items:
            type: string
        active:
          type: boolean
          description: Whether card is active
      description: Smart cards filter settings
    SmartCardSortDto:
      title: SmartCardSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
      description: Smart cards sort settings
    ViewSmartCardsReq:
      title: ViewSmartCardsReq
      description: Request to retrieve smart cards
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/SmartCardFilterDto'
          sort:
            $ref: '#/components/schemas/SmartCardSortDto'
    PageResponseSmartCardDto:
      title: PageResponseSmartCardDto
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            items:
              $ref: '#/components/schemas/SmartCardDto'
    ValidateSmartCardReq:
      title: ValidateSmartCardReq
      required:
      - cardNumber
      type: object
      properties:
        cardNumber:
          maxLength: 50
          minLength: 1
          type: string
          description: Unique smart card number
      description: Request to validate a smart card
    ValidateSmartCardResp:
      title: ValidateSmartCardResp
      required:
      - owner
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        owner:
          $ref: '#/components/schemas/OrganizationShortDto'
      description: Response to smart card validation request
    RegistrationReq:
      title: RegistrationReq
      required:
      - login
      - role
      type: object
      properties:
        login:
          type: string
          description: User login (phone number or email address)
        role:
          type: string
          description: User role (`individual` or `merchant`)
        referralLink:
          type: string
          description: Referral link identifier
        legalType:
          type: string
          description: Legal type
          enum:
          - none
          - individual
          - corporation
      description: Registration request
      discriminator:
        propertyName: role
    SendConfirmationResp:
      title: SendConfirmationResp
      required:
      - action
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        action:
          type: string
          description: Response action
          enum:
          - EMAIL_SENT
          - SMS_SENT
      description: Response on confirmation request
    SendConfirmationReq:
      title: SendConfirmationReq
      required:
      - login
      type: object
      properties:
        login:
          type: string
          description: User login (phone number or email address)
          example: individual@sdkfinance.tech
      description: Confirmation request
    ValidateOtpWithNewPasswordReq:
      title: ValidateOtpWithNewPasswordReq
      required:
      - login
      - otp
      type: object
      properties:
        login:
          type: string
          description: User login (phone number or email address)
        otp:
          type: string
          description: One time password (OTP) sent at the first step
        password:
          type: string
          description: User password
      description: Request to confirm otp and to set a new user password
    CheckSecretWordReq:
      title: CheckSecretWordReq
      required:
      - secretWord
      type: object
      properties:
        secretWord:
          type: string
          description: Secret word
      description: Check secret word request
    ResetIdentificationRequestDto:
      title: ResetIdentificationRequestDto
      type: object
      properties:
        id:
          type: string
          description: ID of request
        description:
          type: string
          description: Description of reason to update
        organizationId:
          type: string
          description: Organization id
        status:
          type: string
          description: Status of request
          enum:
          - APPROVED
          - PENDING
          - DECLINED
        initiatorUserId:
          type: string
          description: Initiator (user)
        initiatorRole:
          type: string
          description: Initiator role
      description: Information about reset identification request
    ResetIdentificationRequestResp:
      title: ResetIdentificationRequestResp
      required:
      - request
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        request:
          $ref: '#/components/schemas/ResetIdentificationRequestDto'
      description: Response to approve/decline reset identification viewing request
    ProfileHistoryReq:
      title: ProfileHistoryReq
      required:
      - dateFrom
      - dateTo
      type: object
      properties:
        dateFrom:
          type: string
          description: Date from
          format: date-time
        dateTo:
          type: string
          description: Date to
          format: date-time
      description: Get profile history request
    CountryCode:
      type: string
      description: Country code
      example: SK
      enum:
      - AD
      - AE
      - AF
      - AG
      - AI
      - AL
      - AM
      - AN
      - AO
      - AQ
      - AR
      - AS
      - AT
      - AU
      - AW
      - AX
      - AZ
      - BA
      - BB
      - BD
      - BE
      - BF
      - BG
      - BH
      - BI
      - BJ
      - BL
      - BM
      - BN
      - BO
      - BQ
      - BR
      - BS
      - BT
      - BV
      - BW
      - BY
      - BZ
      - CA
      - CC
      - CD
      - CF
      - CG
      - CH
      - CI
      - CK
      - CL
      - CM
      - CN
      - CO
      - CR
      - CU
      - CV
      - CW
      - CX
      - CY
      - CZ
      - DE
      - DJ
      - DK
      - DM
      - DO
      - DZ
      - EC
      - EE
      - EG
      - EH
      - ER
      - ES
      - ET
      - FI
      - FJ
      - FK
      - FM
      - FO
      - FR
      - GA
      - GB
      - GD
      - GE
      - GF
      - GG
      - GH
      - GI
      - GL
      - GM
      - GN
      - GP
      - GQ
      - GR
      - GS
      - GT
      - GU
      - GW
      - GY
      - HK
      - HM
      - HN
      - HR
      - HT
      - HU
      - ID
      - IE
      - IL
      - IM
      - IN
      - IO
      - IQ
      - IR
      - IS
      - IT
      - JE
      - JM
      - JO
      - JP
      - KE
      - KG
      - KH
      - KI
      - KM
      - KN
      - KP
      - KR
      - KW
      - KY
      - KZ
      - LA
      - LB
      - LC
      - LI
      - LK
      - LR
      - LS
      - LT
      - LU
      - LV
      - LY
      - MA
      - MC
      - MD
      - ME
      - MF
      - MG
      - MH
      - MK
      - ML
      - MM
      - MN
      - MO
      - MP
      - MQ
      - MR
      - MS
      - MT
      - MU
      - MV
      - MW
      - MX
      - MY
      - MZ
      - NA
      - NC
      - NE
      - NF
      - NG
      - NI
      - NL
      - "false"
      - NP
      - NR
      - NU
      - NZ
      - OM
      - PA
      - PE
      - PF
      - PG
      - PH
      - PK
      - PL
      - PM
      - PN
      - PR
      - PS
      - PT
      - PW
      - PY
      - QA
      - RE
      - RO
      - RS
      - RU
      - RW
      - SA
      - SB
      - SC
      - SD
      - SE
      - SG
      - SH
      - SI
      - SJ
      - SK
      - SL
      - SM
      - SN
      - SO
      - SR
      - SS
      - ST
      - SV
      - SX
      - SY
      - SZ
      - TC
      - TD
      - TF
      - TG
      - TH
      - TJ
      - TK
      - TL
      - TM
      - TN
      - TO
      - TR
      - TT
      - TV
      - TW
      - TZ
      - UA
      - UG
      - UM
      - US
      - UY
      - UZ
      - VA
      - VC
      - VE
      - VG
      - VI
      - VN
      - VU
      - WF
      - WS
      - YE
      - YT
      - ZA
      - ZM
      - ZW
    AddressDto:
      title: AddressDto
      type: object
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
        zipCode:
          type: string
          description: Zip code
        city:
          type: string
          description: City code
        street:
          type: string
          description: Street
        houseNumber:
          type: string
          description: House number
      description: Information about address
    BusinessDto:
      title: BusinessDto
      type: object
      properties:
        companyName:
          type: string
          description: Company's name
        legal:
          type: string
          description: Company's type
          enum:
          - none
          - individual
          - corporation
        type:
          type: string
          description: Type of business
          enum:
          - eshop
          - reseller_of_goods
          - service_providers
          - mobile_operator
          - storage_providers
          - high_risk
          - other
        vat:
          type: string
          description: Company's VAT number
        administrator:
          $ref: '#/components/schemas/EmployeeDto'
      description: Information about company
    EmployeeDto:
      title: EmployeeDto
      required:
      - email
      - firstName
      - lastName
      - phone
      type: object
      properties:
        firstName:
          maxLength: 255
          minLength: 1
          type: string
          description: Employee's first name
        lastName:
          maxLength: 255
          minLength: 1
          type: string
          description: Employee's last name
        email:
          maxLength: 255
          minLength: 1
          pattern: "^[_a-z0-9-\\+]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9]+)*(\\\
            .[a-z]{2,})$"
          type: string
          description: Employee's email contact
        phone:
          pattern: "\\+?[0-9]{11,15}"
          type: string
          description: Employee's phone contact
      description: Information about company's employee
    NameDto:
      title: NameDto
      required:
      - first
      - last
      type: object
      properties:
        first:
          maxLength: 255
          minLength: 1
          type: string
          description: First name
        last:
          maxLength: 255
          minLength: 1
          type: string
          description: Last name
        middle:
          maxLength: 255
          minLength: 1
          type: string
          description: Middle name
      description: Name
    PersonDto:
      title: PersonDto
      required:
      - nameIntl
      - namePlain
      type: object
      properties:
        namePlain:
          $ref: '#/components/schemas/NameDto'
        nameIntl:
          $ref: '#/components/schemas/NameDto'
        description:
          maxLength: 1024
          minLength: 0
          type: string
          description: Description
        phoneNumber:
          type: string
          description: Phone number
        email:
          type: string
          description: Email
        dateOfBirth:
          type: string
          description: Date of birth
          format: date-time
      description: Person
    ProfileAdditionalEndpointDto:
      title: ProfileAdditionalEndpointDto
      required:
      - type
      type: object
      properties:
        type:
          type: string
      description: Model holds additional profile information
      discriminator:
        propertyName: type
    ProfileHistoryDto:
      title: ProfileHistoryDto
      required:
      - contactHistory
      - personHistory
      - typeHistory
      type: object
      properties:
        personHistory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PersonDto'
          description: Person information history
        contactHistory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContactDto'
          description: Contact information history
        typeHistory:
          type: object
          additionalProperties:
            type: string
          description: Person type history
        statusHistory:
          type: object
          additionalProperties:
            type: string
          description: Status history
        businessHistory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BusinessDto'
          description: Company info history
        addressHistory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AddressDto'
          description: Address info history
        additionalHistory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProfileAdditionalEndpointDto'
          description: Additional information history
      description: Profile
    ProfileHistoryResp:
      title: ProfileHistoryResp
      required:
      - profileHistory
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        profileHistory:
          $ref: '#/components/schemas/ProfileHistoryDto'
      description: Response to get profile history request
    ResetIdentificationReq:
      title: ResetIdentificationReq
      required:
      - fields
      type: object
      properties:
        fields:
          type: array
          description: List of fields of profile to refill
          items:
            type: string
      description: Request to create change request
    MemberShip:
      title: MemberShip
      required:
      - organizationId
      - roleName
      type: object
      properties:
        organizationId:
          type: string
          description: Organization ID
        roleName:
          type: string
          description: Organization role name
      description: User membership
    NotificationDto:
      title: NotificationDto
      required:
      - email
      - phone
      type: object
      properties:
        phone:
          type: boolean
          description: Whether phone notification is enabled
        email:
          type: boolean
          description: Whether email notification is enabled
      description: Notification settings
    ProfileDto:
      title: ProfileDto
      required:
      - contact
      - person
      - type
      type: object
      properties:
        person:
          $ref: '#/components/schemas/PersonDto'
        contact:
          $ref: '#/components/schemas/ContactDto'
        type:
          type: string
          description: Person type
          enum:
          - base
          - standart
          - gold
          - vip
          - invest
        status:
          type: string
          description: Status
          enum:
          - none
          - pending
          - approved
          - declined
        business:
          $ref: '#/components/schemas/BusinessDto'
        address:
          $ref: '#/components/schemas/AddressDto'
        additional:
          $ref: '#/components/schemas/ProfileAdditionalEndpointDto'
        security:
          $ref: '#/components/schemas/SecurityDto'
        role:
          type: array
          description: Role info
          items:
            $ref: '#/components/schemas/RoleGroup'
      description: Profile
    RoleGroup:
      title: RoleGroup
      type: object
      properties:
        code:
          type: string
        permissions:
          type: array
          items:
            type: string
        bundleKey:
          type: string
    SecurityDto:
      title: SecurityDto
      required:
      - authorizationNotification
      - transactionNotification
      - twoFactorsAuthEnabled
      type: object
      properties:
        twoFactorsAuthEnabled:
          type: boolean
          description: Whether two-factor authorization (OTP) is enabled
        transactionNotification:
          $ref: '#/components/schemas/NotificationDto'
        authorizationNotification:
          $ref: '#/components/schemas/NotificationDto'
      description: Security settings
    ViewProfileResp:
      title: ViewProfileResp
      required:
      - memberShips
      - profile
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        profile:
          $ref: '#/components/schemas/ProfileDto'
        memberShips:
          type: array
          description: User's membership
          items:
            $ref: '#/components/schemas/MemberShip'
      description: Response to profile viewing request
    ResetIdentificationRequestFilterDto:
      title: ResetIdentificationRequestFilterDto
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResetIdentificationRequestStatus'
        organizationId:
          type: string
          description: User's organization ids
      description: Filter settings
    ResetIdentificationRequestStatus:
      type: string
      description: Reset identification request status
      enum:
      - APPROVED
      - PENDING
      - DECLINED
    ResetIdentificationRequestSortDto:
      title: ResetIdentificationRequestSortDto
      type: object
      properties:
        organizationId:
          type: string
          description: Organization
          enum:
          - asc
          - desc
        status:
          type: string
          description: Status
          enum:
          - asc
          - desc
      description: Sort settings
    ViewResetIdentificationRequestsReq:
      title: ViewResetIdentificationRequestsReq
      required:
      - filter
      - sort
      description: Request to view reset identification requests
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ResetIdentificationRequestFilterDto'
          sort:
            $ref: '#/components/schemas/ResetIdentificationRequestSortDto'
    CreateProcessConfirmationSettingsReq:
      title: CreateProcessConfirmationSettingsReq
      required:
      - active
      - confirmationType
      - processType
      type: object
      properties:
        processType:
          type: string
          description: Type of business process
        confirmationType:
          maxLength: 255
          minLength: 1
          type: string
          description: Type of confirmation
        active:
          type: boolean
          description: Whether this settings will be active
      description: Request to create a process confirmation settings record
    CreateOrUpdateProcessConfirmationSettingsResp:
      title: CreateOrUpdateProcessConfirmationSettingsResp
      required:
      - settings
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        settings:
          $ref: '#/components/schemas/ProcessConfirmationSettingsDto'
      description: Response for creation/modification of process confirmation settings
        request
    ProcessConfirmationSettingsDto:
      title: ProcessConfirmationSettingsDto
      required:
      - active
      - confirmationType
      - id
      - processType
      type: object
      properties:
        id:
          type: string
          description: Record identifier
        processType:
          type: string
          description: Type of business process
        confirmationType:
          type: string
          description: Type of confirmation
        active:
          type: boolean
          description: Whether settings for this business process type is active
      description: User's transaction confirmation settings for single business process
        type
    UpdateProcessConfirmationSettingsReq:
      title: UpdateProcessConfirmationSettingsReq
      required:
      - active
      - confirmationType
      type: object
      properties:
        confirmationType:
          maxLength: 255
          minLength: 1
          type: string
          description: Type of confirmation
        active:
          type: boolean
          description: Whether this settings will be active
      description: Request to update a process confirmation settings record
    ViewEligibleForConfirmationProcessTypesResp:
      title: ViewEligibleForConfirmationProcessTypesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Eligible business process types
          items:
            type: string
      description: Response to view eligible for confirmation business process types
        request
    CreateResetIdentificationReq:
      title: CreateResetIdentificationReq
      type: object
      properties:
        description:
          type: string
          description: Description
      description: Request to create a reset identification request
    CreateResetIdentificationRequestResp:
      title: CreateResetIdentificationRequestResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        request:
          $ref: '#/components/schemas/ResetIdentificationRequestDto'
      description: Request to create a reset identification request
    RestorePINRequest:
      title: RestorePINRequest
      required:
      - contact
      type: object
      properties:
        contact:
          type: string
          description: Contact where generated PIN will be sent to
      description: Request to restore an existing PIN
    ValidateOtpReq:
      title: ValidateOtpReq
      required:
      - login
      - otp
      type: object
      properties:
        login:
          type: string
          description: User login (phone number or email address)
          example: individual@sdkfinance.tech
        otp:
          type: string
          description: One time password (OTP) sent at the first step
          example: "123456"
      description: Request to confirm action using one-time password
    BankDetailsDto:
      title: BankDetailsDto
      required:
      - fullName
      type: object
      properties:
        fullName:
          maxLength: 255
          minLength: 1
          type: string
          description: Full name of the receiver
        bankAccountNumber:
          maxLength: 255
          minLength: 1
          type: string
          description: Bank account number
        iban:
          pattern: "[A-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}"
          type: string
          description: International account number (IBAN)
        bic:
          pattern: "[a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?"
          type: string
          description: BIC
        swift:
          maxLength: 255
          minLength: 0
          pattern: "[a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?"
          type: string
          description: SWIFT
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Bank name
        address:
          maxLength: 255
          minLength: 1
          type: string
          description: Bank address
      description: Banking details
    BankAccountInfoDto:
      title: BankAccountInfoDto
      required:
      - createdAt
      - details
      - id
      - updatedAt
      type: object
      properties:
        createdAt:
          type: string
          description: When bank account was created
          format: date-time
        details:
          $ref: '#/components/schemas/BankDetailsDto'
        id:
          type: string
          description: ID of bank account
        status:
          type: string
          description: Status of bank account
          enum:
          - PENDING
          - REJECTED
          - APPROVED
        updatedAt:
          type: string
          description: Last time when bank account was edited
          format: date-time
        coinSerial:
          type: string
          description: Coin serial number
        isDefault:
          type: boolean
          description: "Shows that the bank account will use as default in operations\
            \ within a related coin. \nIf it's the first bank account this parameter\
            \ would automatically be set as true.\n"
      description: Banking information
    CreateAndUpdateBankAccountResp:
      title: CreateAndUpdateBankAccountResp
      required:
      - bankAccountDetails
      type: object
      properties:
        bankAccountDetails:
          $ref: '#/components/schemas/BankAccountInfoDto'
        message:
          type: string
          description: Response message
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response to bank account create or update request
    CreateOrUpdateBankAccountWithBankIdReq:
      title: CreateOrUpdateBankAccountWithBankIdReq
      required:
      - bankId
      - fullName
      type: object
      properties:
        bankAccountNumber:
          maxLength: 255
          minLength: 1
          type: string
          description: Bank account number
          example: "1987426351"
        iban:
          pattern: "[A-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}"
          type: string
          description: IBAN
          example: SK68072000021987426351
        bankId:
          type: string
          description: |
            Internal bank ID, take `bankId` from the API `GET /bank-catalog`
          example: e41c5338-6a01-4bac-a50c-e8352157e300
        fullName:
          maxLength: 255
          minLength: 1
          type: string
          description: Recipient full name
          example: Tony Stark
        isDefault:
          type: boolean
          description: "Shows that the bank account will be used as default in operations\
            \ with in-system account. \nFor the first bank account linked to the provided\
            \ in-system account it will be set as true by default.\n"
      description: Request to create or update a bank account with bank id
    CreateOrUpdateBankAccountWithBankIdResp:
      title: CreateOrUpdateBankAccountWithBankIdResp
      description: Response to create or update a bank account with bank id request
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          bankAccountNumber:
            type: string
            description: Bank account number
          bankAccountId:
            type: string
            description: ID of bank account
          bankInfo:
            $ref: '#/components/schemas/BankDto'
          fullName:
            type: string
            description: Recipient full name
          iban:
            type: string
            description: International account number (IBAN)
          isDefault:
            type: boolean
            description: Shows that the bank account will use as default in operations
              within a related coin
    CreateProfileDocumentReq:
      title: CreateProfileDocumentReq
      required:
      - fileId
      - type
      type: object
      properties:
        fileId:
          type: string
          description: "Identifier of file to be submitted, see Media Files API"
        type:
          maxLength: 255
          minLength: 1
          type: string
          description: "Type of document: passport, driver's licence, etc"
      description: Request for submitting file as profile document for organization
        approval
    CreateProfileDocumentResp:
      title: CreateProfileDocumentResp
      required:
      - document
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        document:
          $ref: '#/components/schemas/ProfileDocumentDto'
      description: Response for profile document submitting request
    MediaFileDto:
      title: MediaFileDto
      required:
      - id
      - md5
      - mediaType
      - name
      - ownerId
      - sha1
      - size
      - url
      - used
      type: object
      properties:
        id:
          type: string
          description: File identifier
        ownerId:
          type: string
          description: Identifier of the organization that owns this file
        mediaType:
          type: string
          description: MIME type
        name:
          type: string
          description: Original name
        url:
          type: string
          description: File's URL
        md5:
          type: string
          description: MD5 checksum
        sha1:
          type: string
          description: SHA1 checksum
        size:
          type: integer
          description: Size (bytes)
          format: int32
        used:
          type: boolean
          description: Whether this file was used in any other interactions
        createdAt:
          type: string
          description: When this file was uploaded
          format: date-time
        expiresAt:
          type: string
          description: When this file will be deleted
          format: date-time
        tag:
          type: string
          description: Custom file tag (label)
      description: Information about media file
    ProfileDocumentDto:
      title: ProfileDocumentDto
      required:
      - file
      - id
      - status
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: string
          description: Profile document's identifier
        file:
          $ref: '#/components/schemas/MediaFileDto'
        documentIdentifier:
          type: string
          description: "String representation of document identifier for example:\
            \ taxpayer id, passport serial ..."
        type:
          type: string
          description: Type of a document
        label:
          type: string
          description: Internationalized type of a document
        status:
          type: string
          description: Approval status of a document
          enum:
          - PENDING
          - APPROVED
          - DECLINED
        updatedAt:
          type: string
          description: Last time document was updated
          format: date-time
      description: Information about profile document
    ProfileDocumentFilterDto:
      title: ProfileDocumentFilterDto
      type: object
      properties:
        orgIds:
          type: array
          description: Owner id
          items:
            type: string
        statuses:
          type: array
          description: Document statuses
          items:
            $ref: '#/components/schemas/DocumentApprovalStatus'
        types:
          type: array
          description: Document types
          items:
            type: string
      description: Filter settings
    DocumentApprovalStatus:
      type: string
      description: Document approval status
      enum:
      - PENDING
      - APPROVED
      - OUTDATED
      - DECLINED
    ProfileDocumentSortDto:
      title: ProfileDocumentSortDto
      type: object
      properties:
        status:
          type: string
          description: Status
          enum:
          - asc
          - desc
      description: Sort settings
    ViewProfileDocumentsReq:
      title: ViewProfileDocumentsReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ProfileDocumentFilterDto'
          sort:
            $ref: '#/components/schemas/ProfileDocumentSortDto'
    ViewProfileDocumentsResp:
      title: ViewProfileDocumentsResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of profile documents
            items:
              $ref: '#/components/schemas/ProfileDocumentDto'
    DocumentTypeDto:
      title: DocumentTypeDto
      required:
      - optional
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of a document
        label:
          type: string
          description: Internationalized type of a document
        optional:
          type: boolean
          description: Whether this document type is not mandatory for upload
      description: Information about document type
    ViewDocumentTypesResp:
      title: ViewDocumentTypesResp
      required:
      - documentTypes
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        documentTypes:
          type: array
          description: Document types
          items:
            $ref: '#/components/schemas/DocumentTypeDto'
      description: Response for document types viewing request as user
    ApproveOrDeclineProfileDocumentResp:
      title: ApproveOrDeclineProfileDocumentResp
      required:
      - document
      type: object
      properties:
        document:
          $ref: '#/components/schemas/ProfileDocumentDto'
      description: Response for profile document submitting request
    PrepaidCreateReq:
      title: PrepaidCreateReq
      required:
      - prepaidAmount
      - srcSerial
      type: object
      properties:
        srcSerial:
          type: string
          description: Serial number of the coin where funds will be taken from
        prepaidAmount:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: Desired prepaid amount
        prepaidName:
          type: string
          description: Prepaid name
      description: Request to create a prepaid coin
    CreateCoinResp:
      title: CreateCoinResp
      required:
      - coin
      - pin
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        coin:
          $ref: '#/components/schemas/CoinDto'
        pin:
          type: string
          description: Coin's PIN
      description: Response to coin creation request
    RedeemPrepaidReq:
      title: RedeemPrepaidReq
      required:
      - destSerial
      - prepaidPin
      type: object
      properties:
        prepaidPin:
          type: string
          description: PIN of the prepaid coin
        destSerial:
          type: string
          description: Serial of destination coin where funds will be transferred
            to
      description: Request to redeem prepaid coin
    PrepaidVoucherFilterDto:
      title: PrepaidVoucherFilterDto
      type: object
      properties:
        activated:
          type: boolean
          description: |
            Status of prepaid voucher.
            True when prepaid is not activated and false when he was activated
        createdAtFrom:
          type: string
          description: System will return prepaid vouchers which created after createdFrom
            date
          format: date-time
        createdAtTo:
          type: string
          description: System will return prepaid vouchers which created before createdTo
            date
          format: date-time
        activatedAtFrom:
          type: string
          description: System will return prepaid vouchers which activated after activatedFrom
            date
          format: date-time
        activatedAtTo:
          type: string
          description: System will return prepaid vouchers which activated before
            activatedTo date
          format: date-time
      description: Filter settings
    PrepaidVoucherSortDto:
      title: PrepaidVoucherSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        redeemDate:
          type: string
          description: Redeem date
          enum:
          - asc
          - desc
      description: Sort settings
    ViewPrepaidVouchersReq:
      title: ViewPrepaidVouchersReq
      description: Request to view prepaid vouchers
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/PrepaidVoucherFilterDto'
          sort:
            $ref: '#/components/schemas/PrepaidVoucherSortDto'
    ViewPrepaidVouchersResp:
      title: ViewPrepaidVouchersResp
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          prepaidVouchers:
            type: array
            description: List of prepaid vouchers
            items:
              $ref: '#/components/schemas/PrepaidVoucherDto'
    CreatePointOfSaleReq:
      title: CreatePointOfSaleReq
      required:
      - description
      - posCompanyName
      type: object
      properties:
        categoryId:
          maxLength: 255
          minLength: 1
          type: string
        posCompanyName:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        description:
          maxLength: 255
          minLength: 0
          type: string
          description: Description
        website:
          maxLength: 255
          minLength: 1
          type: string
          description: Website front page
        resultUrl:
          maxLength: 255
          minLength: 1
          type: string
          description: "When payment was processed successfully, system redirects\
            \ payer to this URL (only for merchant payment API v2)"
        serverUrl:
          maxLength: 255
          minLength: 1
          type: string
          description: "When payment was processed successfully, system sends callback\
            \ to this URL (only for merchant payment API v2)"
        trustAllCertificates:
          type: boolean
          description: |
            Whether trust all certificates while performing a `serverUrl` call.
            ALWAYS USE `false` FOR PRODUCTION ENVIRONMENT! (only for merchant payment API v2)
        terminalId:
          maxLength: 255
          minLength: 1
          type: string
          description: Terminal ID at Acquirer side
        merchantId:
          maxLength: 255
          minLength: 1
          type: string
          description: Merchant ID at Acquirer side
      description: Information about new point of sale
    PointOfSaleResp:
      title: PointOfSaleResp
      required:
      - pos
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        pos:
          $ref: '#/components/schemas/ViewPointOfSaleDto'
      description: Response to point of sale create or edit request
    ShortPointOfSaleResp:
      title: ShortPointOfSaleResp
      required:
      - pos
      type: object
      properties:
        message:
          type: string
          description: Response message
        pos:
          $ref: '#/components/schemas/ShortPointOfSaleDto'
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response to point of sale viewing request (as non-owner)
    ViewPointOfSaleDto:
      title: ViewPointOfSaleDto
      required:
      - active
      - description
      - id
      - posCompanyName
      type: object
      properties:
        id:
          type: string
          description: Identifier
        posCompanyName:
          type: string
          description: Name
        description:
          type: string
          description: Description
        website:
          type: string
          description: Website
        active:
          type: boolean
          description: Whether point of sale is active
        terminalId:
          type: string
          description: Terminal ID at Acquirer side
        merchantId:
          type: string
          description: Merchant ID at Acquirer side
        secretCode:
          type: string
          description: Secret code (for merchant payment API v2)
        serverUrl:
          type: string
          description: Server URL (for merchant payment API v2)
        resultUrl:
          type: string
          description: Result URL (for merchant payment API v2)
        trustAllCertificates:
          type: boolean
          description: Whether trust all certificates while performing a `serverUrl`
            call
        txCategoryCode:
          type: string
        txCategoryId:
          type: string
      description: Information about point of sale available for merchant
    PaymentTransactionFilter:
      title: PaymentTransactionFilter
      description: Filter settings of payment transaction
      allOf:
      - $ref: '#/components/schemas/TransactionFilterDto'
      - type: object
        properties:
          posIds:
            type: array
            description: List of POS identifiers
            items:
              type: string
          paymentIdentifiers:
            type: array
            description: List of filtered payment identifiers
            items:
              type: integer
              format: int32
    GateMerchantPaymentTransactionFilterDto:
      title: GateMerchantPaymentTransactionFilterDto
      description: Filter settings of payment transaction
      allOf:
      - $ref: '#/components/schemas/PaymentTransactionFilter'
      - type: object
        properties:
          gateProviderId:
            type: string
            description: Gate provider id
    PaymentTransactionFilterDto:
      title: PaymentTransactionFilterDto
      type: object
      properties:
        coinSerials:
          type: array
          description: List of filtered coins participated in business process
          items:
            type: string
        issuerIds:
          type: array
          description: List of filtered issuers participated in business process
          items:
            type: string
        currencyCodes:
          type: array
          description: List of filtered codes of currencies participated in business
            process
          items:
            type: string
        paymentIdentifiers:
          type: array
          description: List of filtered payment identifiers
          items:
            type: integer
            format: int32
        ids:
          type: array
          description: List of filtered process identifiers
          items:
            type: string
        statuses:
          type: array
          description: List of business process statuses
          items:
            $ref: '#/components/schemas/BusinessProcessStatus'
        createdAtFrom:
          type: string
          description: Beginning of interval for creation date
          format: date-time
        createdAtTo:
          type: string
          description: End of interval for creation date
          format: date-time
        types:
          uniqueItems: true
          type: array
          description: List of business process types
          items:
            type: string
      description: Filter settings
    BusinessProcessStatus:
      type: string
      description: Business process status
      enum:
      - limited
      - pending
      - declined
      - processed
      - error
      - rejected
    PaymentTransactionSortDto:
      title: PaymentTransactionSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        status:
          type: string
          description: Status
          enum:
          - asc
          - desc
      description: Sort settings
    ViewPaymentTransactionsReq:
      title: ViewPaymentTransactionsReq
      required:
      - filter
      - sort
      description: Request to view payment transactions
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/PaymentTransactionFilterDto'
          sort:
            $ref: '#/components/schemas/PaymentTransactionSortDto'
    ViewPaymentTransactionsResp:
      title: ViewPaymentTransactionsResp
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of business processes
            items:
              $ref: '#/components/schemas/MerchantPaymentProcessDto'
    MerchantPaymentProcessDto:
      title: MerchantPaymentProcessDto
      required:
      - children
      - createdAt
      - id
      - requestIdentifier
      - requestStatus
      - status
      - transactions
      - type
      - updatedAt
      type: object
      properties:
        children:
          type: array
          description: Child processes
          items:
            $ref: '#/components/schemas/BusinessProcessDto'
        createdAt:
          type: string
          description: When process was created
          format: date-time
        description:
          type: string
        errorMessage:
          type: string
          description: "Error message, null if process was not failed"
        id:
          type: string
          description: Process identifier
        invoiceAmount:
          type: number
        merchantCoinSerial:
          type: string
        merchantId:
          type: string
        payerId:
          type: string
        paymentIdentifier:
          type: integer
          format: int32
        posId:
          type: string
        requestIdentifier:
          type: integer
          description: Request identifier
          format: int32
        requestStatus:
          type: string
          description: Current request status
          enum:
          - limited
          - pending
          - timer
          - approved_by_payroll
          - approved_by_accountant
          - approved_by_cfo
          - requires_confirmation
          - declined
          - rejected
          - processed
          - error
        status:
          type: string
          description: Current status
          enum:
          - limited
          - pending
          - declined
          - processed
          - error
          - rejected
        terminalId:
          type: string
        paymentInstrument:
          type: string
          description: Type of payment instrument
        smartCardId:
          type: string
          description: Smart card id
        smartCardNumber:
          type: string
          description: Smart card masked number
        associatedCoinSerial:
          type: string
          description: Smart card associated coin serial
        transactions:
          type: array
          description: Performed transactions
          items:
            $ref: '#/components/schemas/TransactionDto'
        type:
          type: string
          description: Type of business process
        updatedAt:
          type: string
          description: Last time process was updated
          format: date-time
      description: Business process data. Some processes can have additional data
        included.
    ConfirmPasswordReq:
      title: ConfirmPasswordReq
      required:
      - login
      - newUserPassword
      - otp
      type: object
      properties:
        login:
          type: string
          description: User login (phone number or email address)
        otp:
          type: string
          description: One time password (OTP) sent at the first step
        newUserPassword:
          type: string
          description: New user password
      description: Request to confirm password recovery
    OrganizationFilterDto:
      title: OrganizationFilterDto
      type: object
      properties:
        types:
          type: array
          description: "Organization types. Note! Use types from the list 'cash_desk',\
            \ 'exchanger', 'gate_provider', 'individual', 'payroll', 'merchant', 'support',\
            \ 'system'"
          items:
            type: string
      description: Filter settings
    CashDeskOrganizationFilterDto:
      title: CashDeskOrganizationFilterDto
      type: object
      properties:
        emitentId:
          type: string
          description: Identifier of the issuer
        types:
          type: array
          description: "Organization types. Note! Use types from the list 'cash_desk',\
            \ 'exchanger', 'gate_provider', 'individual', 'payroll', 'merchant', 'support',\
            \ 'system'"
          items:
            type: string
      description: Cash desk filter settings
    OrganizationSortDto:
      title: OrganizationSortDto
      type: object
      properties:
        creationDate:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
      description: Sort settings
    ViewOrganizationReq:
      title: ViewOrganizationReq
      description: Request to view organizations
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/OrganizationFilterDto'
          sort:
            $ref: '#/components/schemas/OrganizationSortDto'
    ChangeOrganizationContractReq:
      title: ChangeOrganizationContractReq
      required:
      - newContractId
      type: object
      properties:
        newContractId:
          type: string
          description: New contract id
      description: Request to change contract into organization
    I18nRecord:
      title: I18nRecord
      required:
      - locale
      - value
      type: object
      properties:
        locale:
          maxLength: 2
          minLength: 2
          type: string
          description: Two digit ISO 639-1 locale code
          example: en
        value:
          maxLength: 1024
          minLength: 1
          type: string
          description: Localized i18n record value
          example: translated_string_value
      description: Localized i18n record value
    IdOrExtCodeDto:
      title: IdOrExtCodeDto
      type: object
      properties:
        identifier:
          type: integer
          description: Entity internal identifier
          format: int64
        externalCode:
          type: string
          description: Entity external code
      description: Container holding one of two mandatory fields
    MerchantProductCreateDto:
      title: MerchantProductCreateDto
      required:
      - measureUnit
      - names
      type: object
      properties:
        externalCode:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z\\d\\-\\_]+$"
          type: string
          description: Product external code
        measureUnit:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        names:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for product name
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for product description
          items:
            $ref: '#/components/schemas/I18nRecord'
      description: Request to create a new product
    CreateOrUpdateMerchantProductResp:
      title: CreateOrUpdateMerchantProductResp
      required:
      - product
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        product:
          $ref: '#/components/schemas/MerchantProductViewRespDto'
      description: Response to merchant product creation or updating request
    MeasureUnitViewRespDto:
      title: MeasureUnitViewRespDto
      required:
      - code
      - description
      - id
      type: object
      properties:
        id:
          type: integer
          description: Internal unit ID
          format: int64
        externalCode:
          type: string
          description: Measure unit external code
        code:
          type: string
          description: Measure unit code
        description:
          type: string
          description: Measure unit description
      description: Measure unit data
    MerchantProductViewRespDto:
      title: MerchantProductViewRespDto
      type: object
      properties:
        id:
          type: integer
          description: Product identifier
          format: int64
        externalCode:
          type: string
          description: Product external code
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        measureUnit:
          $ref: '#/components/schemas/MeasureUnitViewRespDto'
      description: Merchant product
    MerchantProductPriceCreateRequest:
      title: MerchantProductPriceCreateRequest
      required:
      - issuerId
      - measureUnit
      - value
      type: object
      properties:
        posId:
          type: string
          description: Point of sale ID
        issuerId:
          type: string
          description: Identifier of the issuer
        measureUnit:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        dateStart:
          type: string
          description: Start date of price
          format: date-time
        dateEnd:
          type: string
          description: End date of price
          format: date-time
        value:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Product value
      description: Request to create price
    MerchantProductPriceReadResp:
      title: MerchantProductPriceReadResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        price:
          $ref: '#/components/schemas/MerchantProductPriceReadRespDto'
      description: Response to view product price
    MerchantProductPriceReadRespDto:
      title: MerchantProductPriceReadRespDto
      type: object
      properties:
        priceId:
          type: integer
          description: Price ID
          format: int64
        pos:
          type: string
          description: POS ID
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        measureUnit:
          $ref: '#/components/schemas/MeasureUnitViewRespDto'
        dateStart:
          type: string
          description: Start date
          format: date-time
        dateEnd:
          type: string
          description: End date
          format: date-time
        value:
          type: number
          description: Price value
      description: Merchant product price
    MerchantProductFilterDto:
      title: MerchantProductFilterDto
      type: object
      properties:
        ids:
          type: array
          description: Product id list
          items:
            type: integer
            format: int64
        externalCodes:
          type: array
          description: Product external code
          items:
            type: string
        name:
          type: string
          description: Product name
      description: Merchant product filter settings
    MerchantProductSortDto:
      title: MerchantProductSortDto
      type: object
      properties:
        externalCode:
          type: string
          description: External code
          enum:
          - asc
          - desc
        date:
          type: string
          description: Created at
          enum:
          - asc
          - desc
    MerchantProductViewReq:
      title: MerchantProductViewReq
      required:
      - filter
      - sort
      description: Request to get a list of merchant products
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/MerchantProductFilterDto'
          sort:
            $ref: '#/components/schemas/MerchantProductSortDto'
    MerchantProductPriceViewReq:
      title: MerchantProductPriceViewReq
      required:
      - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        posIdList:
          type: array
          description: List of POS identifiers
          items:
            type: string
      description: Request to view prices for product external code
    MerchantProductPricesReadResp:
      title: MerchantProductPricesReadResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        prices:
          type: array
          description: Product prices
          items:
            $ref: '#/components/schemas/MerchantProductPriceReadRespDto'
      description: Response to view product prices
    MerchantProductUpdateExtCodeReq:
      title: MerchantProductUpdateExtCodeReq
      required:
      - externalCode
      - measureUnit
      - names
      type: object
      properties:
        names:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Product names
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Product descriptions
          items:
            $ref: '#/components/schemas/I18nRecord'
        measureUnit:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        externalCode:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Product external code
      description: Request to update a single product by it's external code
    MerchantProductPriceDeleteReq:
      title: MerchantProductPriceDeleteReq
      required:
      - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/IdOrExtCodeDto'
      description: Request to delete all prices by product filter
    MerchantProductPriceDeleteForPosReq:
      title: MerchantProductPriceDeleteForPosReq
      required:
      - posId
      - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        posId:
          maxLength: 2147483647
          minLength: 1
          type: string
      description: Request to delete all prices for the given product and point of
        sale
    MerchantProductDeleteExtCodeReq:
      title: MerchantProductDeleteExtCodeReq
      required:
      - externalCode
      type: object
      properties:
        externalCode:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Product external code
      description: Delete request
    MerchantProductDeleteListReq:
      title: MerchantProductDeleteListReq
      required:
      - productIds
      type: object
      properties:
        productIds:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Product ID list
          items:
            type: string
      description: Request to delete a list of product
    MerchantProductCreateReq:
      title: MerchantProductCreateReq
      required:
      - products
      type: object
      properties:
        products:
          type: array
          description: Product list
          items:
            $ref: '#/components/schemas/MerchantProductCreateDto'
      description: Request to create a new merchant product
    MerchantProductsViewResp:
      title: MerchantProductsViewResp
      description: Response to view products request
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: Records
            items:
              $ref: '#/components/schemas/MerchantProductViewRespDto'
    MerchantProductPriceCreateBatchDto:
      title: MerchantProductPriceCreateBatchDto
      required:
      - emitentSnPrefix
      - measureUnit
      - product
      - value
      type: object
      properties:
        product:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        posId:
          type: string
          description: Point of sale ID
        emitentSnPrefix:
          type: string
          description: Issuer's code (emitent SN prefix)
        measureUnit:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        dateStart:
          type: string
          description: Start date of price
          format: date-time
        dateEnd:
          type: string
          description: End date of price
          format: date-time
        value:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Product value
      description: Request to create price for batch
    MerchantProductPricesCreateBatchReq:
      title: MerchantProductPricesCreateBatchReq
      type: object
      properties:
        prices:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: List of price data
          items:
            $ref: '#/components/schemas/MerchantProductPriceCreateBatchDto'
      description: Request to create prices from batch
    CreateMerchantProductCategoryReq:
      title: CreateMerchantProductCategoryReq
      required:
      - names
      type: object
      properties:
        externalCode:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z\\d\\-_]+$"
          type: string
          description: External code for category
        names:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for category name
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for category description
          items:
            $ref: '#/components/schemas/I18nRecord'
      description: Request to create a product category
    MerchantProductCategoryDto:
      title: MerchantProductCategoryDto
      required:
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: Identifier of the category
          format: int64
        externalCode:
          type: string
          description: External code of the category
        name:
          type: string
          description: Name
        description:
          type: string
          description: Description
      description: Information about merchant product category
    MerchantProductCategoryResp:
      title: MerchantProductCategoryResp
      required:
      - category
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        category:
          $ref: '#/components/schemas/MerchantProductCategoryDto'
      description: Response to merchant product category viewing or creation or modification
        request
    CreatePaymentReq:
      title: CreatePaymentReq
      required:
      - description
      - issuerId
      - payer
      - pointOfSaleId
      type: object
      properties:
        pointOfSaleId:
          type: string
          description: Identifier of the point of sale
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount. Required only for NO_PRODUCTS policy. For other policies
            must be null
        issuerId:
          type: string
          description: Identifier of the issuer
        paymentInstrument:
          $ref: '#/components/schemas/PaymentInstrumentDto'
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Description
        orderId:
          maxLength: 255
          minLength: 0
          type: string
          description: Identifier of the payment in the merchant's system
        latitudes:
          maximum: 90
          minimum: -90
          type: number
        longitudes:
          maximum: 180
          minimum: -180
          type: number
        payer:
          $ref: '#/components/schemas/PayerIdentifierDto'
        productsPolicy:
          type: string
          description: |
            Payment's policy for products.
            NO_PRODUCTS means products must not be present within payment.
            ACCEPT_CUSTOM_PRICES means products and their price values (can differ from available) must be specified.
            DISALLOW_CUSTOM_PRICES means products must be specified and if some price is not available, hen an error will be returned
          enum:
          - NO_PRODUCTS
          - ACCEPT_CUSTOM_PRICES
          - DISALLOW_CUSTOM_PRICES
        purchases:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: |
            List of purchases to be conducted.
            Must be null for NO_PRODUCTS policy. For other policies is mandatory
          items:
            $ref: '#/components/schemas/MerchantPurchaseDto'
        urls:
          $ref: '#/components/schemas/PaymentUrlsDto'
      description: Request to create a new merchant payment
    PaymentInstrumentDto:
      title: PaymentInstrumentDto
      type: object
      properties:
        instrumentType:
          type: string
          description: "Payment instrument. Describes how user pays: with his coin\
            \ or with cash. Defaults to 'COIN' if not specified."
          enum:
          - COIN
          - SMART_CARD
          - CASH
        smartCardNumber:
          type: string
          description: Smart card number. Required only for the instrument type 'SMART_CARD'.
      description: Information about payment instrument
    MerchantPurchaseDto:
      title: MerchantPurchaseDto
      required:
      - measureUnit
      - product
      - quantity
      type: object
      properties:
        product:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        measureUnit:
          $ref: '#/components/schemas/IdOrExtCodeDto'
        quantity:
          minimum: 1
          type: number
          description: Quantity of the product
        price:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: |
            Custom prices of the product.
            Must be specified only for ACCEPT_CUSTOM_PRICES policy. Must be null for other policies.
      description: Information about products to be purchased
    PayerIdentifierDto:
      title: PayerIdentifierDto
      required:
      - method
      - value
      type: object
      properties:
        method:
          type: string
          description: Identification method. `none` means payer will be determined
            later
          enum:
          - none
          - phone
          - smart_card
          - user_id
        value:
          maxLength: 1024
          minLength: 0
          type: string
          description: "Identifier value (phone number, smart card number,...)"
        confirmation:
          type: string
          description: "Confirmation method, OTP_PHONE by default"
          enum:
          - NONE
          - OTP_PHONE
          - MASTER_PIN
      description: Payer's identifier
    PaymentUrlsDto:
      title: PaymentUrlsDto
      type: object
      properties:
        callbackUrl:
          maxLength: 255
          minLength: 1
          type: string
          description: System will send notification to this URL asynchronously when
            payment will be successfully paid
        successRedirectUrl:
          maxLength: 255
          minLength: 1
          type: string
          description: URL where payer should be redirected to after successful payment
      description: Callbacks and redirects configuration. Can be set up only by merchant.
    CreateOrUpdatePaymentResp:
      title: CreateOrUpdatePaymentResp
      required:
      - payment
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        payment:
          $ref: '#/components/schemas/PaymentDto'
      description: Response payment creation request
    PaymentDto:
      title: PaymentDto
      required:
      - createdByUser
      - date
      - identifier
      - issuer
      - parameters
      - pos
      - status
      type: object
      properties:
        identifier:
          type: integer
          description: Identifier
          format: int32
        pos:
          $ref: '#/components/schemas/ShortPointOfSaleDto'
        parameters:
          $ref: '#/components/schemas/PaymentReqParametersDto'
        date:
          type: string
          description: Creation date
          format: date-time
        createdByUser:
          $ref: '#/components/schemas/UserShortDto'
        status:
          type: string
          description: Status
          enum:
          - pending
          - paid
          - refund
          - decline
        payer:
          $ref: '#/components/schemas/OrganizationShortDto'
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        urls:
          $ref: '#/components/schemas/PaymentUrlsDto'
      description: Merchant payment information
    PaymentReqParametersDto:
      title: PaymentReqParametersDto
      required:
      - apiType
      - invoiceAmount
      - orderDescription
      - paymentInstrument
      type: object
      properties:
        apiType:
          type: string
          description: |
            Type of API payment.
            v1 means simple form,
            v2 means signed form with callback,
            v3 means physical POS/terminal
          enum:
          - v1
          - v2
          - v3
        invoiceAmount:
          type: number
          description: Invoiced amount
        orderId:
          type: string
          description: Identifier of the payment in the merchant's system
        orderDescription:
          type: string
          description: Description
        paymentInstrument:
          type: string
          description: "Payment instrument: how client has paid"
          enum:
          - COIN
          - SMART_CARD
          - CASH
        smartCardNumber:
          type: string
          description: Masked smart card number if paymentInstrument is SMART_CARD
            otherwise null
        smartCardId:
          type: string
          description: Smart card id to get the full smart card info
        smartCardAssociatedCoinSerial:
          type: string
          description: Smart card associated coin serial
      description: Payment request parameters
    ShortPointOfSaleDto:
      title: ShortPointOfSaleDto
      required:
      - active
      - description
      - id
      - posCompanyName
      type: object
      properties:
        id:
          type: string
          description: Identifier
        posCompanyName:
          type: string
          description: Name
        description:
          type: string
          description: Description
        website:
          type: string
          description: Website
        active:
          type: boolean
          description: Whether point of sale is active
        terminalId:
          type: string
          description: Terminal ID at Acquirer side
        merchantId:
          type: string
          description: Merchant ID at Acquirer side
        txCategoryCode:
          type: string
        txCategoryId:
          type: string
      description: Point of sale information
    ExecutePaymentReq:
      title: ExecutePaymentReq
      type: object
      properties:
        otp:
          type: string
          description: |
            One-time password sent to user's contact.
            Mandatory for payments with OTP_PHONE confirmation. Must be null for others.
        pin:
          type: string
          description: |
            Payer's master PIN.
            Mandatory for payments with MASTER_PIN confirmation. Must be null for others.
      description: Request to execute merchant payment
    PaymentFilterDto:
      title: PaymentFilterDto
      type: object
      properties:
        posId:
          type: string
          description: Point of Sale identifier
        statuses:
          uniqueItems: true
          type: array
          description: Payment statuses
          items:
            $ref: '#/components/schemas/MerchantPaymentStatus'
        identifier:
          type: integer
          description: Identifier
          format: int32
        invoiceAmount:
          type: number
          description: Amount
        orderId:
          type: string
          description: External identifier for the payment
        createdByUserId:
          type: string
          description: Identifier of a user who created searched payments
        smartCardNumber:
          type: string
          description: Smart card number (full or part)
      description: Filter settings
    MerchantPaymentStatus:
      type: string
      description: Merchant payment status
      enum:
      - pending
      - paid
      - refund
      - decline
    PaymentSortDto:
      title: PaymentSortDto
      type: object
      properties:
        date:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        invoiceAmount:
          type: string
          description: Invoice amount
          enum:
          - asc
          - desc
      description: Sort settings
    ViewPaymentsReq:
      title: ViewPaymentsReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/PaymentFilterDto'
          sort:
            $ref: '#/components/schemas/PaymentSortDto'
    PaymentPageResponse:
      title: PaymentPageResponse
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: Payments
            items:
              $ref: '#/components/schemas/PaymentDto'
    MeasureUnitCreateReqDto:
      title: MeasureUnitCreateReqDto
      required:
      - codes
      type: object
      properties:
        externalCode:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z\\d\\-\\_]+$"
          type: string
          description: Code from external system
          example: abc-1224
        codes:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for code field
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for description field
          items:
            $ref: '#/components/schemas/I18nRecord'
      description: Measure unit dto
    MeasureUnitViewResp:
      title: MeasureUnitViewResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        measureUnit:
          $ref: '#/components/schemas/MeasureUnitViewRespDto'
      description: Response to create a measure unit
    MeasureUnitUpdateExtCodeReq:
      title: MeasureUnitUpdateExtCodeReq
      required:
      - codes
      - externalCode
      type: object
      properties:
        codes:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for code field
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for description field
          items:
            $ref: '#/components/schemas/I18nRecord'
        externalCode:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Unit external code
      description: Update measure unit dto
    MeasureUnitExtCodeDeleteReq:
      title: MeasureUnitExtCodeDeleteReq
      required:
      - externalCode
      type: object
      properties:
        externalCode:
          type: string
          description: Unit external code
      description: Delete request
    MeasureUnitCreateReq:
      title: MeasureUnitCreateReq
      required:
      - units
      type: object
      properties:
        units:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/MeasureUnitCreateReqDto'
      description: Request to create a new measure unit
    MeasureUnitsViewResp:
      title: MeasureUnitsViewResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of measure unit data
          items:
            $ref: '#/components/schemas/MeasureUnitViewRespDto'
      description: Response to view measure records
    CreateMemberReq:
      title: CreateMemberReq
      required:
      - active
      - organizationId
      - role
      - userId
      type: object
      properties:
        userId:
          type: string
          description: User's identifier
        organizationId:
          type: string
          description: Organization's identifier
        role:
          type: string
          description: User's role in organization (code of role group)
        active:
          type: boolean
          description: Whether created member will be active
      description: Request to add user into specified organization as a member with
        specified role
    MemberDto:
      title: MemberDto
      required:
      - id
      - organization
      - role
      - user
      type: object
      properties:
        id:
          type: string
          description: Identifier
        role:
          type: string
          description: Role group
        user:
          $ref: '#/components/schemas/UserShortDto'
        organization:
          $ref: '#/components/schemas/OrganizationShortDto'
      description: Information about organization member
    ViewMemberResp:
      title: ViewMemberResp
      required:
      - member
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        member:
          $ref: '#/components/schemas/MemberDto'
      description: Response to member creation or viewing request
    ViewFileResp:
      title: ViewFileResp
      required:
      - file
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        file:
          $ref: '#/components/schemas/MediaFileDto'
      description: Response to media file uploading or updating or viewing request
    MediaFileFilterDto:
      title: MediaFileFilterDto
      type: object
      properties:
        id:
          type: string
          description: File identifier
        name:
          type: string
          description: File name
        types:
          type: array
          description: Media types
          items:
            type: string
        used:
          type: boolean
          description: Whether file is used
        expiresAtFrom:
          type: string
          description: Beginning of interval for expiration date
          format: date-time
        expiresAtTo:
          type: string
          description: End of interval for expiration date
          format: date-time
        createdAtFrom:
          type: string
          description: Beginning of interval for creation date
          format: date-time
        createdAtTo:
          type: string
          description: End of interval for creation date
          format: date-time
      description: Filter settings
    MediaFileSortDto:
      title: MediaFileSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        expiresAt:
          type: string
          description: Expiration date
          enum:
          - asc
          - desc
        name:
          type: string
          description: File name
          enum:
          - asc
          - desc
      description: Sort settings
    ViewMediaFilesReq:
      title: ViewMediaFilesReq
      required:
      - filter
      - sort
      description: Request to view media files
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/MediaFileFilterDto'
          sort:
            $ref: '#/components/schemas/MediaFileSortDto'
    ViewMediaFilesResp:
      title: ViewMediaFilesResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: Media files
            items:
              $ref: '#/components/schemas/MediaFileDto'
    CreateFilterTemplateReq:
      title: CreateFilterTemplateReq
      required:
      - name
      - parameters
      - urlPath
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The filter template name
        parameters:
          type: object
          additionalProperties:
            type: object
            description: Filter parameter
          description: Filter parameters
        urlPath:
          maxLength: 255
          minLength: 1
          type: string
          description: The url path without domain where filter is used
      description: Create filter template request
    UpdateBusinessProcessHistoryRequest:
      title: UpdateBusinessProcessHistoryRequest
      required:
      - businessProcessIds
      type: object
      properties:
        businessProcessIds:
          uniqueItems: true
          type: array
          description: List of business processes ids for update
          items:
            type: string
      description: Request to update business process history
    CreateIssuerReq:
      title: CreateIssuerReq
      required:
      - active
      - currencyCode
      - description
      - name
      - snPrefix
      type: object
      properties:
        snPrefix:
          maxLength: 15
          minLength: 1
          type: string
          description: Unique code for issuer
          example: GBP
        currencyCode:
          maxLength: 12
          minLength: 1
          type: string
          description: Code of currency that will be used by this issuer
          example: GBP
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Issuer name
          example: GBP Issuer
        description:
          maxLength: 255
          minLength: 0
          type: string
          description: Issuer description
          example: GBP Issuer
        active:
          type: boolean
          description: Whether created issuer will be active
          example: true
        orderNumber:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: Ordering number
          format: int32
        orderQuote:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: Ordering quote
          format: int32
      description: Request to create a new issuer
    IssuerDto:
      title: IssuerDto
      required:
      - active
      - currency
      - description
      - id
      - name
      - sn
      type: object
      properties:
        id:
          type: string
          description: "Identifier of the Issuer, pass it to the API where Issuer\
            \ ID is required"
          example: b51d65c1-79cd-4e96-99f3-8db991194d76
        sn:
          maxLength: 255
          minLength: 1
          type: string
          description: Unique code
          example: EUR
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Issuer name
          example: EUR Issuer
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Issuer description
          example: EUR Issuer
        orderNumber:
          type: integer
          description: Ordering number
          format: int32
        orderQuote:
          type: integer
          description: Ordering quote
          format: int32
        active:
          type: boolean
          description: Whether issuer is active
          example: true
        currency:
          $ref: '#/components/schemas/CurrencyDto'
      description: Issuer
    IssuerResp:
      title: IssuerResp
      required:
      - issuer
      type: object
      properties:
        issuer:
          $ref: '#/components/schemas/IssuerDto'
        message:
          type: string
          description: Response message
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response to issuer creation/modification request
    CreateInvoiceReq:
      title: CreateInvoiceReq
      required:
      - amount
      - data
      - expiresAt
      - name
      - payerContact
      - recipientCoin
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        payerContact:
          maxLength: 255
          minLength: 0
          type: string
          description: "Payer's contact: email or phone number"
        recipientCoin:
          maxLength: 255
          minLength: 1
          type: string
          description: Merchant's coin serial
        templateName:
          maxLength: 255
          minLength: 1
          type: string
          description: Template name
        data:
          $ref: '#/components/schemas/InvoiceDataDto'
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount
        expiresAt:
          type: string
          description: Expiration date
          format: date-time
      description: Request to create a new invoice
    InvoiceDataDto:
      title: InvoiceDataDto
      type: object
      description: Invoice data
    InvoiceDto:
      title: InvoiceDto
      required:
      - createdAt
      - createdByUser
      - data
      - expiresAt
      - identifier
      - merchantName
      - name
      - payerContact
      - status
      - totalPrice
      type: object
      properties:
        identifier:
          type: string
          description: Identifier
        name:
          type: string
          description: Name
        createdAt:
          type: string
          description: Creation date
          format: date-time
        createdByUser:
          $ref: '#/components/schemas/UserShortDto'
        status:
          type: string
          description: Status
          enum:
          - initiated
          - pending
          - approved
          - paid
          - declined
          - expired
          - hidden
        payer:
          $ref: '#/components/schemas/OrganizationShortDto'
        payerContact:
          type: string
          description: Payer's contact
        merchantName:
          type: string
          description: Name of merchant
        totalPrice:
          type: number
          description: Total price
        expiresAt:
          type: string
          description: Expiration date
          format: date-time
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        data:
          $ref: '#/components/schemas/InvoiceDataDto'
        paymentCode:
          type: string
          description: |
            Payment code.
            Will return code if API client created invoice with payerContract field which does not exist in system.
            Also environment variable `merchant.invoice.return-registration-code` must be enabled
      description: Invoice
    InvoiceResp:
      title: InvoiceResp
      required:
      - invoice
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        invoice:
          $ref: '#/components/schemas/InvoiceDto'
      description: Response to any invoice creation or modification request
    InvoicePayRequest:
      title: InvoicePayRequest
      required:
      - payerCoin
      type: object
      properties:
        payerCoin:
          type: string
          description: Payer's coin serial
      description: Request to pay for invoice
    CalculatePayerInvoiceCommissionReq:
      title: CalculatePayerInvoiceCommissionReq
      type: object
      properties:
        payerCoin:
          type: string
          description: Payer's coin serial
      description: Request to calculate payer's commission for invoice
    InvoiceFilterDto:
      title: InvoiceFilterDto
      required:
      - direction
      type: object
      properties:
        statuses:
          type: array
          description: invoice statuses
          items:
            $ref: '#/components/schemas/InvoiceStatus'
        identifier:
          type: string
          description: invoice identifier
        totalPrice:
          type: number
          description: invoice price
        direction:
          $ref: '#/components/schemas/InvoiceDirection'
        createdByUserId:
          type: string
          description: Identifier of a user who created searched payments
        name:
          type: string
          description: Invoice name
      description: Invoice Filter Dto
    InvoiceStatus:
      type: string
      description: Invoice status
      enum:
      - initiated
      - pending
      - approved
      - paid
      - declined
      - expired
      - hidden
    InvoiceDirection:
      type: string
      description: |
        Direction of the invoice.
        INCOMING means invoices to be paid by current user.
        OUTGOING means invoices created by current user
      enum:
      - INCOMING
      - OUTGOING
    InvoiceSortDto:
      title: InvoiceSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: creation date
          enum:
          - asc
          - desc
        totalPrice:
          type: string
          description: total invoice price
          enum:
          - asc
          - desc
        status:
          type: string
          description: invoice status
          enum:
          - asc
          - desc
      description: Invoice Sort Dto
    ViewInvoicesReq:
      title: ViewInvoicesReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/InvoiceFilterDto'
          sort:
            $ref: '#/components/schemas/InvoiceSortDto'
    InvoicePageResponse:
      title: InvoicePageResponse
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: Invoices
            items:
              $ref: '#/components/schemas/InvoiceDto'
    CalculateMerchantInvoiceCommissionReq:
      title: CalculateMerchantInvoiceCommissionReq
      required:
      - amount
      - payerContact
      - recipientCoin
      type: object
      properties:
        payerContact:
          maxLength: 255
          minLength: 0
          type: string
          description: Payer email or phone number
        recipientCoin:
          maxLength: 255
          minLength: 1
          type: string
          description: Merchant coin serial
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Invoice amount
      description: Request to calculate invoice commission before invoice creation
    CreateInvoiceTemplateReq:
      title: CreateInvoiceTemplateReq
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of template
        invoiceIdentifier:
          type: string
          description: Invoice identifier. You should fill this field or invoiceDraft
            field
        invoiceDraft:
          $ref: '#/components/schemas/InvoiceDraftDto'
      description: Request to create invoice template
    InvoiceDraftDto:
      title: InvoiceDraftDto
      required:
      - amount
      - data
      - expiresAt
      - name
      - payerContact
      - recipientCoin
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: Name for invoice in template
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount
        payerContact:
          maxLength: 255
          minLength: 0
          type: string
          description: "Payer's contact: email or phone number"
        recipientCoin:
          maxLength: 255
          minLength: 1
          type: string
          description: Merchant's coin serial
        data:
          $ref: '#/components/schemas/InvoiceDataDto'
        expiresAt:
          type: string
          description: Expiration date
          format: date-time
      description: Information about invoice template data
    InvoiceTemplateResp:
      title: InvoiceTemplateResp
      required:
      - template
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        template:
          $ref: '#/components/schemas/InvoiceTemplateDto'
      description: Response to show invoice template info
    InvoiceTemplateDto:
      title: InvoiceTemplateDto
      description: Representation of invoice template
      allOf:
      - $ref: '#/components/schemas/CommonTemplateDto'
      - required:
        - createdAt
        - data
        - expiresAt
        - invoiceName
        - payerContact
        - recipientCoin
        type: object
        properties:
          invoiceName:
            type: string
            description: Name of invoice
          payerContact:
            type: string
            description: "Payer's contact: email or phone number"
          recipientCoin:
            type: string
            description: Merchant's coin serial
          data:
            $ref: '#/components/schemas/InvoiceDataDto'
          createdAt:
            type: string
            description: Creation date
            format: date-time
          expiresAt:
            type: string
            description: Expiration date
            format: date-time
    ViewTemplatesResp:
      title: ViewTemplatesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of invoice templates
          items:
            $ref: '#/components/schemas/InvoiceTemplateDto'
      description: Response to invoice templates viewing request
    InvestmentReq:
      title: InvestmentReq
      required:
      - amount
      - fullName
      - serial
      type: object
      properties:
        amount:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: Investment amount
        serial:
          type: string
          description: Coin serial
        fullName:
          type: string
          description: Cash collector's full name
      description: Necessary parameters for investment
    InputReq:
      title: InputReq
      required:
      - amount
      - fullName
      - serial
      type: object
      properties:
        amount:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: Input amount
        serial:
          type: string
          description: Coin serial
        fullName:
          type: string
          description: Cash collector's full name
      description: Necessary parameters
    CreateTxReq:
      title: CreateTxReq
      required:
      - amount
      - coin
      - method
      - type
      type: object
      properties:
        coin:
          type: string
          description: Serial number of coin that will be used to execute a transaction
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Transaction amount
        type:
          pattern: TOPUP|REDEEM
          type: string
          description: Transaction type
          enum:
          - TOPUP
          - REDEEM
        deviceId:
          maxLength: 255
          minLength: 0
          type: string
          description: |
            Additional field means device (like mobile POS) where transaction was created.
            Can be used later for filtering and grouping
        deviceOrderId:
          maxLength: 255
          minLength: 0
          type: string
          description: Your own identifier of the transaction (external system or
            payment provider's)
        method:
          $ref: '#/components/schemas/UsePaymentMethodDto'
        description:
          type: string
          description: Optional description
      description: Request to create a gate transaction
    UsePaymentMethodDto:
      required:
      - gateProviderId
      - way
      type: object
      properties:
        gateProviderId:
          type: string
        way:
          maxLength: 255
          minLength: 1
          type: string
    TxDtoResp:
      title: TxDtoResp
      required:
      - transaction
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        transaction:
          $ref: '#/components/schemas/TxDto'
      description: Response to gate transaction status request or gate transaction
        processing request
    DataReq:
      title: DataReq
      required:
      - fields
      - optionName
      type: object
      properties:
        optionName:
          type: string
          description: Name of the selected form filling option
          example: default
        fields:
          type: array
          description: List of filled fields
          items:
            $ref: '#/components/schemas/FilledFieldDto'
      description: Form filling request
    Form:
      title: Form
      type: object
      properties:
        url:
          type: string
        method:
          type: string
          enum:
          - GET
          - POST
        parameters:
          type: object
          additionalProperties:
            type: object
            description: Form parameter
    SubmitTxResp:
      title: SubmitTxResp
      required:
      - transaction
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        transaction:
          $ref: '#/components/schemas/TxDto'
        form:
          $ref: '#/components/schemas/Form'
      description: Response to request for sending gate transaction to payment provider
    ViewTxsFilter:
      title: ViewTxsFilter
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          description: Gate transaction's identifiers
          items:
            type: string
        externalIds:
          uniqueItems: true
          type: array
          description: Identifiers assigned by an external payment system or auto-generated
            for transaction created by terminals
          items:
            type: string
        orderIds:
          uniqueItems: true
          type: array
          description: Numerical identifiers
          items:
            type: integer
            format: int64
        types:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TxType'
        statuses:
          uniqueItems: true
          type: array
          description: Transaction statuses
          items:
            $ref: '#/components/schemas/TxStatus'
        deviceIds:
          uniqueItems: true
          type: array
          description: Device identifiers
          items:
            type: string
        processIds:
          uniqueItems: true
          type: array
          description: Identifiers of gate business process
          items:
            type: string
      description: Filtering parameters for viewing gate transactions
    TxType:
      type: string
      description: Gate transaction type
      enum:
      - TOPUP
      - REDEEM
      - PURCHASE
    TxStatus:
      type: string
      description: Gate transaction status
      enum:
      - INITIATED
      - PROVIDER_ASSIGNED
      - PENDING
      - PROVIDER_PROCESSED
      - PROCESSED
      - FAILURE
      - EXCEPTION
    ViewTxsReq:
      title: ViewTxsReq
      required:
      - filter
      - sort
      description: Request to view gate transactions
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ViewTxsFilter'
          sort:
            $ref: '#/components/schemas/ViewTxsSort'
    ViewTxsSort:
      type: object
      properties:
        date:
          type: string
          enum:
          - asc
          - desc
    PageResponseTxDto:
      title: PageResponseTxDto
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            items:
              $ref: '#/components/schemas/TxDto'
    PaymentPointsReq:
      title: PaymentPointsReq
      required:
      - gateProviderId
      - txType
      type: object
      properties:
        gateProviderId:
          type: string
          description: Id of specified gate provider
        txType:
          pattern: TOPUP|REDEEM
          type: string
          description: Transaction type
          enum:
          - TOPUP
          - REDEEM
      description: Request to get payment points for top up or withdrawal via external
        payment system
    PaymentPoint:
      title: PaymentPoint
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        countryIsoCode:
          type: string
        currency:
          type: string
        precision:
          type: string
        increment:
          type: string
    PaymentPointsResp:
      title: PaymentPointsResp
      required:
      - paymentPoints
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        paymentPoints:
          uniqueItems: true
          type: array
          description: Available form filling options
          items:
            $ref: '#/components/schemas/PaymentPoint'
      description: List of payment points
    CalculateCommissionReq:
      title: CalculateGateCommissionReq
      required:
      - amount
      - gateProviderId
      - payerId
      - serial
      - txType
      type: object
      properties:
        gateProviderId:
          type: string
          description: Id of specified gate provider
        serial:
          type: string
          description: Coin's serial number
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Transaction amount
        txType:
          pattern: TOPUP|REDEEM|PURCHASE
          type: string
          description: Transaction type
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
        payerId:
          type: string
          description: Id of payer in external payment service
      description: Request to calculate commission for top up or withdrawal via external
        payment system
    TxCommissionDtoResp:
      title: TxCommissionDtoResp
      required:
      - amountToSend
      - commissionAmount
      - currency
      - sourceAmount
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        sourceAmount:
          type: number
          description: Amount specified in the request
        amountToSend:
          type: number
          description: "Value to be sent to payment provider: source amount plus commission"
        commissionAmount:
          type: number
          description: Commission amount
        currency:
          $ref: '#/components/schemas/CurrencyDto'
      description: Response that contains calculated commission for gate transaction
    CreatePurchaseReq:
      title: CreatePurchaseReq
      required:
      - amount
      - productId
      - serial
      type: object
      properties:
        productId:
          type: string
          description: Identifier of the product
        serial:
          type: string
          description: Serial number of coin that will be used to execute a purchase
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Purchase amount
      description: Request to create purchase
    FilterProductsReq:
      title: FilterProductsReq
      description: Request to filter products available for purchase
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ProductsFilterDto'
          sort:
            $ref: '#/components/schemas/ProductSortDto'
    FilterProductsResp:
      title: FilterProductsResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of products
            items:
              $ref: '#/components/schemas/ProductDto'
    ProductSortDto:
      title: ProductSortDto
      type: object
      properties:
        category:
          type: string
          description: Category of product
          enum:
          - asc
          - desc
      description: Sort settings
    ProductsFilterDto:
      title: ProductsFilterDto
      type: object
      properties:
        id:
          type: string
          description: Product ID
        category:
          $ref: '#/components/schemas/ProductCategory'
        gateProviderId:
          type: string
          description: Gate provider id
        name:
          type: string
          description: Product name
      description: Filter settings
    ProductCategory:
      type: string
      description: Product category
      enum:
      - MOBILE
      - INTERNET_TV
      - SIP
      - COMMUNAL
      - BANK
      - WEB_MONEY
      - ENTERTAINMENT
      - OTHER
    PaymentMethodsReq:
      title: PaymentMethodsReq
      required:
      - serial
      - txType
      type: object
      properties:
        txType:
          pattern: TOPUP|REDEEM
          type: string
          description: Gate transaction type
          enum:
          - TOPUP
          - REDEEM
        serial:
          type: string
          description: Coin's serial number
      description: Request to retrieve list of available payment methods
    PaymentMethodsResp:
      title: PaymentMethodsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Array of available gate methods
          items:
            $ref: '#/components/schemas/ViewPaymentMethodDto'
      description: Response model containing array of available methods for gate transaction
        execution
    RateDto:
      title: RateDto
      required:
      - active
      - direction
      - exchanger
      - id
      - inIssuer
      - outIssuer
      - rate
      - reserve
      type: object
      properties:
        id:
          type: string
          description: Exchange rate identifier
        inIssuer:
          $ref: '#/components/schemas/IssuerShortDto'
        outIssuer:
          $ref: '#/components/schemas/IssuerShortDto'
        rate:
          type: number
          description: Rate value
        direction:
          type: string
          description: Direction
          enum:
          - buy
          - sell
        exchanger:
          $ref: '#/components/schemas/OrganizationShortDto'
        reserve:
          type: number
          description: Reserve
        active:
          type: boolean
          description: Active
      description: Exchange rate's information
    SetExchangeRateResp:
      title: SetExchangeRateResp
      required:
      - rate
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        rate:
          $ref: '#/components/schemas/RateDto'
      description: Response create and update exchange rate
    ViewExchangeRatesReq:
      title: ViewExchangeRatesReq
      required:
      - inIssuerId
      - outIssuerId
      type: object
      properties:
        inIssuerId:
          type: string
        outIssuerId:
          type: string
      description: Request to view exchange rates
    ViewRatesResp:
      title: ViewRatesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of exchange rates
          items:
            $ref: '#/components/schemas/RateDto'
      description: Response to view exchange rates
    SetExchangeRateReq:
      title: SetExchangeRateReq
      required:
      - inIssuerId
      - outIssuerId
      - rate
      type: object
      properties:
        rate:
          minimum: 0
          type: number
          description: Rate required
        inIssuerId:
          type: string
          description: Serial number of coin where funds will be taken from
        outIssuerId:
          type: string
          description: Serial number of coin where exchanged funds will be transferred
            to
      description: Request to perform an exchange
    EmailNotificationReq:
      title: EmailNotificationReq
      required:
      - body
      - id
      - subject
      type: object
      properties:
        id:
          maxLength: 155
          minLength: 1
          type: string
          description: Identifier of user to whom notification will be sent
          example: 61b065de-58ef-4959-ab5e-4a2d75ab6564
        subject:
          maxLength: 155
          minLength: 1
          type: string
          description: Subject of the notification
          example: Account activation
        body:
          type: string
          description: Text of the notification
          example: You account was activated
    CreateCurrencyReq:
      title: CreateCurrencyReq
      required:
      - code
      - description
      - digitalCode
      - name
      - symbol
      type: object
      properties:
        code:
          maxLength: 12
          minLength: 1
          type: string
          description: |
            It can be ISO-4217 Currency alphabetic code for real currencies or any code for other entities created as Currency in the system.
            This value should be provided to create Issuer for the Currency.
          example: GBP
        digitalCode:
          maxLength: 12
          minLength: 1
          type: string
          description: |
            It can be ISO-4217 Currency numeric code for real currencies or any numeric code for other entities created as Currency in the system.
          example: "926"
        symbol:
          maxLength: 12
          minLength: 1
          type: string
          description: Currency symbol
          example: £
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Currency name
          example: British Pound Sterling
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Currency description
          example: British Pound Sterling
      description: Request to create a currency
    CurrencyResp:
      title: CurrencyResp
      required:
      - currency
      description: Response to currency creation
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          currency:
            $ref: '#/components/schemas/CurrencyDto'
    CreateMessageReq:
      title: CreateMessageReq
      required:
      - text
      type: object
      properties:
        text:
          maxLength: 10240
          minLength: 1
          type: string
          description: Message text
      description: Request to write a message
    CreateOrUpdateMessageResp:
      title: CreateOrUpdateMessageResp
      required:
      - value
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        value:
          $ref: '#/components/schemas/MessageDto'
      description: Response to message creation and modification request
    MessageDto:
      title: MessageDto
      required:
      - id
      - read
      - sender
      - text
      type: object
      properties:
        id:
          type: string
          description: Identifier of this message
        sender:
          $ref: '#/components/schemas/ParticipantDto'
        text:
          type: string
          description: Text
        createdAt:
          type: string
          description: When message was created
          format: date-time
        updatedAt:
          type: string
          description: Last time when message was edited
          format: date-time
        read:
          type: boolean
          description: Whether this messages was read by current user
      description: Information about single message in conversation
    MessageFilterDto:
      title: MessageFilterDto
      type: object
      properties:
        id:
          type: string
          description: Identifier of message
        text:
          type: string
          description: Part of message text
        senderType:
          $ref: '#/components/schemas/ParticipantType'
        senderEntityId:
          type: string
          description: "Identifier of sender entity: User or Organization"
        unread:
          type: boolean
          description: Whether message is unread
        createdAtFrom:
          type: string
          description: Beginning of interval for message creation date
          format: date-time
        createdAtTo:
          type: string
          description: End of interval for message creation date
          format: date-time
      description: Filter settings
    MessageSortDto:
      title: MessageSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date of message
          enum:
          - asc
          - desc
      description: Sort settings
    ViewMessagesReq:
      title: ViewMessagesReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/MessageFilterDto'
          sort:
            $ref: '#/components/schemas/MessageSortDto'
    ConversationFilterDto:
      title: ConversationFilterDto
      type: object
      properties:
        id:
          type: string
          description: Identifier of conversation
        broadcast:
          type: boolean
          description: Whether conversation is broadcast (read-only)
        name:
          type: string
          description: Name of conversation
        text:
          type: string
          description: "Any text entry occurred within conversation, either in conversation\
            \ name or in message body"
        initiatorType:
          $ref: '#/components/schemas/ParticipantType'
        initiatorEntityId:
          type: string
          description: "Identifier of initiator entity: User or Organization"
        unread:
          type: boolean
          description: Whether conversation is unread
        createdAtFrom:
          type: string
          description: Beginning of interval for creation date
          format: date-time
        createdAtTo:
          type: string
          description: End of interval for creation date
          format: date-time
        lastMessageCreatedAtFrom:
          type: string
          description: Beginning of interval for creation date
          format: date-time
        lastMessageCreatedAtTo:
          type: string
          description: End of interval for creation date
          format: date-time
      description: Filter settings
    ParticipantType:
      type: string
      description: Participant type
      enum:
      - ORGANIZATION
      - USER
      - SYSTEM
    ConversationSortDto:
      title: ConversationSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date of conversation
          enum:
          - asc
          - desc
        lastMessageCreatedAt:
          type: string
          description: Creation date of last message
          enum:
          - asc
          - desc
        unread:
          type: string
          description: Read conversations first
          enum:
          - asc
          - desc
      description: Sort settings
    ViewConversationsReq:
      title: ViewConversationsReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ConversationFilterDto'
          sort:
            $ref: '#/components/schemas/ConversationSortDto'
    CreateSystemBroadcastsReq:
      title: CreateSystemBroadcastsReq
      required:
      - mode
      - text
      type: object
      properties:
        mode:
          type: string
          description: |
            Broadcasts creation mode.
            ALL_USERS_WITH_IDS mode means broadcasts will be created for all users with identifiers from `ids` list.
            ALL_ORGANIZATIONS_WITH_IDS mode means broadcasts will be created for all organizations with identifiers from `ids` list.
            ALL_ORGANIZATIONS_OF_TYPES mode means broadcasts will be created for all organizations with types from `organizationTypes` list.
            ALL_USERS_FROM_ORGANIZATIONS_WITH_IDS mode means broadcasts will be created for all users belonging to all organizations with identifiers from `ids` list.
          enum:
          - ALL_USERS_WITH_IDS
          - ALL_ORGANIZATIONS_WITH_IDS
          - ALL_ORGANIZATIONS_OF_TYPES
          - ALL_USERS_FROM_ORGANIZATIONS_WITH_IDS
        organizationTypes:
          maxItems: 2147483647
          minItems: 1
          uniqueItems: true
          type: array
          description: |
            Types of organizations.
            This field is used only when ALL_ORGANIZATIONS_OF_TYPES mode is selected
          items:
            type: string
        ids:
          maxItems: 2147483647
          minItems: 1
          uniqueItems: true
          type: array
          description: |
            List of identifiers.
            This field is used when either ALL_USERS_WITH_IDS, ALL_ORGANIZATIONS_WITH_IDS or ALL_USERS_FROM_ORGANIZATIONS_WITH_IDS mode is selected
          items:
            type: string
        title:
          maxLength: 255
          minLength: 1
          type: string
          description: |
            Title of the broadcast.
            Null means default title for system conversations will be used.
            Will be used only for CREATE_NEW creation policy.
        creationPolicy:
          type: string
          description: |
            Broadcast creation policy.
            CREATE_NEW means a new conversation will be created with a new message.
            APPEND means an existing system conversation will be used to add a new message.
            APPEND policy is used by default if this value is not specified.
          enum:
          - CREATE_NEW
          - APPEND
        conversationId:
          type: string
          description: Identifier of system broadcast that will be used when creation
            policy is set to APPEND
        text:
          maxLength: 10240
          minLength: 1
          type: string
          description: Text of the broadcast
        fileIds:
          maxItems: 10
          minItems: 0
          uniqueItems: true
          type: array
          description: Identifiers of files to be attached
          items:
            type: string
      description: Request to create system broadcasts
    ConversationDto:
      title: ConversationDto
      required:
      - broadcast
      - id
      - initiator
      - name
      - unread
      type: object
      properties:
        id:
          type: string
          description: Identifier of conversation
        name:
          type: string
          description: Name of conversation
        broadcast:
          type: boolean
          description: Whether conversation is read-only
        unread:
          type: boolean
          description: Whether conversation is not read by current user
        createdAt:
          type: string
          description: When conversation was created
          format: date-time
        lastMessageCreatedAt:
          type: string
          description: When last message was written
          format: date-time
        initiator:
          $ref: '#/components/schemas/ParticipantDto'
        participants:
          uniqueItems: true
          type: array
          description: All participants of this conversations. Will be null if conversation
            is a broadcast.
          items:
            $ref: '#/components/schemas/ParticipantDto'
      description: Information about single conversation
    CreateSystemBroadcastsResp:
      title: CreateSystemBroadcastsResp
      required:
      - conversation
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        conversation:
          $ref: '#/components/schemas/ConversationDto'
      description: Response to create system broadcast request
    ViewCommissionProfilesReq:
      title: ViewCommissionProfilesReq
      required:
      - issuerId
      - operationFlowId
      type: object
      properties:
        issuerId:
          type: string
          description: Identifier of the issuer
        operationFlowId:
          type: string
          description: Identifier of the Operation Flow
      description: Request to view commission profiles
    CreateCommissionProfileReq:
      title: CreateCommissionProfileReq
      required:
      - destParticipantSpecification
      - issuerId
      - operationFlowId
      - srcParticipantSpecification
      type: object
      properties:
        issuerId:
          type: string
          description: Identifier of the issuer
        operationFlowId:
          type: string
          description: Identifier of the Operation Flow
        srcParticipantSpecification:
          $ref: '#/components/schemas/ParticipantSpecDto'
        destParticipantSpecification:
          $ref: '#/components/schemas/ParticipantSpecDto'
      description: Request to create a commission profile
    CreateCommissionProfileMultiCurrencyReq:
      title: CreateCommissionProfileMultiCurrencyReq
      required:
      - destParticipantSpecification
      - destinationIssuerId
      - operationFlowId
      - sourceIssuerId
      - srcParticipantSpecification
      type: object
      properties:
        sourceIssuerId:
          type: string
          description: Identifier of the source issuer
        destinationIssuerId:
          type: string
          description: Identifier of the destination issuer
        operationFlowId:
          type: string
          description: Identifier of the Operation Flow which support multi currency
        srcParticipantSpecification:
          $ref: '#/components/schemas/ParticipantSpecDto'
        destParticipantSpecification:
          $ref: '#/components/schemas/ParticipantSpecDto'
      description: Request to create a multi currency commission profile
    ParticipantSpecDto:
      title: ParticipantSpecDto
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of specification
          enum:
          - "no"
          - personType
        value:
          maxLength: 255
          minLength: 0
          type: string
          description: Specification's value
      description: Information about specification of transaction participant. Describes
        how to select such participant
    CommissionProfileDto:
      title: CommissionProfileDto
      required:
      - active
      - commissionRules
      - contract
      - createdAt
      - destParticipantSpecification
      - flow
      - id
      - issuer
      - srcParticipantSpecification
      - updatedAt
      type: object
      properties:
        id:
          type: string
          description: Commission profile identifier
        createdAt:
          type: string
          description: When profile was created
          format: date-time
        updatedAt:
          type: string
          description: Last time profile was updated
          format: date-time
        flow:
          $ref: '#/components/schemas/OperationFlowDto'
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        destinationIssuer:
          $ref: '#/components/schemas/IssuerShortDto'
        srcParticipantSpecification:
          $ref: '#/components/schemas/ParticipantSpecDto'
        destParticipantSpecification:
          $ref: '#/components/schemas/ParticipantSpecDto'
        contract:
          $ref: '#/components/schemas/ContractDto'
        commissionRules:
          type: array
          description: List of internal commission rules
          items:
            $ref: '#/components/schemas/InternalCommissionRuleDto'
        active:
          type: boolean
          description: Whether profile is active
      description: Information about commission profile
    CreateOrUpdateCommissionProfileResp:
      title: CreateOrUpdateCommissionProfileResp
      required:
      - profile
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        profile:
          $ref: '#/components/schemas/CommissionProfileDto'
      description: Response for commission profile creation or modification request
    OperationFlowDto:
      title: OperationFlowDto
      required:
      - code
      - destCoinType
      - id
      - isMultiCurrency
      - processType
      - srcCoinType
      - transactionType
      type: object
      properties:
        id:
          type: string
          description: Identifier of operation flow
        code:
          type: string
          description: Human-readable code
        transactionType:
          type: string
          description: Type of transaction
          enum:
          - transfer
          - split
          - merge
          - issue
          - balance
          - redeem
          - commission
          - authorization
          - commission_authorization
          - capture
          - commission_capture
          - reversal
          - commission_reversal
          - hold
        processType:
          type: string
          description: Type of business process
        srcCoinType:
          type: string
          description: Type of source coin
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
        destCoinType:
          type: string
          description: Type of destination coin
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
        isMultiCurrency:
          type: boolean
          description: Is operation flow multi-currency
      description: Operation flow information
    CreateGateProfileReq:
      title: CreateGateProfileReq
      required:
      - currencyCode
      - gateProviderId
      type: object
      properties:
        gateProviderId:
          type: string
          description: Identifier of the gate provider
        currencyCode:
          type: string
          description: Code of currency supported by provider
      description: Request to create a gate profile
    GateProfileDto:
      title: GateProfileDto
      required:
      - createdAt
      - updatedAt
      type: object
      properties:
        id:
          type: string
          description: Profile identifier
        gateProviderId:
          type: string
          description: Identifier of the gate provider
        providerCurrency:
          $ref: '#/components/schemas/CurrencyDto'
        createdAt:
          type: string
          description: When profile was created
          format: date-time
        updatedAt:
          type: string
          description: Last time profile was updated
          format: date-time
      description: Information about gate profile
    ViewGateProfileResp:
      title: ViewGateProfileResp
      required:
      - profile
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        profile:
          $ref: '#/components/schemas/GateProfileDto'
      description: "Response to gate profile create, update and view request"
    CreateProductCommissionSettingsReq:
      title: CreateProductCommissionSettingsReq
      required:
      - active
      - productId
      - providerCommission
      - totalCommission
      type: object
      properties:
        productId:
          type: string
          description: Identifier of the product
        providerCommission:
          $ref: '#/components/schemas/CommissionValueDto'
        totalCommission:
          $ref: '#/components/schemas/CommissionValueDto'
        commissionDirection:
          type: string
          description: Commission direction
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Whether these settings will be active
      description: Request to create product commission settings
    ProductCommissionSettingsDto:
      title: ProductCommissionSettingsDto
      required:
      - active
      - collector
      - commissionDirection
      - id
      - product
      - value
      type: object
      properties:
        id:
          type: string
          description: Identifier
        product:
          $ref: '#/components/schemas/ProductDto'
        collector:
          type: string
          description: Who collects the commission
          enum:
          - BANK
          - PROVIDER
          - SDK_FINANCE
          - TOTAL
        active:
          type: boolean
          description: Whether these settings are active
        value:
          $ref: '#/components/schemas/CommissionValueDto'
        commissionDirection:
          type: string
          description: Direction of commission
          enum:
          - IN
          - OUT
      description: Product commission settings information
    ViewProductCommissionSettingsRecordsResp:
      title: ViewProductCommissionSettingsRecordsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of product commission settings records
          items:
            $ref: '#/components/schemas/ProductCommissionSettingsDto'
      description: Response to product commission settings viewing request
    CreateGateLimitProfileReq:
      title: CreateGateLimitProfileReq
      required:
      - active
      - qualifier
      - timeUnit
      - value
      type: object
      properties:
        txType:
          pattern: TOPUP|REDEEM
          type: string
          description: Type of transaction this limit will be applied to. Must be
            null if productId is filled.
          enum:
          - TOPUP
          - REDEEM
        productId:
          type: string
          description: Identifier of product this limit will be applied to. Must be
            null if txType is filled.
        qualifier:
          type: string
          description: Qualifier
          enum:
          - amount
          - quantity
        timeUnit:
          type: string
          description: Time unit
          enum:
          - per_transaction
          - per_day
          - per_week
          - per_month
          - per_quarter
          - per_year
          - per_life
        value:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Limit value
        active:
          type: boolean
          description: Whether limit is active
      description: Request to create gate limit profile
    GateLimitProfileDto:
      title: GateLimitProfileDto
      required:
      - active
      - gateProfileId
      - id
      - qualifier
      - timeUnit
      - value
      type: object
      properties:
        id:
          type: string
          description: Identifier of the limit profile
        gateProfileId:
          type: string
          description: Identifier of the gate commission profile this limit is applied
            to
        txType:
          type: string
          description: Type of transaction this limit is applied to (may be null)
        product:
          $ref: '#/components/schemas/ProductDto'
        qualifier:
          type: string
          description: Qualifier
          enum:
          - amount
          - quantity
        timeUnit:
          type: string
          description: Time unit
          enum:
          - per_transaction
          - per_day
          - per_week
          - per_month
          - per_quarter
          - per_year
          - per_life
        value:
          type: number
          description: Limit value
        active:
          type: boolean
          description: Whether limit is active
      description: Information about limit profile
    ViewGateLimitProfileResp:
      title: ViewGateLimitProfileResp
      required:
      - profile
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        profile:
          $ref: '#/components/schemas/GateLimitProfileDto'
      description: "Response to create, update and view gate limit profile"
    CreateExchangeSettingsReq:
      title: CreateExchangeSettingsReq
      required:
      - issuerId
      - rate
      type: object
      properties:
        issuerId:
          type: string
          description: Identifier of the coin's issuer
        rate:
          maximum: 1
          exclusiveMaximum: false
          minimum: 1
          exclusiveMinimum: false
          type: number
          description: "Exchange rate that will be used for payments: defined as rate\
            \ between providers currency and coins currency. Currently only 1-to-1\
            \ rate is supported."
          example: 1
      description: Request to create exchange settings
    ExchangeSettingsDto:
      title: ExchangeSettingsDto
      required:
      - issuer
      - rate
      type: object
      properties:
        id:
          type: string
          description: Identifier
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        rate:
          type: number
          description: "Exchange rate that will be used for payments: defined as rate\
            \ between providers currency and coins currency"
      description: Exchange settings information
    ViewExchangeSettingsRecordResp:
      title: ViewExchangeSettingsRecordResp
      required:
      - record
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        record:
          $ref: '#/components/schemas/ExchangeSettingsDto'
      description: "Response to exchange settings create, update and view request"
    CreateCommissionSettingsReq:
      title: CreateCommissionSettingsReq
      required:
      - active
      - providerCommission
      - totalCommission
      - txType
      type: object
      properties:
        txType:
          pattern: TOPUP|REDEEM
          type: string
          description: Transaction type
          enum:
          - TOPUP
          - REDEEM
        providerCommission:
          $ref: '#/components/schemas/CommissionValueDto'
        totalCommission:
          $ref: '#/components/schemas/CommissionValueDto'
        commissionDirection:
          type: string
          description: Commission direction
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Whether these settings will be active
      description: Request to create commission settings
    CommissionSettingsDto:
      title: CommissionSettingsDto
      required:
      - active
      - collector
      - direction
      - id
      - txType
      - value
      type: object
      properties:
        id:
          type: string
          description: Identifier
        txType:
          type: string
          description: Type of transaction these settings are applied to
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
        collector:
          type: string
          description: Who collects the commission
          enum:
          - BANK
          - PROVIDER
          - SDK_FINANCE
          - TOTAL
        direction:
          type: string
          description: Direction of commission
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Whether these settings are active
        value:
          $ref: '#/components/schemas/CommissionValueDto'
      description: Commission settings information
    ViewCommissionSettingsRecordsResp:
      title: ViewCommissionSettingsRecordsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of commission settings records
          items:
            $ref: '#/components/schemas/CommissionSettingsDto'
      description: Response to commission settings viewing request
    CreateGateCommissionProviderRuleReq:
      title: CreateGateCommissionProviderRuleReq
      required:
      - beginDate
      - direction
      - txType
      type: object
      properties:
        beginDate:
          type: string
          description: Begin date of the period of commission rule
          format: date-time
        endDate:
          type: string
          description: End date of the period of commission rule
          format: date-time
        direction:
          type: string
          description: Commission direction
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Active status
        payToolType:
          maxLength: 50
          minLength: 0
          type: string
          description: Pay tool type
        payToolPresent:
          type: boolean
          description: Pay tool present
        txType:
          type: string
          description: Gate transaction type
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
      description: Request to create commission product rule
    CreateGateCommissionProviderRuleConditionReq:
      title: CreateGateCommissionProviderRuleConditionReq
      required:
      - beginAmount
      - collector
      - commission
      - endAmount
      - txType
      type: object
      properties:
        beginAmount:
          type: number
          description: Begin amount (included) for the commission rule condition
        endAmount:
          type: number
          description: End amount (included) for the commission rule condition
        collector:
          type: string
          description: Who collects the commission
          enum:
          - BANK
          - PROVIDER
          - SDK_FINANCE
          - TOTAL
        commission:
          $ref: '#/components/schemas/CommissionValueDto'
        txType:
          type: string
          description: Transaction type
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
      description: Request to create commission provider rule condition
    ViewGateCommissionProviderRuleReq:
      title: ViewGateCommissionProviderRuleReq
      required:
      - date
      - txType
      type: object
      properties:
        date:
          type: string
          description: Date of commission rule
          format: date-time
        filterCriteria:
          type: string
          description: |
            Filter criteria to view rules.
            FOR_DATE is default value to obtain all rules for current date: (beginDate is before (include) required date and endDate is NULL or after required date).
            BEFORE_DATE is value to obtain all rules before date: (beginDate is before (exclude) required date).
            FROM_DATE is value to obtain all rules for from date (beginDate is before (include) or after (include) required date and endDate is NULL or after required date).
          enum:
          - FOR_DATE
          - BEFORE_DATE
          - FROM_DATE
        txType:
          type: string
          description: Gate transaction type
          enum:
          - TOPUP
          - REDEEM
          - PURCHASE
      description: Request to view commission product rule
    CreateGateCommissionProductRuleReq:
      title: CreateGateCommissionProductRuleReq
      required:
      - beginDate
      - direction
      - productId
      type: object
      properties:
        beginDate:
          type: string
          description: Begin date of the period of commission rule
          format: date-time
        endDate:
          type: string
          description: End date of the period of commission rule
          format: date-time
        direction:
          type: string
          description: Commission direction
          enum:
          - IN
          - OUT
        active:
          type: boolean
          description: Active status
        payToolType:
          maxLength: 50
          minLength: 0
          type: string
          description: Pay tool type
        payToolPresent:
          type: boolean
          description: Pay tool present
        productId:
          type: string
          description: Identifier of the product
      description: Request to create commission product rule
    CreateGateCommissionProductRuleConditionReq:
      title: CreateGateCommissionProductRuleConditionReq
      required:
      - beginAmount
      - collector
      - commission
      - endAmount
      - productId
      type: object
      properties:
        beginAmount:
          type: number
          description: Begin amount (included) for the commission rule condition
        endAmount:
          type: number
          description: End amount (included) for the commission rule condition
        collector:
          type: string
          description: Who collects the commission
          enum:
          - BANK
          - PROVIDER
          - SDK_FINANCE
          - TOTAL
        commission:
          $ref: '#/components/schemas/CommissionValueDto'
        productId:
          type: string
          description: Identifier of the product
      description: Request to create commission product rule condition
    ViewGateCommissionProductRuleReq:
      title: ViewGateCommissionProductRuleReq
      required:
      - date
      - productId
      type: object
      properties:
        date:
          type: string
          description: Date of commission rule
          format: date-time
        filterCriteria:
          type: string
          description: |
            Filter criteria to view rules.
            FOR_DATE is default value to obtain all rules for current date: (beginDate is before (include) required date and endDate is NULL or after required date).
            BEFORE_DATE is value to obtain all rules before date: (beginDate is before (exclude) required date).
            FROM_DATE is value to obtain all rules for from date (beginDate is before (include) or after (include) required date and endDate is NULL or after required date).
          enum:
          - FOR_DATE
          - BEFORE_DATE
          - FROM_DATE
        productId:
          type: string
          description: Identifier of the product
      description: Request to view commission product rule
    CopyContractReq:
      title: CopyContractReq
      required:
      - copyLimits
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The new contract name
        copyLimits:
          type: boolean
          description: Specifies if limit profiles need to be copied to a new contract
      description: Request to copy existing contract
    ContractDto:
      title: ContractDto
      required:
      - active
      - description
      - global
      - id
      - name
      - organizationType
      - personType
      type: object
      properties:
        id:
          type: string
          description: Contract's identifier
        organizationType:
          type: string
          description: Type of organization
        personType:
          $ref: '#/components/schemas/PersonType'
        name:
          type: string
          description: Contract name
        description:
          type: string
          description: Contract description
        active:
          type: boolean
          description: Whether contract is active
        global:
          type: boolean
          description: Whether contract is global
      description: Contract information
    ViewContractResp:
      title: ViewContractResp
      required:
      - contract
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        contract:
          $ref: '#/components/schemas/ContractDto'
      description: Response with contract to view
    CreateLimitProfileReq:
      title: CreateLimitProfileReq
      required:
      - active
      - qualifier
      - timeUnit
      - value
      type: object
      properties:
        qualifier:
          type: string
          description: Qualifier
          enum:
          - amount
          - quantity
        timeUnit:
          type: string
          description: Time unit
          enum:
          - per_transaction
          - per_day
          - per_week
          - per_month
          - per_quarter
          - per_year
          - per_life
        value:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Limit value
        active:
          type: boolean
          description: Whether limit is active
      description: Request to create a limit profile
    LimitProfileDto:
      title: LimitProfileDto
      required:
      - active
      - commissionProfileId
      - id
      - qualifier
      - timeUnit
      - value
      type: object
      properties:
        id:
          type: string
          description: Identifier of the limit profile
        commissionProfileId:
          type: string
          description: Identifier of the commissions profile this limit is applied
            to
        qualifier:
          type: string
          description: Qualifier
          enum:
          - amount
          - quantity
        timeUnit:
          type: string
          description: Time unit
          enum:
          - per_transaction
          - per_day
          - per_week
          - per_month
          - per_quarter
          - per_year
          - per_life
        value:
          type: number
          description: Limit value
        active:
          type: boolean
          description: Whether limit is active
      description: Information about limit profile
    ViewLimitProfileResp:
      title: ViewLimitProfileResp
      required:
      - profile
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        profile:
          $ref: '#/components/schemas/LimitProfileDto'
      description: "Response to create, update and view limit profile"
    ContractsFilterDto:
      title: ContractsFilterDto
      type: object
      properties:
        id:
          type: string
          description: Contract identifier
        types:
          type: array
          description: Organization types
          items:
            type: string
        global:
          type: boolean
          description: Whether contract is global
        personTypes:
          type: array
          description: Person types
          items:
            $ref: '#/components/schemas/PersonType'
        dateFrom:
          type: string
          description: Beginning of interval for creation date
          format: date-time
        dateTo:
          type: string
          description: End of interval for creation date
          format: date-time
        description:
          type: string
          description: Contract description
        contractName:
          type: string
          description: Contract name
      description: Filter object
    PersonType:
      type: string
      description: Type of person
      example: standart
      enum:
      - base
      - standart
      - gold
      - vip
    ContractsSortDto:
      title: ContractsSortDto
      type: object
      properties:
        date:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
      description: Sort object
    ViewContractsReq:
      title: ViewContractsReq
      description: Request to view contracts
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ContractsFilterDto'
          sort:
            $ref: '#/components/schemas/ContractsSortDto'
    GetAllAvailableContractsForUpdateContractReq:
      title: GetAllAvailableContractsForUpdateContractReq
      required:
      - organizationId
      type: object
      properties:
        organizationId:
          type: string
          description: Identifier of the contract's owner
      description: Request to get all available contracts for update
    GetAllAvailableContractsForUpdateContractResp:
      title: GetAllAvailableContractsForUpdateContractResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of contracts
          items:
            $ref: '#/components/schemas/ContractDto'
      description: Response for all available contracts for update getting request
    ValidateContactReq:
      title: ValidateContactReq
      required:
      - value
      type: object
      properties:
        value:
          maxLength: 255
          minLength: 1
          type: string
          description: Value to be validated (email or phone)
      description: Request to validate a contact
    CreateContactReq:
      title: CreateContactReq
      required:
      - phoneNumber
      type: object
      properties:
        nickname:
          maxLength: 255
          minLength: 0
          type: string
        firstName:
          maxLength: 255
          minLength: 0
          type: string
        lastName:
          maxLength: 255
          minLength: 0
          type: string
        address:
          maxLength: 255
          minLength: 0
          type: string
        city:
          maxLength: 255
          minLength: 0
          type: string
        country:
          maxLength: 255
          minLength: 0
          type: string
        postCode:
          maxLength: 255
          minLength: 0
          type: string
        email:
          pattern: "^[_a-z0-9-\\+]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9]+)*(\\\
            .[a-z]{2,})$"
          type: string
        phoneNumber:
          pattern: "[0-9]{10,15}"
          type: string
        photoPath:
          maxLength: 255
          minLength: 0
          pattern: "^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
          type: string
        socialMediaList:
          type: array
          items:
            $ref: '#/components/schemas/CreateContactSocialMediaReq'
        bankAccountNumber:
          maxLength: 255
          minLength: 0
          type: string
        swiftBic:
          maxLength: 11
          minLength: 0
          type: string
      description: Request to create contact
    CreateContactSocialMediaReq:
      title: CreateContactSocialMediaReq
      required:
      - socialMediaReference
      - socialMediaType
      type: object
      properties:
        socialMediaType:
          type: string
          description: Type of social media
          enum:
          - facebook
          - telegram
          - twitter
          - linkedin
          - instagram
        socialMediaReference:
          maxLength: 256
          minLength: 1
          type: string
          description: Social media reference
      description: Request to create contact social media
    ContactBookItemDto:
      title: ContactBookItemDto
      required:
      - address
      - bankAccountNumber
      - city
      - country
      - email
      - firstName
      - id
      - lastName
      - linkedUserId
      - nickname
      - ownerId
      - phoneNumber
      - photoPath
      - postCode
      - socialMedias
      - swiftBic
      type: object
      properties:
        id:
          type: string
          description: Identifier
        nickname:
          type: string
          description: Nick name
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        address:
          type: string
          description: Address
        city:
          type: string
          description: City
        country:
          type: string
          description: Country
        postCode:
          type: string
          description: Postcode
        email:
          type: string
          description: Email
        phoneNumber:
          type: string
          description: Phone number
        photoPath:
          type: string
          description: Path to storage where photo is located
        socialMedias:
          type: array
          description: List of social networks
          items:
            $ref: '#/components/schemas/ContactSocialMediaDto'
        bankAccountNumber:
          type: string
          description: Bank account number
        swiftBic:
          type: string
          description: SWIFT / BIC
        ownerId:
          type: string
          description: Id of user who created this contact and who is owner of contact
        linkedUserId:
          type: string
          description: Id of user who has already registered in the system
      description: Response to get contact
    ContactSocialMediaDto:
      title: ContactSocialMediaDto
      required:
      - id
      - socialMediaReference
      - socialMediaType
      type: object
      properties:
        id:
          type: string
          description: Identifier
        socialMediaType:
          maxLength: 128
          minLength: 1
          type: string
          description: Type of social media
        socialMediaReference:
          maxLength: 256
          minLength: 1
          type: string
          description: Social media reference
      description: Request to create contact social media
    GetContactResp:
      title: GetContactResp
      required:
      - contacts
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        contacts:
          type: array
          description: List of contacts
          items:
            $ref: '#/components/schemas/ContactBookItemDto'
      description: Response to contacts list get request
    ContactFilterDto:
      title: ContactFilterDto
      required:
      - address
      - city
      - country
      - email
      - firstName
      - lastName
      - linkedUserId
      - nickname
      - phoneNumber
      - postCode
      - swiftBic
      type: object
      properties:
        id:
          type: string
          description: Identifier of the subscription
        nickname:
          type: string
          description: Nick name
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        address:
          type: string
          description: Address
        city:
          type: string
          description: City
        country:
          type: string
          description: Country
        postCode:
          type: string
          description: Postcode
        email:
          type: string
          description: Email
        phoneNumber:
          type: string
          description: Phone number
        swiftBic:
          type: string
          description: SWIFT / BIC
        linkedUserId:
          type: string
          description: Id of user who has already registered in the system
      description: Filter settings
    ContactSortDto:
      title: ContactSortDto
      type: object
      properties:
        date:
          type: string
          description: Creation date of contact
          enum:
          - asc
          - desc
      description: Sort settings
    ViewContactReq:
      title: ViewContactReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/ContactFilterDto'
          sort:
            $ref: '#/components/schemas/ContactSortDto'
    PageResponseContactBookItemDto:
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            items:
              $ref: '#/components/schemas/ContactBookItemDto'
    CreateBatchContactReq:
      title: CreateBatchContactReq
      required:
      - contacts
      type: object
      properties:
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/CreateContactReq'
      description: Request to create batch of contacts
    CollectReq:
      title: CollectReq
      required:
      - amount
      - fullName
      - serial
      type: object
      properties:
        amount:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: Collect amount
        serial:
          type: string
          description: Coin serial
        fullName:
          type: string
          description: Cash collector's full name
      description: Necessary parameters for collect
    CreateCoinReq:
      title: CreateCoinReq
      required:
      - issuerId
      - name
      type: object
      properties:
        name:
          maxLength: 36
          minLength: 1
          type: string
          description: Name
        issuerId:
          type: string
          description: Issuer's identifier
        type:
          type: string
          description: Type of coin to be created. Null means default value will be
            taken
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
      description: Request to create a new coin
    ValidateCoinReq:
      title: ValidateCoinReq
      required:
      - serial
      type: object
      properties:
        serial:
          maxLength: 34
          minLength: 1
          type: string
          description: Coin serial to be validated
      description: Request to validate a coin
    ValidateCoinResp:
      title: ValidateCoinResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        owner:
          $ref: '#/components/schemas/OrganizationShortDto'
      description: Response to coin validation request
    SetMainReq:
      title: SetMainReq
      required:
      - serial
      type: object
      properties:
        serial:
          type: string
          description: Coin to be set as main
      description: Request to set specified coin as main
    CoinInfoReq:
      title: CoinInfoReq
      required:
      - currencyCode
      - login
      type: object
      properties:
        login:
          type: string
          description: User login
        currencyCode:
          maxLength: 3
          minLength: 0
          type: string
          description: Currency code
      description: Request to get Coin serial by user login (email or phone)
    CoinInfoResp:
      title: CoinInfoResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        serial:
          type: string
          description: Coin serial by user login
      description: Coin serial by user login (email or phone)
    ViewCoinsInfoReq:
      title: ViewCoinsInfoReq
      required:
      - login
      - serial
      type: object
      properties:
        login:
          type: string
          description: User login
        serial:
          maxLength: 34
          minLength: 1
          type: string
          description: Coin serial
      description: Request to obtain Request to obtain coins info by user login (email
        or phone) or coin serial. Only for client Coin type
    ViewCoinsInfoResp:
      title: ViewCoinsInfoResp
      required:
      - coins
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        coins:
          type: array
          description: Coins short info
          items:
            $ref: '#/components/schemas/CoinShortInfoDto'
      description: List of coins' info by user login (email or phone) or coin serial
    ViewCashDesksReq:
      title: ViewCashDesksReq
      type: object
      properties:
        coinSerial:
          type: string
          description: Coin for which corresponding cash desks will be looked up
      description: Request to view cash desks for specified coin
    CashDeskDto:
      title: CashDeskDto
      required:
      - id
      - issuers
      - type
      type: object
      properties:
        id:
          type: string
          description: Identifier
        name:
          type: string
          description: Name
        issuers:
          type: array
          description: Issuers
          items:
            $ref: '#/components/schemas/IssuerDto'
        address:
          type: string
          description: Address
        type:
          type: string
          description: Type of cash desk
          enum:
          - base
          - standart
          - gold
          - vip
          - invest
        coordinate:
          $ref: '#/components/schemas/CoordinateDto'
      description: Cash desk information
    CoordinateDto:
      title: CoordinateDto
      type: object
      properties:
        latitude:
          type: string
          description: Latitude
        longitude:
          type: string
          description: Longitude
      description: Geo-coordinate
    ViewCashDesksResp:
      title: ViewCashDesksResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Cash desks
          items:
            $ref: '#/components/schemas/CashDeskDto'
      description: Response to view available cash desks
    ViewCashDeskReq:
      title: ViewCashDeskReq
      description: Cash desk report
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/CashDeskOrganizationFilterDto'
          sort:
            $ref: '#/components/schemas/OrganizationSortDto'
    OrganizationReportDto:
      title: OrganizationReportDto
      required:
      - organizationDto
      - reportDto
      type: object
      properties:
        organizationDto:
          $ref: '#/components/schemas/OrganizationShortDto'
        reportDto:
          $ref: '#/components/schemas/PeriodReportDto'
      description: Request to view organizations
    PeriodReportDto:
      title: PeriodReportDto
      required:
      - creditSum
      - debitSum
      - endBalance
      - startBalance
      - todayForecast
      - tomorrowForecast
      type: object
      properties:
        startBalance:
          type: number
          description: Start balance
        endBalance:
          type: number
          description: End balance
        debitSum:
          type: number
          description: Debit sum
        creditSum:
          type: number
          description: Credit sum
        todayForecast:
          type: number
          description: today forecast
        tomorrowForecast:
          type: number
          description: tomorrow forecast
      description: Period report dto report
    ViewCashDeskResp:
      title: ViewCashDeskResp
      required:
      - records
      - totalReport
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          totalReport:
            $ref: '#/components/schemas/PeriodReportDto'
          records:
            type: array
            description: List of reports
            items:
              $ref: '#/components/schemas/OrganizationReportDto'
    WithdrawalReq:
      title: WithdrawalReq
      required:
      - amount
      - coin
      - receiverName
      type: object
      properties:
        coin:
          type: string
          description: Coin where funds will be taken from
        amount:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: Amount for withdrawal
        receiverName:
          type: string
          description: Receiver name
    TopUpReq:
      title: TopUpReq
      required:
      - amount
      - fullName
      - passportData
      - serial
      type: object
      properties:
        amount:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: Amount
        serial:
          type: string
          description: Coin serial
        fullName:
          type: string
          description: Cash collector's full name
        passportData:
          type: string
          description: Passport data
      description: Necessary parameters for top-up
    WithdrawViaBankReq:
      title: WithdrawViaBankReq
      required:
      - amount
      - coinSerial
      type: object
      properties:
        coinSerial:
          type: string
          description: Serial number of coin where funds will be withdrawn from
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount to withdraw
        bankAccountId:
          type: string
          description: Certain bank account id to top up
      description: Request to withdraw via bank
    CreateRequestToWithdrawViaBankReq:
      title: CreateRequestToWithdrawViaBankReq
      required:
      - amount
      - coinSerial
      type: object
      properties:
        coinSerial:
          type: string
          description: Serial number of coin where funds will be emitted
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount to withdraw
        description:
          type: string
          description: Description
        bankAccountId:
          type: string
          description: Certain bank account id to top up
      description: Request to create a request to withdraw via bank
    BankProcessSortDto:
      title: BankProcessSortDto
      type: object
      properties:
        createdAt:
          type: string
          description: Creation date
          enum:
          - asc
          - desc
        status:
          type: string
          description: Status
          enum:
          - asc
          - desc
        type:
          type: string
          description: Type
          enum:
          - asc
          - desc
      description: Sorting settings
    BankRedeemFilterDto:
      title: BankRedeemFilterDto
      description: Filter settings
      allOf:
      - $ref: '#/components/schemas/BankProcessFilterDto'
      - type: object
        properties:
          coinTypes:
            type: array
            description: Involved coin types
            items:
              $ref: '#/components/schemas/CoinType'
    CoinType:
      type: string
      description: Coin type
      enum:
      - regular_commission
      - business_commission
      - regular_gate_commission
      - business_gate_commission
      - gate
      - reserve
      - prepaid
      - credit
      - deposit
      - deposit_accrued
      - client
      - cash
      - cashback_merchant
      - cashback_payer
      - debt
      - merchant_operational
      - merchant_reserve
      - vat
      - system_vat
      - provider_vat
      - internal_client
      - merchant_reserve_debt
      - payment_in_advance
      - charge_back
    ViewBankRedeemReq:
      title: ViewBankRedeemReq
      required:
      - filter
      - sort
      description: Request to view withdrawals via bank
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/BankRedeemFilterDto'
          sort:
            $ref: '#/components/schemas/BankProcessSortDto'
    CalculateBankWithdrawalCommissionReq:
      title: CalculateBankWithdrawalCommissionReq
      required:
      - amount
      - coinSerila
      type: object
      properties:
        coinSerial:
          type: string
          description: Serial number of coin where funds can be withdrawn from
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount to withdraw
      description: Request to calculate commission for bank withdrawal request
    TopUpViaBankReq:
      title: TopUpViaBankReq
      required:
      - amount
      - coinSerial
      type: object
      properties:
        coinSerial:
          type: string
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
        bankAccountId:
          type: string
          description: Certain bank account id to top up
      description: Request to top up via bank
    BankProcessFilterDto:
      title: BankProcessFilterDto
      type: object
      properties:
        ids:
          type: array
          description: List of filtered identifiers
          items:
            type: string
        startCreatedDate:
          type: string
          description: Start date
          format: date-time
        finishCreatedDate:
          type: string
          description: Finish date
          format: date-time
        coinSerials:
          type: array
          description: Coin serial's
          items:
            type: string
        orgIds:
          type: array
          description: Organization's id
          items:
            type: string
        requestStatuses:
          type: array
          description: Business request's statuses
          items:
            $ref: '#/components/schemas/BusinessRequestStatus'
      description: Filter settings
    BusinessRequestStatus:
      type: string
      description: Business request status
      enum:
      - limited
      - pending
      - waiting
      - approved_by_payroll
      - approved_by_accountant
      - approved_by_cfo
      - requires_confirmation
      - declined
      - rejected
      - processed
      - error
    BankTopUpFilterDto:
      title: BankTopUpFilterDto
      description: Filter settings
      allOf:
      - $ref: '#/components/schemas/BankProcessFilterDto'
    ViewBankTopUpReq:
      title: ViewBankTopUpReq
      required:
      - filter
      - sort
      description: Request to view withdrawals via bank
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/BankTopUpFilterDto'
          sort:
            $ref: '#/components/schemas/BankProcessSortDto'
    CreateRequestToTopUpViaBankReq:
      title: CreateRequestToTopUpViaBankReq
      required:
      - amount
      - coinSerial
      type: object
      properties:
        coinSerial:
          type: string
          description: Serial number of coin where funds will be emitted
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount to top up
        description:
          type: string
          description: Description
        bankAccountId:
          type: string
          description: Certain bank account id to top up
      description: Request to create a request to top up via bank
    CalculateBankTopUpCommissionReq:
      title: CalculateBankTopUpCommissionReq
      required:
      - amount
      - coinSerial
      type: object
      properties:
        coinSerial:
          type: string
          description: Serial number of coin where funds will be emitted
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Top up amount
      description: Request to calculate commission for bank top up request
    BankCreateReq:
      title: BankCreateReq
      required:
      - bic
      - name
      - swift
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: Bank name
          example: Slovenska Sporitelna
        swift:
          maxLength: 11
          minLength: 8
          type: string
          description: Bank SWIFT code
          example: GIBASKBX
        country:
          $ref: '#/components/schemas/CountryCode'
        city:
          maxLength: 255
          minLength: 0
          type: string
          description: |
            Bank address: city
          example: Bratislava
        address:
          maxLength: 255
          minLength: 0
          type: string
          description: |
            Bank address: street and house number
          example: 48 Tomasikova
        zipCode:
          maxLength: 24
          minLength: 0
          type: string
          description: |
            Bank address: zip code
          example: "83237"
        bic:
          maxLength: 11
          minLength: 8
          type: string
          description: Bank Identifier Code (BIC)
          example: GIBASKBX
    BankResp:
      title: BankResp
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: processed successfully
        record:
          $ref: '#/components/schemas/BankDto'
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response to view Bank
    BanksResp:
      title: BanksResp
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: processed successfully
        records:
          type: array
          description: List of Banks added to the system
          items:
            $ref: '#/components/schemas/BankDto'
        status:
          type: string
          description: Response status
          example: ok
          enum:
          - ok
          - fail
    BankAccountFilterDto:
      title: BankAccountFilterDto
      type: object
      properties:
        bankAccountNumber:
          type: string
          description: Bank account number
          example: "1987426351"
        bankName:
          type: string
          description: Bank name
          example: Slovenska Sporitelna
        bic:
          type: string
          description: Bank Identifier Code (BIC)
          example: GIBASKBX
        iban:
          type: string
          description: IBAN
          example: SK6807200002891987426351
        statuses:
          type: array
          description: Bank account status
          items:
            $ref: '#/components/schemas/BankAccountStatus'
        swift:
          type: string
          description: Bank SWIFT code
          example: GIBASKBX
        coinSerial:
          type: string
          description: In-system account number
          example: "710664919642"
        isDefault:
          type: boolean
          description: Shows that the bank account will be used as default in operations
            with linked in-system account.
        organization:
          $ref: '#/components/schemas/OrganizationShortDto'
    BankAccountStatus:
      type: string
      description: |
        Bank account status:
        <li>PENDING - account is created and is not approved or declined by compliance, account with this status can't be used for operations
        <li>REJECTED - account is rejected by compliance, account with this status can't be used for operations
        <li>APPROVED - account is approved by compliance and can be used for operations
      example: PENDING
      enum:
      - PENDING
      - REJECTED
      - APPROVED
    BankAccountSortDto:
      title: BankAccountSortDto
      type: object
      properties:
        bankName:
          type: string
          description: Bank name
          enum:
          - asc
          - desc
        status:
          type: string
          description: Status
          enum:
          - asc
          - desc
    BankAccountsViewReq:
      title: BankAccountsViewReq
      required:
      - filter
      - sort
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          filter:
            $ref: '#/components/schemas/BankAccountFilterDto'
          sort:
            $ref: '#/components/schemas/BankAccountSortDto'
    AddAllowedIPReq:
      title: AddAllowedIPReq
      required:
      - ip
      - role
      type: object
      properties:
        ip:
          pattern: "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\\
            .([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$"
          type: string
          description: IP
        role:
          maxLength: 2147483647
          minLength: 5
          type: string
          description: User's role
      description: Add available IP request
    AllowedIPDto:
      title: AllowedIPDto
      type: object
      properties:
        id:
          type: string
          description: Available IP id
        ip:
          type: string
          description: IP
        role:
          type: string
          description: Available IP role
      description: Dto contains list of available IP for role
    AllowedIPResp:
      title: AllowedIPResp
      type: object
      properties:
        availableIP:
          type: array
          description: IP
          items:
            $ref: '#/components/schemas/AllowedIPDto'
        message:
          type: string
          description: Response message
        role:
          type: string
          description: User's role
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response contains list of available IP for role
    AuthorizationReq:
      title: AuthorizationReq
      required:
      - login
      - password
      type: object
      properties:
        login:
          type: string
          description: User's login (phone number or email address)
          example: administrator@sdkfinance.tech
        password:
          type: string
          description: User's password
          example: "1"
    AuthorizationResp:
      title: AuthorizationResp
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: Response action
          enum:
          - TOKEN_CREATED
          - OTP_SENT
        authorizationToken:
          $ref: '#/components/schemas/AuthorizationTokenDto'
        members:
          type: array
          description: Organizations membership. Absent only if action is TOKEN_CREATED.
          items:
            $ref: '#/components/schemas/AuthorizedMemberDto'
        message:
          type: string
          description: Response message
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response for authorization
    AuthorizationTokenDto:
      title: AuthorizationTokenDto
      required:
      - expiresAt
      - token
      type: object
      properties:
        expiresAt:
          type: string
          description: When this token expires
          format: date-time
        token:
          type: string
          description: Token value
      description: Authorization token
    AuthorizedMemberDto:
      title: AuthorizedMemberDto
      required:
      - organization
      - permissions
      - role
      - token
      - user
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationShortDto'
        permissions:
          type: array
          description: List of permissions
          items:
            type: string
        role:
          type: string
          description: Role group
        token:
          $ref: '#/components/schemas/AuthorizationTokenDto'
        user:
          $ref: '#/components/schemas/UserShortDto'
      description: Information about organization member along with authorization
        token
    UpdateUserReq:
      title: UpdateUserReq
      required:
      - active
      type: object
      properties:
        active:
          type: boolean
          description: |
            Specify if user is active. Pass `true` to activate user or `false` to deactivate.
          example: true
    UpdateUserContract:
      title: UpdateUserContract
      required:
      - contractId
      - userId
      type: object
      properties:
        userId:
          type: string
          description: Specify user id. Pass `userId` to update contract fro user.
        contractId:
          type: string
          description: Specify contract id. Pass `contractId` to update contract fro
            user.
    UpdateTransferTemplateReq:
      title: UpdateTransferTemplateReq
      required:
      - amount
      - description
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Amount
        description:
          type: string
          description: Description
      description: Request to update transfer template
    UpdateCartTemplateDataDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    UpdateCartTemplateReq:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          type: string
        templates:
          type: array
          items:
            $ref: '#/components/schemas/UpdatePurchaseTemplateReq'
        templateDataDtos:
          type: array
          items:
            $ref: '#/components/schemas/UpdatePurchaseTemplateDataDto'
        cartTemplateDataDto:
          $ref: '#/components/schemas/UpdateCartTemplateDataDto'
    UpdatePurchaseTemplateDataDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        amount:
          type: number
        description:
          type: string
    UpdatePurchaseTemplateReq:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 255
          minLength: 1
          type: string
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
        description:
          type: string
    UpdateSmartCardReq:
      title: UpdateSmartCardReq
      required:
      - active
      - name
      type: object
      properties:
        name:
          maxLength: 36
          minLength: 1
          type: string
          description: Name of the smart card
        active:
          type: boolean
          description: Whether card is active
      description: Request to update an existing smart card
    SecurityUpdateReq:
      title: SecurityUpdateReq
      required:
      - security
      type: object
      properties:
        security:
          $ref: '#/components/schemas/SecurityDto'
      description: Request to update security settings
    PersonUpdateReq:
      title: PersonUpdateReq
      required:
      - person
      type: object
      properties:
        person:
          $ref: '#/components/schemas/PersonDto'
      description: Request to update person information
    BusinessUpdateReq:
      title: BusinessUpdateReq
      required:
      - companyName
      - type
      type: object
      properties:
        companyName:
          type: string
          description: Company's name
        type:
          type: string
          description: Type of business
          enum:
          - eshop
          - reseller_of_goods
          - service_providers
          - mobile_operator
          - storage_providers
          - high_risk
          - other
        vat:
          maxLength: 30
          minLength: 3
          type: string
          description: Company VAT number
        administrator:
          $ref: '#/components/schemas/EmployeeDto'
      description: Request to update business information in profile
    AddressUpdateReq:
      title: AddressUpdateReq
      required:
      - address
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressDto'
      description: Request to update address
    AdditionalInfoUpdateReq:
      title: AdditionalInfoUpdateReq
      required:
      - additional
      type: object
      properties:
        additional:
          $ref: '#/components/schemas/ProfileAdditionalEndpointDto'
      description: Request to update additional profile info
    PasswordUpdateReq:
      title: PasswordUpdateReq
      required:
      - currentUserPassword
      - newUserPassword
      type: object
      properties:
        currentUserPassword:
          type: string
          description: Current password
        newUserPassword:
          type: string
          description: New password
      description: Request to update user's password
    UpdatePointOfSaleReq:
      title: UpdatePointOfSaleReq
      required:
      - description
      - posCompanyName
      type: object
      properties:
        categoryId:
          type: string
        posCompanyName:
          maxLength: 255
          minLength: 1
          type: string
          description: Name
        description:
          maxLength: 255
          minLength: 0
          type: string
          description: Description
        website:
          maxLength: 255
          minLength: 1
          type: string
          description: Website front page
        resultUrl:
          maxLength: 255
          minLength: 1
          type: string
          description: "When payment was processed successfully, system redirects\
            \ payer to this URL (only for merchant payment API v2)"
        serverUrl:
          maxLength: 255
          minLength: 1
          type: string
        trustAllCertificates:
          type: boolean
          description: |
            Whether trust all certificates while performing a `serverUrl` call.
            ALWAYS USE `false` FOR PRODUCTION ENVIRONMENT! (only for merchant payment API v2)
        active:
          type: boolean
          description: Whether point of sale is active
      description: Point of sale updated information
    MerchantProductUpdateReq:
      title: MerchantProductUpdateReq
      required:
      - measureUnit
      - names
      type: object
      properties:
        names:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Product names
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Product descriptions
          items:
            $ref: '#/components/schemas/I18nRecord'
        measureUnit:
          $ref: '#/components/schemas/IdOrExtCodeDto'
      description: Request to update a single product
    UpdateMerchantProductCategoryReq:
      title: UpdateMerchantProductCategoryReq
      required:
      - names
      type: object
      properties:
        names:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for category name
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for category description
          items:
            $ref: '#/components/schemas/I18nRecord'
      description: Request to update a product category
    MeasureUnitUpdateReq:
      title: MeasureUnitUpdateReq
      required:
      - codes
      type: object
      properties:
        codes:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for code field
          items:
            $ref: '#/components/schemas/I18nRecord'
        descriptions:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: Translations for description field
          items:
            $ref: '#/components/schemas/I18nRecord'
      description: Update measure unit dto
    UpdateMemberReq:
      title: UpdateMemberReq
      required:
      - active
      type: object
      properties:
        active:
          type: boolean
          description: Whether member will be active
      description: Request to update organization member
    UpdateFileReq:
      title: UpdateFileReq
      required:
      - tag
      type: object
      properties:
        tag:
          maxLength: 1024
          minLength: 0
          type: string
          description: Custom file tag (label)
      description: Request to update a file
    UpdateIssuerReq:
      title: UpdateIssuerReq
      required:
      - active
      - description
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Issuer name
          example: USD Issuer new name
        description:
          maxLength: 255
          minLength: 0
          type: string
          description: Issuer description
          example: USD Issuer new description
        active:
          type: boolean
          description: Whether updated issuer will be active
          example: true
        orderNumber:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: Ordering number
          format: int32
        orderQuote:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: Ordering quote
          format: int32
      description: Request to update an issuer
    UpdateInvoiceTemplateReq:
      title: UpdateInvoiceTemplateReq
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of template
        invoiceIdentifier:
          type: string
          description: Invoice identifier
        invoiceDraft:
          $ref: '#/components/schemas/InvoiceDraftDto'
      description: Request to update invoice template
    UpdatedProductsReq:
      title: UpdatedProductsReq
      required:
      - productIds
      - visibilityStatusToUpdate
      type: object
      properties:
        productIds:
          uniqueItems: true
          type: array
          description: List of product ids to update
          items:
            type: string
        visibilityStatusToUpdate:
          type: boolean
          description: Visibility status to update
      description: Request to update product
    ProductVisibilityDto:
      title: ProductVisibilityDto
      required:
      - externalId
      - id
      - visible
      type: object
      properties:
        id:
          type: string
          description: Product identifier
        externalId:
          type: string
          description: Product external identifier
        visible:
          type: boolean
          description: Indicate that product should be shown to user
      description: Gate product visibility information
    UpdatedProductsVisibilityStatusesResp:
      title: UpdatedProductsVisibilityStatusesResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of products with their visibility statuses
          items:
            $ref: '#/components/schemas/ProductVisibilityDto'
      description: Response to update products' visibility statuses request
    Field:
      type: object
      properties:
        name:
          type: string
        value:
          type: object
    SettingsFieldsReqDto:
      required:
      - fields
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
    FilledField:
      title: FilledField
      required:
      - label
      - name
      - value
      type: object
      properties:
        label:
          type: string
          description: Field label
        name:
          type: string
          description: Field name
        value:
          type: object
          properties: {}
          description: Value provided by client
      description: Filled field
    SettingsFieldsRespDto:
      title: SettingsFieldsRespDto
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        fields:
          type: array
          description: List of filled fields
          items:
            $ref: '#/components/schemas/FilledField'
      description: Filled settings of gate provider settings for response
    UpdateGateLimitProfileReq:
      title: UpdateGateLimitProfileReq
      required:
      - active
      - value
      type: object
      properties:
        value:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Limit value
        active:
          type: boolean
          description: Whether limit is active
      description: Request to update gate limit profile
    UpdateCommissionProfileReq:
      title: UpdateCommissionProfileReq
      required:
      - active
      type: object
      properties:
        active:
          type: boolean
          description: Status
      description: Request to update an existing commission profile
    UpdateLimitProfileReq:
      title: UpdateLimitProfileReq
      required:
      - active
      - value
      type: object
      properties:
        value:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Limit value
        active:
          type: boolean
          description: Whether limit is active
      description: Request to update a limit profile
    UpdateContactReq:
      title: UpdateContactReq
      required:
      - phoneNumber
      type: object
      properties:
        nickname:
          maxLength: 255
          minLength: 0
          type: string
        firstName:
          maxLength: 255
          minLength: 0
          type: string
        lastName:
          maxLength: 255
          minLength: 0
          type: string
        address:
          maxLength: 255
          minLength: 0
          type: string
        city:
          maxLength: 255
          minLength: 0
          type: string
        country:
          maxLength: 255
          minLength: 0
          type: string
        postCode:
          maxLength: 255
          minLength: 0
          type: string
        email:
          pattern: "^[_a-z0-9-\\+]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9]+)*(\\\
            .[a-z]{2,})$"
          type: string
        phoneNumber:
          pattern: "[0-9]{10,15}"
          type: string
        photoPath:
          maxLength: 255
          minLength: 0
          pattern: "^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
          type: string
        socialMediaList:
          type: array
          items:
            $ref: '#/components/schemas/UpdateContactSocialMediaReq'
        bankAccountNumber:
          maxLength: 255
          minLength: 0
          type: string
        swiftBic:
          maxLength: 11
          minLength: 0
          type: string
      description: Request to update contact
    UpdateContactSocialMediaDataDto:
      title: UpdateContactSocialMediaDataDto
      type: object
      properties:
        id:
          type: string
        socialMediaType:
          type: string
          enum:
          - facebook
          - telegram
          - twitter
          - linkedin
          - instagram
        socialMediaReference:
          type: string
    UpdateContactSocialMediaReq:
      title: UpdateContactSocialMediaReq
      required:
      - id
      - socialMediaReference
      - socialMediaType
      type: object
      properties:
        id:
          type: string
          description: Template identifier
        socialMediaType:
          type: string
          description: Type of social media
          enum:
          - facebook
          - telegram
          - twitter
          - linkedin
          - instagram
        socialMediaReference:
          maxLength: 256
          minLength: 1
          type: string
          description: Social media reference
        updateContactSocialMediaDataDto:
          $ref: '#/components/schemas/UpdateContactSocialMediaDataDto'
      description: Request to create contact social media
    UpdateCoinReq:
      title: UpdateCoinReq
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 36
          minLength: 1
          type: string
          description: Coin's name
        active:
          type: boolean
          description: To activate or deactivate coin
      description: Request to update existing coin
    UpdateCoinResp:
      title: UpdateCoinResp
      required:
      - coin
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        coin:
          $ref: '#/components/schemas/CoinDto'
      description: Response to coin updating request
    ChangeCoinCreditLimitReq:
      title: ChangeCoinCreditLimitReq
      required:
      - creditLimit
      type: object
      properties:
        creditLimit:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: New coin credit limit
      description: Request to change coin credit limit
    ViewCoinResp:
      title: ViewCoinResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        coin:
          $ref: '#/components/schemas/CoinDto'
    BankUpdateReq:
      title: BankUpdateReq
      required:
      - name
      - swift
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: Bank name
          example: Slovenska Sporitelna
        swift:
          maxLength: 11
          minLength: 8
          type: string
          description: Bank SWIFT code
          example: GIBASKBX
        country:
          $ref: '#/components/schemas/CountryCode'
        city:
          maxLength: 255
          minLength: 0
          type: string
          description: |
            Bank address: city
          example: Bratislava
        address:
          maxLength: 255
          minLength: 0
          type: string
          description: |
            Bank address: street and house number
          example: 48 Tomasikova
        zipCode:
          maxLength: 24
          minLength: 0
          type: string
          description: |
            Bank address: zip code
          example: "83237"
    ActionOfObjectDto:
      title: ActionOfObjectDto
      required:
      - entityName
      - type
      type: object
      properties:
        entityName:
          type: string
          description: Object name
        type:
          type: string
      discriminator:
        propertyName: type
    ActionReverseListDto:
      title: ActionReverseListDto
      required:
      - actionId
      type: object
      properties:
        objectsOfAction:
          type: array
          items:
            $ref: '#/components/schemas/ActionOfObjectDto'
        actionId:
          type: string
          description: Action identifier
      description: Action Reverse object dto
    GetReverseActionsResp:
      title: GetReverseActionsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of users
          items:
            $ref: '#/components/schemas/ActionReverseListDto'
      description: Response for get reverse actions
    UserNotesResp:
      title: UserNotesResp
      required:
      - notes
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        notes:
          type: array
          description: List of notes about user
          items:
            $ref: '#/components/schemas/UserNoteDto'
      description: Response contains notes about user
    UserMessagesResp:
      title: UserMessagesResp
      required:
      - messages
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        messages:
          type: array
          description: List of messages to user
          items:
            $ref: '#/components/schemas/UserMessageDto'
      description: Response contains messages to user
    CommonTemplateDto:
      title: CommonTemplateDto
      required:
      - amount
      - description
      - id
      - name
      - regular
      - reusable
      - type
      type: object
      properties:
        id:
          type: string
          description: Identifier
        type:
          type: string
          description: Type of template
          enum:
          - TransferTemplate
          - InvoiceTemplate
          - PurchaseTemplate
          - CartTemplate
        name:
          type: string
          description: Name
        amount:
          type: number
          description: Amount
        description:
          type: string
          description: Description
        reusable:
          type: boolean
          description: Reusable
        regular:
          type: boolean
          description: Regular
      description: Representation of template
    TransferTemplateDto:
      title: TransferTemplateDto
      description: Representation of transfer template
      allOf:
      - $ref: '#/components/schemas/CommonTemplateDto'
      - required:
        - paymentToolDetails
        - recipientCoin
        - recipientPhoneNumber
        - senderCoin
        type: object
        properties:
          senderCoin:
            $ref: '#/components/schemas/CoinDto'
          recipientCoin:
            $ref: '#/components/schemas/ShortCoinDto'
          recipientPhoneNumber:
            type: string
            description: Recipient phone number
          paymentToolDetails:
            $ref: '#/components/schemas/PaymentToolDetailsDto'
    ViewTransferTemplateResp:
      title: ViewTransferTemplateResp
      required:
      - transferTemplates
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        transferTemplates:
          type: array
          description: Transfer templates
          items:
            $ref: '#/components/schemas/TransferTemplateDto'
      description: Response to view transfer templates for current user
    CartCommissionResp:
      title: CartCommissionResp
      required:
      - amountToSend
      - commissionAmount
      - currency
      - sourceAmount
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        sourceAmount:
          type: number
          description: Amount
        amountToSend:
          type: number
          description: Source amount plus commission
        commissionAmount:
          type: number
          description: Commission amount
        currency:
          $ref: '#/components/schemas/CurrencyDto'
      description: Response for cart commission calculation request
    ViewSubscriptionResp:
      title: ViewSubscriptionResp
      required:
      - subscriptions
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          subscriptions:
            type: array
            description: List of subscriptions
            items:
              $ref: '#/components/schemas/SubscriptionDto'
    SubscriptionDto:
      title: SubscriptionDto
      required:
      - expirationConfig
      - frequency
      - id
      - name
      - recurringStartDate
      - subscriptionStatus
      - templateDto
      - type
      type: object
      properties:
        id:
          type: string
          description: Subscription id
        name:
          type: string
          description: Name
        expirationConfig:
          $ref: '#/components/schemas/ExpirationConfigDto'
        recurringStartDate:
          type: string
          description: Start date of subscription
          format: date-time
        type:
          type: string
          description: Recurring type
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
          - ANNUALLY
        frequency:
          type: integer
          description: Frequency
          format: int32
        templateDto:
          $ref: '#/components/schemas/BaseTemplateDto'
        subscriptionStatus:
          type: string
          description: Subscription status
          enum:
          - ACTIVE
          - STOPPED
          - PROCESSED
          - CANCELLED
      description: Response to get subscription
    ViewSmartCardsResp:
      title: ViewSmartCardsResp
      required:
      - records
      - recordsNumber
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        recordsNumber:
          type: integer
          description: Number of records
        records:
          type: array
          description: List of smart cards
          items:
            $ref: '#/components/schemas/SmartCardDto'
      description: Response for smart cards viewing request
    ViewRoleGroupsResp:
      title: ViewRoleGroupsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of role groups
          items:
            $ref: '#/components/schemas/RoleGroupDto'
      description: Response to role groups viewing request
    ViewProcessConfirmationSettingsResp:
      title: ViewProcessConfirmationSettingsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Per-process confirmation settings
          items:
            $ref: '#/components/schemas/ProcessConfirmationSettingsDto'
      description: User's transaction confirmation settings
    BankAccountsViewResp:
      title: BankAccountsViewResp
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of bank accounts
            items:
              $ref: '#/components/schemas/BankAccountInfoDto'
    ViewMyProfileDocumentsResp:
      title: ViewMyProfileDocumentsResp
      required:
      - documents
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        documents:
          type: array
          description: Documents
          items:
            $ref: '#/components/schemas/ProfileDocumentDto'
      description: Response for profile documents viewing request as user
    PrepaidVoucherDto:
      title: PrepaidVoucherDto
      type: object
      properties:
        serial:
          type: string
          description: Unique prepaid voucher serial number
          example: "995782708163"
        createdAt:
          type: string
          description: Voucher creation date and time
          format: date-time
        activatedAt:
          type: string
          description: Voucher activation date and time
          format: date-time
        amount:
          type: number
          description: Prepaid voucher amount
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
        status:
          type: string
          description: "Activation status, possible values: blocked, banned, processed,\
            \ pending"
        name:
          type: string
          description: Name
      description: Prepaid voucher
    ViewPointsOfSaleResp:
      title: ViewPointsOfSaleResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of points of sale
          items:
            $ref: '#/components/schemas/ViewPointOfSaleDto'
      description: Response to points of sale viewing request
    ProviderCoinDto:
      title: ProviderCoinDto
      required:
      - amount
      - availableAmount
      - issuer
      - serial
      - type
      type: object
      properties:
        serial:
          type: string
          description: Unique serial number
        type:
          type: string
          description: Type of coin
          enum:
          - regular_commission
          - business_commission
          - regular_gate_commission
          - business_gate_commission
          - gate
          - reserve
          - prepaid
          - credit
          - deposit
          - deposit_accrued
          - client
          - cash
          - cashback_merchant
          - cashback_payer
          - debt
          - merchant_operational
          - merchant_reserve
          - vat
          - system_vat
          - provider_vat
          - internal_client
          - merchant_reserve_debt
          - payment_in_advance
          - charge_back
        amount:
          type: number
          description: Total amount of funds
        availableAmount:
          type: number
          description: "Amount available to use: total subtract held funds"
        issuer:
          $ref: '#/components/schemas/IssuerShortDto'
      description: Information about provider coin
    ViewProviderCoinsResp:
      title: ViewProviderCoinsResp
      required:
      - coins
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        coins:
          type: array
          description: Coins
          items:
            $ref: '#/components/schemas/ProviderCoinDto'
      description: Response to view coins
    ViewCoinsResp:
      title: ViewCoinsResp
      required:
      - coins
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        coins:
          type: array
          description: Coins
          items:
            $ref: '#/components/schemas/CoinDto'
      description: Response to view coins
    ViewOperationFlowsResp:
      title: ViewOperationFlowsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of flows
          items:
            $ref: '#/components/schemas/OperationFlowDto'
      description: Response for operation flows viewing request
    ViewNotificationMessageKeyResp:
      title: ViewNotificationMessageKeyResp
      required:
      - messageParameterKeys
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        messageParameterKeys:
          type: array
          description: Notification message parameter keys
          items:
            $ref: '#/components/schemas/ViewNotificationMessageKeyResp_messageParameterKeys'
      description: Response to get notification message parameter keys
    ViewMerchantProductCategoriesResp:
      title: ViewMerchantProductCategoriesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Product categories
          items:
            $ref: '#/components/schemas/MerchantProductCategoryDto'
      description: Response to merchant product categories viewing request
    MerchantProductViewResp:
      title: MerchantProductViewResp
      required:
      - product
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          product:
            $ref: '#/components/schemas/MerchantProductViewRespDto'
    ViewMerchantProductsResp:
      title: ViewMerchantProductsResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of products
            items:
              $ref: '#/components/schemas/MerchantProductViewRespDto'
    ViewMerchantPurchaseDto:
      title: ViewMerchantPurchaseDto
      required:
      - id
      - measureUnit
      - price
      - product
      - quantity
      - totalAmount
      type: object
      properties:
        id:
          type: string
          description: Id of the purchase
        product:
          $ref: '#/components/schemas/MerchantProductViewRespDto'
        quantity:
          type: number
          description: Quantity
        measureUnit:
          $ref: '#/components/schemas/MeasureUnitViewRespDto'
        price:
          type: number
          description: Price of the product
        totalAmount:
          type: number
          description: Total amount (quantity * price)
      description: Information about occurred merchant purchase
    ViewPurchasesResp:
      title: ViewPurchasesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Completed purchases
          items:
            $ref: '#/components/schemas/ViewMerchantPurchaseDto'
      description: Response for purchases viewing request
    ViewFilterTemplatesResp:
      title: ViewFilterTemplatesResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        filterTemplates:
          type: array
          description: The list of view filter template DTOs
          items:
            $ref: '#/components/schemas/ViewFilterTemplateDto'
      description: Response for view the list of filter templates
    ViewIssuersResp:
      title: ViewIssuersResp
      required:
      - records
      description: Response to issuers viewing request
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of issuers
            items:
              $ref: '#/components/schemas/IssuerDto'
    ViewInvestmentResp:
      title: ViewInvestmentResp
      required:
      - amount
      - cashDeskSerial
      - fullName
      - id
      - issuerId
      - processStatus
      - type
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: BusinessRequest identifier
        issuerId:
          type: string
          description: IssuerId
        amount:
          type: number
          description: Investment amount
        currency:
          $ref: '#/components/schemas/CurrencyDto'
        cashDeskSerial:
          type: string
          description: Cash desk serial
        fullName:
          type: string
          description: Cash collector's full name
        processStatus:
          type: string
          description: BusinessProcess status
        type:
          type: string
          description: BusinessProcess type
      description: Necessary parameters
    ViewCashDeskInputResp:
      title: ViewCashDeskInputResp
      required:
      - fullName
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: Business request identifier
        amount:
          type: number
          description: Investment amount
        currency:
          $ref: '#/components/schemas/CurrencyDto'
        cashDeskSerial:
          type: string
          description: Cash desk serial
        fullName:
          type: string
          description: Cash collector's full name
        processStatus:
          type: string
          description: Business process status
        type:
          type: string
          description: Business process type
      description: Input to cash desk view
    FieldDto:
      title: FieldDto
      required:
      - name
      - optional
      - parentName
      - parentValue
      type: object
      properties:
        parentName:
          type: string
          description: Field's parent name
        parentValue:
          type: string
          description: Field's parent value
        name:
          type: string
          description: Field's name
        optional:
          type: boolean
          description: Whether fields is optional
        label:
          type: string
          description: Label
        hint:
          type: string
          description: Hint
        constraints:
          type: array
          description: constraints
          items:
            type: string
        mask:
          type: string
          description: Mask
        stageId:
          type: integer
          description: Stage id
          format: int32
        stageOrderId:
          type: integer
          description: Stage order id
          format: int32
        onlineCheck:
          type: boolean
          description: Online check
      description: Payer field
    FieldsOptionsResp:
      title: FieldsOptionsResp
      required:
      - options
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        options:
          type: array
          description: Available form filling options
          items:
            $ref: '#/components/schemas/OptionDto'
      description: List of possible form filling options
    OptionDto:
      title: OptionDto
      required:
      - fields
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the form filling option
        fields:
          type: array
          description: List of available fields to fill (required and optional)
          items:
            $ref: '#/components/schemas/FieldDto'
      description: "Form filling option. Determined by name, holds list of fields\
        \ (required and optional)"
    ViewProductsResp:
      title: ViewProductsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of products
          items:
            $ref: '#/components/schemas/ProductDto'
      description: Response to view products request
    ViewCardDto:
      title: ViewCardDto
      required:
      - active
      - bin
      - id
      - last4Digits
      - mask
      - verified
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
        bin:
          type: string
          description: BIN
        last4Digits:
          type: string
          description: Last 4 digits of this card
        mask:
          type: string
          description: Masked PAN
        verified:
          type: boolean
          description: Whether this card is verified by the system
        active:
          type: boolean
          description: |
            Whether this card is active. Only active cards can be used to execute payments without entering full card data (payment by card id).
            Card becomes active either after completing a successful payment or after verification
      description: Payment card
    ViewCardsResp:
      title: ViewCardsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of cards
          items:
            $ref: '#/components/schemas/ViewCardDto'
      description: Response to view payment cards request
    GateProviderDto:
      title: GateProviderDto
      required:
      - gate
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Gate provider identifier
        name:
          type: string
          description: Gate provider name
        gate:
          $ref: '#/components/schemas/GateDto'
        organization:
          $ref: '#/components/schemas/OrganizationShortDto'
        supportedTransactions:
          type: array
          description: Information about transactions that supported by provider
          items:
            $ref: '#/components/schemas/SupportedTransactionsInfo'
      description: Extended information about gate provider
    SupportedTransactionsInfo:
      title: SupportedTransactionsInfo
      type: object
      properties:
        transactionType:
          type: string
        paymentWay:
          type: string
      description: Information about supported transaction
    ViewGateProvidersResp:
      title: ViewGateProvidersResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of gate providers
          items:
            $ref: '#/components/schemas/GateProviderDto'
      description: Response to gate providers viewing request
    EnvironmentVariableDto:
      title: EnvironmentVariableDto
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ViewEnvironmentVariablesResp:
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        variables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariableDto'
    ViewEnvironmentVariableResp:
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        variable:
          $ref: '#/components/schemas/EnvironmentVariableDto'
    ViewCurrenciesResp:
      title: ViewCurrenciesResp
      required:
      - currencies
      description: Currencies list
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          currencies:
            type: array
            description: List of currencies
            items:
              $ref: '#/components/schemas/CurrencyDto'
    CountryDto:
      title: CountryDto
      required:
      - alpha2
      - alpha3
      - name
      - numeric
      type: object
      properties:
        name:
          type: string
          description: Country Name
        alpha2:
          type: string
          description: Alpha 2 code
        alpha3:
          type: string
          description: Alpha 3 code
        numeric:
          type: integer
          description: Numeric code
          format: int32
      description: Representation of country information
    ViewCountryResp:
      title: ViewCountryResp
      required:
      - countries
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        countries:
          type: array
          description: Countries
          items:
            $ref: '#/components/schemas/CountryDto'
      description: Response to get countries information
    MediaFilesDto:
      title: MediaFilesDto
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Media files
          items:
            $ref: '#/components/schemas/MediaFileDto'
      description: List of media files
    ViewCommissionProfilesResp:
      title: ViewCommissionProfilesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of commission profiles
          items:
            $ref: '#/components/schemas/CommissionProfileDto'
      description: Response for commission profiles viewing request
    ViewGateProfilesResp:
      title: ViewGateProfilesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of gate profiles
          items:
            $ref: '#/components/schemas/GateProfileDto'
      description: Response to gate profiles viewing request
    ViewGateLimitProfilesResp:
      title: ViewGateLimitProfilesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Gate limit profiles
          items:
            $ref: '#/components/schemas/GateLimitProfileDto'
      description: Response to gate limit profiles viewing request
    ViewExchangeSettingsRecordsResp:
      title: ViewExchangeSettingsRecordsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of exchange settings records
          items:
            $ref: '#/components/schemas/ExchangeSettingsDto'
      description: Response to exchange settings viewing request
    ViewLimitProfilesResp:
      title: ViewLimitProfilesResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: Limit profiles
          items:
            $ref: '#/components/schemas/LimitProfileDto'
      description: Response to limit profiles viewing request
    ViewCollectResp:
      title: ViewCollectResp
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        id:
          type: string
          description: Business request identifier
        amount:
          type: number
          description: Investment amount
        currency:
          $ref: '#/components/schemas/CurrencyDto'
        cashDeskSerial:
          type: string
          description: Cash desk serial
        fullName:
          type: string
          description: Cash collector's full name
        processStatus:
          type: string
          description: Business process status
        type:
          type: string
          description: Business process type
      description: Necessary parameters
    ViewCashDeskWithdrawResp:
      title: ViewCashDeskWithdrawResp
      required:
      - amount
      - cashDeskId
      - currency
      - processStatus
      - requestId
      - type
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        requestId:
          type: string
          description: Business request identifier
        amount:
          type: number
          description: withdrawal amount
        currency:
          $ref: '#/components/schemas/CurrencyDto'
        cashDeskId:
          type: string
          description: Cash desk identifier
        processStatus:
          type: string
          description: Business process status
        type:
          type: string
          description: Business process type
      description: Necessary parameters
    ViewCashDeskWithdrawalsResp:
      title: ViewCashDeskWithdrawalsResp
      required:
      - records
      type: object
      properties:
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
        message:
          type: string
          description: Response message
        records:
          type: array
          description: List of withdraw requests via cash desk
          items:
            $ref: '#/components/schemas/ViewCashDeskWithdrawResp'
      description: Response to view of withdraw requests via cash desk
    TransactionCategoryDto:
      title: TransactionCategoryDto
      type: object
      properties:
        code:
          type: string
          description: Transaction category code
        name:
          type: string
          description: Transaction category name
        imageLink:
          type: string
          description: Transaction category image link
        id:
          type: string
          description: Transaction category identifier
      description: Transaction category info
    TransactionCategoryCreateReq:
      title: TransactionCategoryCreateReq
      required:
      - code
      - name
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: Transaction category code
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Transaction category name
      description: DTO to create transaction category
    TransactionCategoryUpdateReq:
      title: TransactionCategoryUpdateReq
      required:
      - code
      - name
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: Transaction category code
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Transaction category name
        imageLink:
          type: string
          description: Transaction image link
      description: DTO to create transaction category
    TransactionCategoryToBusinessProcessTypeResp:
      title: TransactionCategoryToBusinessProcessTypeResp
      required:
      - category
      type: object
      properties:
        message:
          type: string
          description: Response message
        category:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TransactionCategoryToBusinessProcessTypeResp_category'
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response to transaction category view request
    TransactionCategoryIdReq:
      title: TransactionCategoryIdReq
      type: object
      properties:
        categoryId:
          type: string
          description: category id
    TransactionCategoryResp:
      title: TransactionCategoryResp
      required:
      - category
      type: object
      properties:
        message:
          type: string
          description: Response message
        category:
          $ref: '#/components/schemas/TransactionCategoryDto'
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
      description: Response to transaction category view request
    CoinsOverviewResp:
      title: CoinsOverviewResp
      type: object
      properties:
        roundedTotalAmount:
          minimum: 0
          type: number
          description: Rounded total amount of coins in specified currency (only to
            show not for calculation)
        currency:
          type: string
          description: Currency code
        symbol:
          type: string
          description: Currency symbol
        coinsDetail:
          type: array
          items:
            $ref: '#/components/schemas/CoinInfo'
        status:
          type: string
          description: Response status
          enum:
          - ok
          - fail
    CoinInfo:
      title: CoinInfo
      type: object
      properties:
        roundedAmount:
          minimum: 0
          type: number
          description: Rounded amount in specified currency (only to show not for
            calculation)
        percentFromTotal:
          minimum: 0
          type: number
          description: Coin amount percent from total (only to show not for calculation)
        currency:
          type: string
          description: Currency code
        symbol:
          type: string
          description: Currency symbol
        coinEntry:
          $ref: '#/components/schemas/CoinEntry'
    CoinEntry:
      title: CoinEntry
      type: object
      properties:
        amount:
          minimum: 0
          type: number
          description: Amount in original currency
        currency:
          type: string
          description: Coin original currency code
        symbol:
          type: string
          description: Coin original currency symbol
        issuerId:
          type: string
          description: Coin original currency issuer id
    ContractPageResponse:
      title: ContractPageResponse
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: Contracts
            items:
              $ref: '#/components/schemas/ContractDto'
    ExecuteExchangeReq:
      title: ExecuteExchangeReq
      type: object
      properties:
        inCoinSerial:
          type: string
          description: Coin from which funds will be withdrawn
        outCoinSerial:
          type: string
          description: Coin to which funds will be enrolled
        exchangeType:
          type: string
          enum:
          - sell
          - buy
        amount:
          minimum: 0
          type: number
          description: Exchange amount
    CalculateExchangeReq:
      title: CalculateExchangeReq
      type: object
      properties:
        inCoinSerial:
          type: string
          description: Coin from which funds will be withdrawn
        outCoinSerial:
          type: string
          description: Coin to which funds will be enrolled
        exchangeType:
          type: string
          enum:
          - sell
          - buy
        amount:
          minimum: 0
          type: number
          description: Exchange amount
    ExchangeCalculationResp:
      title: ExchangeCalculationResp
      type: object
      properties:
        topUpAmount:
          minimum: 0
          type: number
          description: Amount of funds that will be enrolled
        withdrawAmount:
          minimum: 0
          type: number
          description: Amount of funds that will be withdrawn
        exchangeRate:
          $ref: '#/components/schemas/AppliedExchangeRate'
    AppliedExchangeRate:
      title: AppliedExchangeRate
      type: object
      properties:
        id:
          type: string
          description: Rate id
        inIssuer:
          $ref: '#/components/schemas/IssuerShortDto'
        outIssuer:
          $ref: '#/components/schemas/IssuerShortDto'
        rate:
          type: number
          description: Rate value
        organisationId:
          type: string
          description: Rate owner organisation
    ViewTransactionCategoriesReq:
      title: ViewTransactionCategoriesReq
      description: Request to view users
      allOf:
      - $ref: '#/components/schemas/PageRequest'
      - type: object
        properties:
          all:
            type: boolean
            description: set true to fetch all categories
          filter:
            $ref: '#/components/schemas/TransactionCategoryFilterDto'
          sort:
            $ref: '#/components/schemas/TransactionCategorySortDto'
    TransactionCategoryFilterDto:
      title: TransactionCategoryFilterDto
      type: object
      properties:
        code:
          type: string
          description: Code of transaction category
        name:
          type: string
          description: Name of transaction category
    TransactionCategorySortDto:
      title: TransactionCategorySortDto
      type: object
      description: Sort settings
    ViewTransactionCategoriesResp:
      title: ViewTransactionCategoriesResp
      required:
      - records
      allOf:
      - $ref: '#/components/schemas/PageResponse'
      - type: object
        properties:
          records:
            type: array
            description: List of transaction categories
            items:
              $ref: '#/components/schemas/TransactionCategoryDto'
    TxAggregatedSummaryResp:
      title: TxAggregatedSummaryResp
      type: object
      properties:
        records:
          type: array
          description: List of summary spent funds grouped by categories
          items:
            $ref: '#/components/schemas/TxAggregatedSummary'
      description: Contains list of outflow grouped by transaction category
    TxAggregatedSummary:
      title: TxAggregatedSummary
      type: object
      properties:
        categoryId:
          type: string
        sum:
          type: number
        percentage:
          type: number
        numberOfOperations:
          type: integer
        currencyCode:
          type: string
        currencySymbol:
          type: string
    CreateProfileDocumentIdentifierReq:
      title: CreateProfileDocumentIdentifierReq
      properties:
        documentIdentifier:
          type: string
          description: Document identifier as a plain text.
        type:
          type: string
          description: Document type
      description: Document identifier as a plain text.
    AggregatedFundsFlowResp:
      title: AggregatedFundsFlowResp
      properties:
        inflowSum:
          type: number
        outflowSum:
          type: number
        currencyCode:
          type: string
        currencySymbol:
          type: string
    LocaleResp:
      title: LocaleResp
      type: object
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/LocaleDto'
    LocaleDto:
      title: LocaleDto
      type: object
      properties:
        language:
          type: string
          description: Locale
        lastUpdatedDate:
          type: string
          description: Last updated date
          format: date-time
      description: Locale info
      example:
        language: en
        lastUpdatedDate: 2022-10-14T15:15:57.616Z
    BaseFilterDtoRequest:
      title: BaseFilterDtoRequest
      description: Base filter DTO request
      discriminator:
        propertyName: filterType
        mapping:
          merchant_payment: '#/components/schemas/PaymentTransactionFilter'
          gate_merchant_payment: '#/components/schemas/GateMerchantPaymentTransactionFilterDto'
      oneOf:
      - $ref: '#/components/schemas/PaymentTransactionFilter'
      - $ref: '#/components/schemas/GateMerchantPaymentTransactionFilterDto'
    BaseFilterDto:
      required:
      - filterType
      type: object
      properties:
        filterType:
          type: string
      description: Base filter DTO
      discriminator:
        propertyName: filterType
    TransactionFilterDto:
      title: TransactionFilterDto
      description: Filter settings
      allOf:
      - $ref: '#/components/schemas/BaseFilterDto'
      - type: object
        properties:
          ids:
            type: array
            description: List of filtered identifiers
            items:
              type: string
          types:
            uniqueItems: true
            type: array
            description: List of filtered types
            items:
              type: string
          statuses:
            type: array
            description: List of filtered statuses
            items:
              type: string
              enum:
              - limited
              - pending
              - declined
              - processed
              - error
              - rejected
          createdAtFrom:
            type: string
            description: Beginning of interval for creation date
            format: date-time
          createdAtTo:
            type: string
            description: End of interval for creation date
            format: date-time
          coinSerials:
            type: array
            description: List of filtered coins participated in business process
            items:
              type: string
          senderCoinNames:
            type: array
            description: List of sender coin names participated in business process
            items:
              type: string
          recipientCoinNames:
            type: array
            description: List of recipient coin names participated in business process
            items:
              type: string
          orgIds:
            type: array
            description: List of filtered identifier of organizations participated
              in business process
            items:
              type: string
          issuerIds:
            type: array
            description: List of filtered issuers participated in business process
            items:
              type: string
          currencyCodes:
            type: array
            description: List of filtered codes of currencies participated in business
              process
            items:
              type: string
          requestIdentifiers:
            type: array
            description: List of filtered request identifiers
            items:
              type: integer
              format: int32
          fromEmails:
            type: array
            description: List of filtered from emails participated in business process
            items:
              type: string
          toEmails:
            type: array
            description: List of filtered to emails participated in business process
            items:
              type: string
          fromPhoneNumbers:
            type: array
            description: List of filtered from phone numbers participated in business
              process
            items:
              type: string
          toPhoneNumbers:
            type: array
            description: List of filtered to phone numbers participated in business
              process
            items:
              type: string
    ViewNotificationMessageKeyResp_messageParameterKeys:
      type: object
      properties:
        key:
          type: object
        value:
          type: object
    TransactionCategoryToBusinessProcessTypeResp_category:
      type: object
      properties:
        text:
          type: string
        category:
          $ref: '#/components/schemas/TransactionCategoryDto'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
